[
{"text": "Tutorial \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTutorial\n\u00b6Contents:Project LayoutApplication SetupDefine and Access the DatabaseBlueprints and ViewsTemplatesStatic FilesBlog BlueprintMake the Project InstallableTest CoverageDeploy to ProductionKeep Developing!This tutorial will walk you through creating a basic blog application\ncalled Flaskr. Users will be able to register, log in, create posts,\nand edit or delete their own posts. You will be able to package and\ninstall the application on other computers.It\u2019s assumed that you\u2019re already familiar with Python. Theofficial\ntutorialin the Python docs is a great way to learn or review first.While it\u2019s designed to give a good starting point, the tutorial doesn\u2019t\ncover all of Flask\u2019s features. Check out theQuickstartfor an\noverview of what Flask can do, then dive into the docs to find out more.\nThe tutorial only uses what\u2019s provided by Flask and Python. In another\nproject, you might decide to useExtensionsor other libraries to\nmake some tasks simpler.Flask is flexible. It doesn\u2019t require you to use any particular project\nor code layout. However, when first starting, it\u2019s helpful to use a more\nstructured approach. This means that the tutorial will require a bit of\nboilerplate up front, but it\u2019s done to avoid many common pitfalls that\nnew developers encounter, and it creates a project that\u2019s easy to expand\non. Once you become more comfortable with Flask, you can step out of\nthis structure and take full advantage of Flask\u2019s flexibility.The tutorial project is available as an example in the Flask\nrepository\n, if you want to compare your project\nwith the final product as you follow the tutorial.Continue toProject Layout\n.NavigationOverviewPrevious:QuickstartNext:Project LayoutVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/tutorial/"},
{"text": "Python Module Index \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|Flask 1.0.2 documentation\u00bbPython Module Indexffflaskflask.jsonflask.json.tagNavigationOverviewVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/py-modindex/"},
{"text": "Quickstart \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbQuickstart\n\u00b6Eager to get started?This page gives a good introduction to Flask.It\nassumes you already have Flask installed.If you do not, head over to theInstallationsection.A Minimal Application\n\u00b6A minimal Flask application looks something like this:fromflaskimportFlaskapp=Flask\n(\n__name__\n)@app\n.\nroute\n(\n'/'\n)defhello_world\n():return'Hello, World!'So what did that code do?First we imported theFlaskclass.An instance of this\nclass will be our WSGI application.Next we create an instance of this class. The first argument is the name of\nthe application\u2019s module or package.If you are using a single module (as\nin this example), you should use__name__because depending on if it\u2019s\nstarted as application or imported as module the name will be different\n(\n'__main__'versus the actual import name). This is needed so that\nFlask knows where to look for templates, static files, and so on. For more\ninformation have a look at theFlaskdocumentation.We then use theroute()decorator to tell Flask what URL\nshould trigger our function.The function is given a name which is also used to generate URLs for that\nparticular function, and returns the message we want to display in the\nuser\u2019s browser.Just save it ashello.pyor something similar. Make sure to not call\nyour applicationflask.pybecause this would conflict with Flask\nitself.To run the application you can either use theflaskcommand or\npython\u2019s-mswitch with Flask.Before you can do that you need\nto tell your terminal the application to work with by exporting theFLASK_APPenvironment variable:$ export FLASK_APP=hello.py\n$ flask run* Running on http://127.0.0.1:5000/If you are on Windows, the environment variable syntax depends on command line\ninterpreter. On Command Prompt:C\n:\n\\\npath\n\\\nto\n\\\napp\n>\nsetFLASK_APP\n=\nhello\n.\npyAnd on PowerShell:PS C:\\path\\to\\app> $env:FLASK_APP = \"hello.py\"Alternatively you can usepython -m flask\n:$ export FLASK_APP=hello.py\n$ python -m flask run* Running on http://127.0.0.1:5000/This launches a very simple builtin server, which is good enough for testing\nbut probably not what you want to use in production. For deployment options seeDeployment Options\n.Now head over tohttp://127.0.0.1:5000/\n, and you\nshould see your hello world greeting.Externally Visible ServerIf you run the server you will notice that the server is only accessible\nfrom your own computer, not from any other in the network.This is the\ndefault because in debugging mode a user of the application can execute\narbitrary Python code on your computer.If you have the debugger disabled or trust the users on your network,\nyou can make the server publicly available simply by adding--host=0.0.0.0to the command line:flaskrun--\nhost\n=\n0.0\n.\n0.0This tells your operating system to listen on all public IPs.What to do if the Server does not Start\n\u00b6In case thepython -m flaskfails orflaskdoes not exist,\nthere are multiple reasons this might be the case.First of all you need\nto look at the error message.Old Version of Flask\n\u00b6Versions of Flask older than 0.11 use to have different ways to start the\napplication.In short, theflaskcommand did not exist, and\nneither didpython -m flask\n.In that case you have two options:\neither upgrade to newer Flask versions or have a look at theDevelopment Serverdocs to see the alternative method for running a server.Invalid Import Name\n\u00b6TheFLASK_APPenvironment variable is the name of the module to import atflask run\n. In case that module is incorrectly named you will get an\nimport error upon start (or if debug is enabled when you navigate to the\napplication). It will tell you what it tried to import and why it failed.The most common reason is a typo or because you did not actually create anappobject.Debug Mode\n\u00b6(Want to just log errors and stack traces? SeeApplication Errors\n)Theflaskscript is nice to start a local development server, but\nyou would have to restart it manually after each change to your code.\nThat is not very nice and Flask can do better.If you enable debug\nsupport the server will reload itself on code changes, and it will also\nprovide you with a helpful debugger if things go wrong.To enable all development features (including debug mode) you can export\ntheFLASK_ENVenvironment variable and set it todevelopmentbefore running the server:$ export FLASK_ENV=development\n$ flask run(On Windows you need to usesetinstead ofexport\n.)This does the following things:it activates the debuggerit activates the automatic reloaderit enables the debug mode on the Flask application.You can also control debug mode separately from the environment by\nexportingFLASK_DEBUG=1\n.There are more parameters that are explained in theDevelopment Serverdocs.AttentionEven though the interactive debugger does not work in forking environments\n(which makes it nearly impossible to use on production servers), it still\nallows the execution of arbitrary code. This makes it a major security risk\nand therefore itmust never be used on production machines\n.Screenshot of the debugger in action:More information on using the debugger can be found in theWerkzeug\ndocumentation\n.Have another debugger in mind? SeeWorking with Debuggers\n.Routing\n\u00b6Modern web applications use meaningful URLs to help users. Users are more\nlikely to like a page and come back if the page uses a meaningful URL they can\nremember and use to directly visit a page.Use theroute()decorator to bind a function to a URL.@app\n.\nroute\n(\n'/'\n)defindex\n():return'Index Page'@app\n.\nroute\n(\n'/hello'\n)defhello\n():return'Hello, World'You can do more! You can make parts of the URL dynamic and attach multiple\nrules to a function.Variable Rules\n\u00b6You can add variable sections to a URL by marking sections with<variable_name>\n. Your function then receives the<variable_name>as a keyword argument. Optionally, you can use a converter to specify the type\nof the argument like<converter:variable_name>\n.@app\n.\nroute\n(\n'/user/<username>'\n)defshow_user_profile\n(\nusername\n):# show the user profile for that userreturn'User%s\n'%username@app\n.\nroute\n(\n'/post/<int:post_id>'\n)defshow_post\n(\npost_id\n):# show the post with the given id, the id is an integerreturn'Post%d\n'%post_id@app\n.\nroute\n(\n'/path/<path:subpath>'\n)defshow_subpath\n(\nsubpath\n):# show the subpath after /path/return'Subpath%s\n'%subpathConverter types:string(default) accepts any text without a slashintaccepts positive integersfloataccepts positive floating point valuespathlikestringbut also accepts slashesuuidaccepts UUID stringsUnique URLs / Redirection Behavior\n\u00b6The following two rules differ in their use of a trailing slash.@app\n.\nroute\n(\n'/projects/'\n)defprojects\n():return'The project page'@app\n.\nroute\n(\n'/about'\n)defabout\n():return'The about page'The canonical URL for theprojectsendpoint has a trailing slash.\nIt\u2019s similar to a folder in a file system. If you access the URL without\na trailing slash, Flask redirects you to the canonical URL with the\ntrailing slash.The canonical URL for theaboutendpoint does not have a trailing\nslash. It\u2019s similar to the pathname of a file. Accessing the URL with a\ntrailing slash produces a 404 \u201cNot Found\u201d error. This helps keep URLs\nunique for these resources, which helps search engines avoid indexing\nthe same page twice.URL Building\n\u00b6To build a URL to a specific function, use theurl_for()function.\nIt accepts the name of the function as its first argument and any number of\nkeyword arguments, each corresponding to a variable part of the URL rule.\nUnknown variable parts are appended to the URL as query parameters.Why would you want to build URLs using the URL reversing functionurl_for()instead of hard-coding them into your templates?Reversing is often more descriptive than hard-coding the URLs.You can change your URLs in one go instead of needing to remember tomanually change hard-coded URLs.URL building handles escaping of special characters and Unicode datatransparently.The generated paths are always absolute, avoiding unexpected behavior\nof relative paths in browsers.If your application is placed outside the URL root, for example, in/myapplicationinstead of/\n,url_for()properly\nhandles that for you.For example, here we use thetest_request_context()method\nto try outurl_for()\n.test_request_context()tells Flask to behave as though it\u2019s handling a request even while we use a\nPython shell. SeeContext Locals\n.from flask import Flask, url_forapp = Flask(__name__)@app.route('/')\ndef index():return 'index'@app.route('/login')\ndef login():return 'login'@app.route('/user/<username>')\ndef profile(username):return '{}\\'s profile'.format(username)with app.test_request_context():print(url_for('index'))print(url_for('login'))print(url_for('login', next='/'))print(url_for('profile', username='John Doe'))/\n/login\n/login?next=/\n/user/John%20DoeHTTP Methods\n\u00b6Web applications use different HTTP methods when accessing URLs. You should\nfamiliarize yourself with the HTTP methods as you work with Flask. By default,\na route only answers toGETrequests. You can use themethodsargument\nof theroute()decorator to handle different HTTP methods.fromflaskimportrequest@app\n.\nroute\n(\n'/login'\n,methods\n=\n[\n'GET'\n,'POST'\n])deflogin\n():ifrequest\n.\nmethod=='POST'\n:returndo_the_login\n()else\n:returnshow_the_login_form\n()IfGETis present, Flask automatically adds support for theHEADmethod\nand handlesHEADrequests according to theHTTP RFC\n. Likewise,OPTIONSis automatically implemented for you.Static Files\n\u00b6Dynamic web applications also need static files.That\u2019s usually where\nthe CSS and JavaScript files are coming from.Ideally your web server is\nconfigured to serve them for you, but during development Flask can do that\nas well.Just create a folder calledstaticin your package or next to\nyour module and it will be available at/staticon the application.To generate URLs for static files, use the special'static'endpoint name:url_for\n(\n'static'\n,filename\n=\n'style.css'\n)The file has to be stored on the filesystem asstatic/style.css\n.Rendering Templates\n\u00b6Generating HTML from within Python is not fun, and actually pretty\ncumbersome because you have to do the HTML escaping on your own to keep\nthe application secure.Because of that Flask configures theJinja2template engine for you automatically.To render a template you can use therender_template()method.All you have to do is provide the name of the template and the\nvariables you want to pass to the template engine as keyword arguments.\nHere\u2019s a simple example of how to render a template:fromflaskimportrender_template@app\n.\nroute\n(\n'/hello/'\n)@app\n.\nroute\n(\n'/hello/<name>'\n)defhello\n(\nname\n=\nNone\n):returnrender_template\n(\n'hello.html'\n,name\n=\nname\n)Flask will look for templates in thetemplatesfolder.So if your\napplication is a module, this folder is next to that module, if it\u2019s a\npackage it\u2019s actually inside your package:Case 1\n: a module:/\napplication\n.\npy/\ntemplates/\nhello\n.\nhtmlCase 2\n: a package:/\napplication/\n__init__\n.\npy/\ntemplates/\nhello\n.\nhtmlFor templates you can use the full power of Jinja2 templates.Head over\nto the officialJinja2 Template Documentationfor more information.Here is an example template:<!doctype html><\ntitle\n>\nHello from Flask\n</\ntitle\n>{%ifname%}<\nh1\n>\nHello{{name}}\n!\n</\nh1\n>{%else%}<\nh1\n>\nHello, World!\n</\nh1\n>{%endif%}Inside templates you also have access to therequest\n,sessionandg[1]objects\nas well as theget_flashed_messages()function.Templates are especially useful if inheritance is used.If you want to\nknow how that works, head over to theTemplate Inheritancepattern\ndocumentation.Basically template inheritance makes it possible to keep\ncertain elements on each page (like header, navigation and footer).Automatic escaping is enabled, so ifnamecontains HTML it will be escaped\nautomatically.If you can trust a variable and you know that it will be\nsafe HTML (for example because it came from a module that converts wiki\nmarkup to HTML) you can mark it as safe by using theMarkupclass or by using the|safefilter in the\ntemplate.Head over to the Jinja 2 documentation for more examples.Here is a basic introduction to how theMarkupclass works:>>>fromflaskimportMarkup>>>Markup\n(\n'<strong>Hello%s\n!</strong>'\n)%'<blink>hacker</blink>'Markup(u'<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>')>>>Markup\n.\nescape\n(\n'<blink>hacker</blink>'\n)Markup(u'&lt;blink&gt;hacker&lt;/blink&gt;')>>>Markup\n(\n'<em>Marked up</em> &raquo; HTML'\n)\n.\nstriptags\n()u'Marked up \\xbb HTML'ChangelogChanged in version 0.5:Autoescaping is no longer enabled for all templates.The following\nextensions for templates trigger autoescaping:.html\n,.htm\n,.xml\n,.xhtml\n.Templates loaded from a string will have\nautoescaping disabled.[1]\nUnsure what thatgobject is? It\u2019s something in which\nyou can store information for your own needs, check the documentation of\nthat object (\ng\n) and theUsing SQLite 3 with Flaskfor more\ninformation.Accessing Request Data\n\u00b6For web applications it\u2019s crucial to react to the data a client sends to\nthe server.In Flask this information is provided by the globalrequestobject.If you have some experience with Python\nyou might be wondering how that object can be global and how Flask\nmanages to still be threadsafe.The answer is context locals:Context Locals\n\u00b6Insider InformationIf you want to understand how that works and how you can implement\ntests with context locals, read this section, otherwise just skip it.Certain objects in Flask are global objects, but not of the usual kind.\nThese objects are actually proxies to objects that are local to a specific\ncontext.What a mouthful.But that is actually quite easy to understand.Imagine the context being the handling thread.A request comes in and the\nweb server decides to spawn a new thread (or something else, the\nunderlying object is capable of dealing with concurrency systems other\nthan threads).When Flask starts its internal request handling it\nfigures out that the current thread is the active context and binds the\ncurrent application and the WSGI environments to that context (thread).\nIt does that in an intelligent way so that one application can invoke another\napplication without breaking.So what does this mean to you?Basically you can completely ignore that\nthis is the case unless you are doing something like unit testing.You\nwill notice that code which depends on a request object will suddenly break\nbecause there is no request object.The solution is creating a request\nobject yourself and binding it to the context.The easiest solution for\nunit testing is to use thetest_request_context()context manager.In combination with thewithstatement it will bind a\ntest request so that you can interact with it.Here is an example:fromflaskimportrequestwithapp\n.\ntest_request_context\n(\n'/hello'\n,method\n=\n'POST'\n):# now you can do something with the request until the# end of the with block, such as basic assertions:assertrequest\n.\npath=='/hello'assertrequest\n.\nmethod=='POST'The other possibility is passing a whole WSGI environment to therequest_context()method:fromflaskimportrequestwithapp\n.\nrequest_context\n(\nenviron\n):assertrequest\n.\nmethod=='POST'The Request Object\n\u00b6The request object is documented in the API section and we will not cover\nit here in detail (seeRequest\n). Here is a broad overview of\nsome of the most common operations.First of all you have to import it from\ntheflaskmodule:fromflaskimportrequestThe current request method is available by using themethodattribute.To access form data (data\ntransmitted in aPOSTorPUTrequest) you can use theformattribute.Here is a full example of the two\nattributes mentioned above:@app\n.\nroute\n(\n'/login'\n,methods\n=\n[\n'POST'\n,'GET'\n])deflogin\n():error=Noneifrequest\n.\nmethod=='POST'\n:ifvalid_login\n(\nrequest\n.\nform\n[\n'username'\n],request\n.\nform\n[\n'password'\n]):returnlog_the_user_in\n(\nrequest\n.\nform\n[\n'username'\n])else\n:error='Invalid username/password'# the code below is executed if the request method# was GET or the credentials were invalidreturnrender_template\n(\n'login.html'\n,error\n=\nerror\n)What happens if the key does not exist in theformattribute?In that\ncase a specialKeyErroris raised.You can catch it like a\nstandardKeyErrorbut if you don\u2019t do that, a HTTP 400 Bad Request\nerror page is shown instead.So for many situations you don\u2019t have to\ndeal with that problem.To access parameters submitted in the URL (\n?key=value\n) you can use theargsattribute:searchword=request\n.\nargs\n.\nget\n(\n'key'\n,''\n)We recommend accessing URL parameters withgetor by catching theKeyErrorbecause users might change the URL and presenting them a 400\nbad request page in that case is not user friendly.For a full list of methods and attributes of the request object, head over\nto theRequestdocumentation.File Uploads\n\u00b6You can handle uploaded files with Flask easily.Just make sure not to\nforget to set theenctype=\"multipart/form-data\"attribute on your HTML\nform, otherwise the browser will not transmit your files at all.Uploaded files are stored in memory or at a temporary location on the\nfilesystem.You can access those files by looking at thefilesattribute on the request object.Each\nuploaded file is stored in that dictionary.It behaves just like a\nstandard Pythonfileobject, but it also has asave()method that allows you to store that\nfile on the filesystem of the server.Here is a simple example showing how\nthat works:fromflaskimportrequest@app\n.\nroute\n(\n'/upload'\n,methods\n=\n[\n'GET'\n,'POST'\n])defupload_file\n():ifrequest\n.\nmethod=='POST'\n:f=request\n.\nfiles\n[\n'the_file'\n]f\n.\nsave\n(\n'/var/www/uploads/uploaded_file.txt'\n)...If you want to know how the file was named on the client before it was\nuploaded to your application, you can access thefilenameattribute.However please keep in\nmind that this value can be forged so never ever trust that value.If you\nwant to use the filename of the client to store the file on the server,\npass it through thesecure_filename()function that\nWerkzeug provides for you:fromflaskimportrequestfromwerkzeug.utilsimportsecure_filename@app\n.\nroute\n(\n'/upload'\n,methods\n=\n[\n'GET'\n,'POST'\n])defupload_file\n():ifrequest\n.\nmethod=='POST'\n:f=request\n.\nfiles\n[\n'the_file'\n]f\n.\nsave\n(\n'/var/www/uploads/'+secure_filename\n(\nf\n.\nfilename\n))...For some better examples, checkout theUploading Filespattern.Cookies\n\u00b6To access cookies you can use thecookiesattribute.To set cookies you can use theset_cookiemethod of response objects.Thecookiesattribute of request objects is a\ndictionary with all the cookies the client transmits.If you want to use\nsessions, do not use the cookies directly but instead use theSessionsin Flask that add some security on top of cookies for you.Reading cookies:fromflaskimportrequest@app\n.\nroute\n(\n'/'\n)defindex\n():username=request\n.\ncookies\n.\nget\n(\n'username'\n)# use cookies.get(key) instead of cookies[key] to not get a# KeyError if the cookie is missing.Storing cookies:fromflaskimportmake_response@app\n.\nroute\n(\n'/'\n)defindex\n():resp=make_response\n(\nrender_template\n(\n...\n))resp\n.\nset_cookie\n(\n'username'\n,'the username'\n)returnrespNote that cookies are set on response objects.Since you normally\njust return strings from the view functions Flask will convert them into\nresponse objects for you.If you explicitly want to do that you can use\nthemake_response()function and then modify it.Sometimes you might want to set a cookie at a point where the response\nobject does not exist yet.This is possible by utilizing theDeferred Request Callbackspattern.For this also seeAbout Responses\n.Redirects and Errors\n\u00b6To redirect a user to another endpoint, use theredirect()function; to abort a request early with an error code, use theabort()function:fromflaskimportabort\n,redirect\n,url_for@app\n.\nroute\n(\n'/'\n)defindex\n():returnredirect\n(\nurl_for\n(\n'login'\n))@app\n.\nroute\n(\n'/login'\n)deflogin\n():abort\n(\n401\n)this_is_never_executed\n()This is a rather pointless example because a user will be redirected from\nthe index to a page they cannot access (401 means access denied) but it\nshows how that works.By default a black and white error page is shown for each error code.If\nyou want to customize the error page, you can use theerrorhandler()decorator:fromflaskimportrender_template@app\n.\nerrorhandler\n(\n404\n)defpage_not_found\n(\nerror\n):returnrender_template\n(\n'page_not_found.html'\n),404Note the404after therender_template()call.This\ntells Flask that the status code of that page should be 404 which means\nnot found.By default 200 is assumed which translates to: all went well.SeeError handlersfor more details.About Responses\n\u00b6The return value from a view function is automatically converted into a\nresponse object for you.If the return value is a string it\u2019s converted\ninto a response object with the string as response body, a200OKstatus code and atext/htmlmimetype.The logic that Flask applies to\nconverting return values into response objects is as follows:If a response object of the correct type is returned it\u2019s directly\nreturned from the view.If it\u2019s a string, a response object is created with that data and the\ndefault parameters.If a tuple is returned the items in the tuple can provide extra\ninformation.Such tuples have to be in the form(response,status,headers)or(response,headers)where at least one item has\nto be in the tuple.Thestatusvalue will override the status code\nandheaderscan be a list or dictionary of additional header values.If none of that works, Flask will assume the return value is a\nvalid WSGI application and convert that into a response object.If you want to get hold of the resulting response object inside the view\nyou can use themake_response()function.Imagine you have a view like this:@app\n.\nerrorhandler\n(\n404\n)defnot_found\n(\nerror\n):returnrender_template\n(\n'error.html'\n),404You just need to wrap the return expression withmake_response()and get the response object to modify it, then\nreturn it:@app\n.\nerrorhandler\n(\n404\n)defnot_found\n(\nerror\n):resp=make_response\n(\nrender_template\n(\n'error.html'\n),404\n)resp\n.\nheaders\n[\n'X-Something'\n]='A value'returnrespSessions\n\u00b6In addition to the request object there is also a second object calledsessionwhich allows you to store information specific to a\nuser from one request to the next.This is implemented on top of cookies\nfor you and signs the cookies cryptographically.What this means is that\nthe user could look at the contents of your cookie but not modify it,\nunless they know the secret key used for signing.In order to use sessions you have to set a secret key.Here is how\nsessions work:fromflaskimportFlask\n,session\n,redirect\n,url_for\n,escape\n,requestapp=Flask\n(\n__name__\n)# Set the secret key to some random bytes. Keep this really secret!app\n.\nsecret_key=b\n'_5#y2L\"F4Q8z\n\\n\\xec\n]/'@app\n.\nroute\n(\n'/'\n)defindex\n():if'username'insession\n:return'Logged in as%s\n'%escape\n(\nsession\n[\n'username'\n])return'You are not logged in'@app\n.\nroute\n(\n'/login'\n,methods\n=\n[\n'GET'\n,'POST'\n])deflogin\n():ifrequest\n.\nmethod=='POST'\n:session\n[\n'username'\n]=request\n.\nform\n[\n'username'\n]returnredirect\n(\nurl_for\n(\n'index'\n))return'''<form method=\"post\"><p><input type=text name=username><p><input type=submit value=Login></form>'''@app\n.\nroute\n(\n'/logout'\n)deflogout\n():# remove the username from the session if it's theresession\n.\npop\n(\n'username'\n,None\n)returnredirect\n(\nurl_for\n(\n'index'\n))Theescape()mentioned here does escaping for you if you are\nnot using the template engine (as in this example).How to generate good secret keysA secret key should be as random as possible. Your operating system has\nways to generate pretty random data based on a cryptographic random\ngenerator. Use the following command to quickly generate a value forFlask.secret_key(orSECRET_KEY\n):$ python -c 'import os; print(os.urandom(16))'\nb'_5#y2L\"F4Q8z\\n\\xec]/'A note on cookie-based sessions: Flask will take the values you put into the\nsession object and serialize them into a cookie.If you are finding some\nvalues do not persist across requests, cookies are indeed enabled, and you are\nnot getting a clear error message, check the size of the cookie in your page\nresponses compared to the size supported by web browsers.Besides the default client-side based sessions, if you want to handle\nsessions on the server-side instead, there are several\nFlask extensions that support this.Message Flashing\n\u00b6Good applications and user interfaces are all about feedback.If the user\ndoes not get enough feedback they will probably end up hating the\napplication.Flask provides a really simple way to give feedback to a\nuser with the flashing system.The flashing system basically makes it\npossible to record a message at the end of a request and access it on the next\n(and only the next) request.This is usually combined with a layout\ntemplate to expose the message.To flash a message use theflash()method, to get hold of the\nmessages you can useget_flashed_messages()which is also\navailable in the templates.Check out theMessage Flashingfor a full example.Logging\n\u00b6ChangelogNew in version 0.3.Sometimes you might be in a situation where you deal with data that\nshould be correct, but actually is not.For example you may have some client-side\ncode that sends an HTTP request to the server but it\u2019s obviously\nmalformed.This might be caused by a user tampering with the data, or the\nclient code failing.Most of the time it\u2019s okay to reply with400BadRequestin that situation, but sometimes that won\u2019t do and the code has\nto continue working.You may still want to log that something fishy happened.This is where\nloggers come in handy.As of Flask 0.3 a logger is preconfigured for you\nto use.Here are some example log calls:app\n.\nlogger\n.\ndebug\n(\n'A value for debugging'\n)app\n.\nlogger\n.\nwarning\n(\n'A warning occurred (\n%dapples)'\n,42\n)app\n.\nlogger\n.\nerror\n(\n'An error occurred'\n)The attachedloggeris a standard loggingLogger\n, so head over to the officiallogging\ndocumentationfor more\ninformation.Read more onApplication Errors\n.Hooking in WSGI Middlewares\n\u00b6If you want to add a WSGI middleware to your application you can wrap the\ninternal WSGI application.For example if you want to use one of the\nmiddlewares from the Werkzeug package to work around bugs in lighttpd, you\ncan do it like this:fromwerkzeug.contrib.fixersimportLighttpdCGIRootFixapp\n.\nwsgi_app=LighttpdCGIRootFix\n(\napp\n.\nwsgi_app\n)Using Flask Extensions\n\u00b6Extensions are packages that help you accomplish common tasks. For\nexample, Flask-SQLAlchemy provides SQLAlchemy support that makes it simple\nand easy to use with Flask.For more on Flask extensions, have a look atExtensions\n.Deploying to a Web Server\n\u00b6Ready to deploy your new Flask app? Go toDeployment Options\n.ContentsQuickstartA Minimal ApplicationWhat to do if the Server does not StartOld Version of FlaskInvalid Import NameDebug ModeRoutingVariable RulesUnique URLs / Redirection BehaviorURL BuildingHTTP MethodsStatic FilesRendering TemplatesAccessing Request DataContext LocalsThe Request ObjectFile UploadsCookiesRedirects and ErrorsAbout ResponsesSessionsMessage FlashingLoggingHooking in WSGI MiddlewaresUsing Flask ExtensionsDeploying to a Web ServerNavigationOverviewPrevious:InstallationNext:TutorialVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/quickstart/"},
{"text": "Foreword for Experienced Programmers \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbForeword for Experienced Programmers\n\u00b6Thread-Locals in Flask\n\u00b6One of the design decisions in Flask was that simple tasks should be simple;\nthey should not take a lot of code and yet they should not limit you. Because\nof that, Flask has a few design choices that some people might find surprising or\nunorthodox. For example, Flask uses thread-local objects internally so that you\ndon\u2019t have to pass objects around from function to function within a request in\norder to stay threadsafe. This approach is convenient, but requires a valid\nrequest context for dependency injection or when attempting to reuse code which\nuses a value pegged to the request.The Flask project is honest about\nthread-locals, does not hide them, and calls out in the code and documentation\nwhere they are used.Develop for the Web with Caution\n\u00b6Always keep security in mind when building web applications.If you write a web application, you are probably allowing users to register\nand leave their data on your server.The users are entrusting you with data.\nAnd even if you are the only user that might leave data in your application,\nyou still want that data to be stored securely.Unfortunately, there are many ways the security of a web application can be\ncompromised.Flask protects you against one of the most common security\nproblems of modern web applications: cross-site scripting (XSS).Unless you\ndeliberately mark insecure HTML as secure, Flask and the underlying Jinja2\ntemplate engine have you covered.But there are many more ways to cause\nsecurity problems.The documentation will warn you about aspects of web development that require\nattention to security.Some of these security concerns are far more complex\nthan one might think, and we all sometimes underestimate the likelihood that a\nvulnerability will be exploited - until a clever attacker figures out a way to\nexploit our applications.And don\u2019t think that your application is not\nimportant enough to attract an attacker.Depending on the kind of attack,\nchances are that automated bots are probing for ways to fill your database with\nspam, links to malicious software, and the like.Flask is no different from any other framework in that you the developer must\nbuild with caution, watching for exploits when building to your requirements.ContentsForeword for Experienced ProgrammersThread-Locals in FlaskDevelop for the Web with CautionNavigationOverviewPrevious:ForewordNext:InstallationVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/advanced_foreword/"},
{"text": "Foreword \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbForeword\n\u00b6Read this before you get started with Flask.This hopefully answers some\nquestions about the purpose and goals of the project, and when you\nshould or should not be using it.What does \u201cmicro\u201d mean?\n\u00b6\u201cMicro\u201d does not mean that your whole web application has to fit into a single\nPython file (although it certainly can), nor does it mean that Flask is lacking\nin functionality. The \u201cmicro\u201d in microframework means Flask aims to keep the\ncore simple but extensible. Flask won\u2019t make many decisions for you, such as\nwhat database to use. Those decisions that it does make, such as what\ntemplating engine to use, are easy to change.Everything else is up to you, so\nthat Flask can be everything you need and nothing you don\u2019t.By default, Flask does not include a database abstraction layer, form\nvalidation or anything else where different libraries already exist that can\nhandle that. Instead, Flask supports extensions to add such functionality to\nyour application as if it was implemented in Flask itself. Numerous extensions\nprovide database integration, form validation, upload handling, various open\nauthentication technologies, and more. Flask may be \u201cmicro\u201d, but it\u2019s ready for\nproduction use on a variety of needs.Configuration and Conventions\n\u00b6Flask has many configuration values, with sensible defaults, and a few\nconventions when getting started.By convention, templates and static files are\nstored in subdirectories within the application\u2019s Python source tree, with the\nnamestemplatesandstaticrespectively. While this can be changed, you\nusually don\u2019t have to, especially when getting started.Growing with Flask\n\u00b6Once you have Flask up and running, you\u2019ll find a variety of extensions\navailable in the community to integrate your project for production. The Flask\ncore team reviews extensions and ensures approved extensions do not break with\nfuture releases.As your codebase grows, you are free to make the design decisions appropriate\nfor your project.Flask will continue to provide a very simple glue layer to\nthe best that Python has to offer.You can implement advanced patterns in\nSQLAlchemy or another database tool, introduce non-relational data persistence\nas appropriate, and take advantage of framework-agnostic tools built for WSGI,\nthe Python web interface.Flask includes many hooks to customize its behavior. Should you need more\ncustomization, the Flask class is built for subclassing. If you are interested\nin that, check out theBecoming Bigchapter.If you are curious about\nthe Flask design principles, head over to the section aboutDesign Decisions in Flask\n.Continue toInstallation\n, theQuickstart\n, or theForeword for Experienced Programmers\n.ContentsForewordWhat does \u201cmicro\u201d mean?Configuration and ConventionsGrowing with FlaskNavigationOverviewPrevious:Welcome to FlaskNext:Foreword for Experienced ProgrammersVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/foreword/"},
{"text": "Welcome to Flask \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '';Navigationindexmodules|next|Flask 1.0.2 documentation\u00bbWelcome to Flask\n\u00b6Welcome to Flask\u2019s documentation. Get started withInstallationand then get an overview with theQuickstart\n. There is also a\nmore detailedTutorialthat shows how to create a small but\ncomplete application with Flask. Common patterns are described in thePatterns for Flasksection. The rest of the docs describe each component of\nFlask in detail, with a full reference in theAPIsection.Flask depends on theJinjatemplate engine and theWerkzeugWSGI\ntoolkit. The documentation for these libraries can be found at:Jinja documentationWerkzeug documentationUser\u2019s Guide\n\u00b6This part of the documentation, which is mostly prose, begins with some\nbackground information about Flask, then focuses on step-by-step\ninstructions for web development with Flask.ForewordWhat does \u201cmicro\u201d mean?Configuration and ConventionsGrowing with FlaskForeword for Experienced ProgrammersThread-Locals in FlaskDevelop for the Web with CautionInstallationPython VersionDependenciesVirtual environmentsInstall FlaskInstall virtualenvQuickstartA Minimal ApplicationWhat to do if the Server does not StartDebug ModeRoutingStatic FilesRendering TemplatesAccessing Request DataRedirects and ErrorsAbout ResponsesSessionsMessage FlashingLoggingHooking in WSGI MiddlewaresUsing Flask ExtensionsDeploying to a Web ServerTutorialProject LayoutApplication SetupDefine and Access the DatabaseBlueprints and ViewsTemplatesStatic FilesBlog BlueprintMake the Project InstallableTest CoverageDeploy to ProductionKeep Developing!TemplatesJinja SetupStandard ContextStandard FiltersControlling AutoescapingRegistering FiltersContext ProcessorsTesting Flask ApplicationsThe ApplicationThe Testing SkeletonThe First TestLogging In and OutTest Adding MessagesOther Testing TricksFaking Resources and ContextKeeping the Context AroundAccessing and Modifying SessionsTesting JSON APIsTesting CLI CommandsApplication ErrorsError Logging ToolsError handlersLoggingDebugging Application ErrorsWhen in Doubt, Run ManuallyWorking with DebuggersLoggingBasic ConfigurationEmail Errors to AdminsInjecting Request InformationOther LibrariesConfiguration HandlingConfiguration BasicsEnvironment and Debug FeaturesBuiltin Configuration ValuesConfiguring from FilesConfiguring from Environment VariablesConfiguration Best PracticesDevelopment / ProductionInstance FoldersSignalsSubscribing to SignalsCreating SignalsSending SignalsSignals and Flask\u2019s Request ContextDecorator Based Signal SubscriptionsCore SignalsPluggable ViewsBasic PrincipleMethod HintsMethod Based DispatchingDecorating ViewsMethod Views for APIsThe Application ContextPurpose of the ContextLifetime of the ContextManually Push a ContextStoring DataEvents and SignalsThe Request ContextPurpose of the ContextLifetime of the ContextManually Push a ContextHow the Context WorksCallbacks and ErrorsContext Preservation on ErrorNotes On ProxiesModular Applications with BlueprintsWhy Blueprints?The Concept of BlueprintsMy First BlueprintRegistering BlueprintsBlueprint ResourcesBuilding URLsError HandlersExtensionsFinding ExtensionsUsing ExtensionsBuilding ExtensionsCommand Line InterfaceApplication DiscoveryRun the Development ServerOpen a ShellEnvironmentsDebug ModeEnvironment Variables From dotenvEnvironment Variables From virtualenvCustom CommandsPluginsCustom ScriptsPyCharm IntegrationDevelopment ServerCommand LineIn CodeWorking with the ShellCommand Line InterfaceCreating a Request ContextFiring Before/After RequestFurther Improving the Shell ExperiencePatterns for FlaskLarger ApplicationsApplication FactoriesApplication DispatchingImplementing API ExceptionsUsing URL ProcessorsDeploying with SetuptoolsDeploying with FabricUsing SQLite 3 with FlaskSQLAlchemy in FlaskUploading FilesCachingView DecoratorsForm Validation with WTFormsTemplate InheritanceMessage FlashingAJAX with jQueryCustom Error PagesLazily Loading ViewsMongoKit in FlaskAdding a faviconStreaming ContentsDeferred Request CallbacksAdding HTTP Method OverridesRequest Content ChecksumsCelery Background TasksSubclassing FlaskDeployment OptionsHosted optionsSelf-hosted optionsBecoming BigRead the Source.Hook. Extend.Subclass.Wrap with middleware.Fork.Scale like a pro.Discuss with the community.API Reference\n\u00b6If you are looking for information on a specific function, class or\nmethod, this part of the documentation is for you.APIApplication ObjectBlueprint ObjectsIncoming Request DataResponse ObjectsSessionsSession InterfaceTest ClientTest CLI RunnerApplication GlobalsUseful Functions and ClassesMessage FlashingJSON SupportTemplate RenderingConfigurationStream HelpersUseful InternalsSignalsClass-Based ViewsURL Route RegistrationsView Function OptionsCommand Line InterfaceAdditional Notes\n\u00b6Design notes, legal information and changelog are here for the interested.Design Decisions in FlaskThe Explicit Application ObjectThe Routing SystemOne Template EngineMicro with DependenciesThread LocalsWhat Flask is, What Flask is NotHTML/XHTML FAQHistory of XHTMLHistory of HTML5HTML versus XHTMLWhat does \u201cstrict\u201d mean?New technologies in HTML5What should be used?Security ConsiderationsCross-Site Scripting (XSS)Cross-Site Request Forgery (CSRF)JSON SecuritySecurity HeadersUnicode in FlaskAutomatic ConversionThe Golden RuleEncoding and Decoding YourselfConfiguring EditorsFlask Extension DevelopmentAnatomy of an Extension\u201cHello Flaskext!\u201dInitializing ExtensionsThe Extension CodeUsing _app_ctx_stackLearn from OthersApproved ExtensionsPocoo StyleguideGeneral LayoutExpressions and StatementsNaming ConventionsDocstringsCommentsUpgrading to Newer ReleasesVersion 0.12Version 0.11Version 0.10Version 0.9Version 0.8Version 0.7Version 0.6Version 0.5Version 0.4Version 0.3Flask ChangelogVersion 1.0.3Version 1.0.2Version 1.0.1Version 1.0Version 0.12.4Version 0.12.3Version 0.12.2Version 0.12.1Version 0.12Version 0.11.2Version 0.11.1Version 0.11Version 0.10.2Version 0.10.1Version 0.10Version 0.9Version 0.8.1Version 0.8Version 0.7.3Version 0.7.2Version 0.7.1Version 0.7Version 0.6.1Version 0.6Version 0.5.2Version 0.5.1Version 0.5Version 0.4Version 0.3.1Version 0.3Version 0.2Version 0.1LicenseAuthorsGeneral License DefinitionsFlask LicenseFlask Artwork LicenseHow to contribute to FlaskSupport questionsReporting issuesSubmitting patchesCaution: zero-padded file modesProject LinksDonate to PalletsFlask WebsitePyPI releasesSource CodeIssue TrackerVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/"},
{"text": "Project Layout \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTutorial\u00bbProject Layout\n\u00b6Create a project directory and enter it:mkdir flask-tutorial\ncd flask-tutorialThen follow theinstallation instructionsto set\nup a Python virtual environment and install Flask for your project.The tutorial will assume you\u2019re working from theflask-tutorialdirectory from now on. The file names at the top of each code block are\nrelative to this directory.A Flask application can be as simple as a single file.hello.py\n\u00b6fromflaskimportFlaskapp=Flask\n(\n__name__\n)@app.route\n(\n'/'\n)defhello\n():return'Hello, World!'However, as a project get bigger, it becomes overwhelming to keep all\nthe code in one file. Python projects usepackagesto organize code\ninto multiple modules that can be imported where needed, and the\ntutorial will do this as well.The project directory will contain:flaskr/\n, a Python package containing your application code and\nfiles.tests/\n, a directory containing test modules.venv/\n, a Python virtual environment where Flask and other\ndependencies are installed.Installation files telling Python how to install your project.Version control config, such asgit\n. You should make a habit of\nusing some type of version control for all your projects, no matter\nthe size.Any other project files you might add in the future.By the end, your project layout will look like this:/home/user/Projects/flask-tutorial\n\u251c\u2500\u2500 flaskr/\n\u2502\u251c\u2500\u2500 __init__.py\n\u2502\u251c\u2500\u2500 db.py\n\u2502\u251c\u2500\u2500 schema.sql\n\u2502\u251c\u2500\u2500 auth.py\n\u2502\u251c\u2500\u2500 blog.py\n\u2502\u251c\u2500\u2500 templates/\n\u2502\u2502\u251c\u2500\u2500 base.html\n\u2502\u2502\u251c\u2500\u2500 auth/\n\u2502\u2502\u2502\u251c\u2500\u2500 login.html\n\u2502\u2502\u2502\u2514\u2500\u2500 register.html\n\u2502\u2502\u2514\u2500\u2500 blog/\n\u2502\u2502\u251c\u2500\u2500 create.html\n\u2502\u2502\u251c\u2500\u2500 index.html\n\u2502\u2502\u2514\u2500\u2500 update.html\n\u2502\u2514\u2500\u2500 static/\n\u2502\u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 tests/\n\u2502\u251c\u2500\u2500 conftest.py\n\u2502\u251c\u2500\u2500 data.sql\n\u2502\u251c\u2500\u2500 test_factory.py\n\u2502\u251c\u2500\u2500 test_db.py\n\u2502\u251c\u2500\u2500 test_auth.py\n\u2502\u2514\u2500\u2500 test_blog.py\n\u251c\u2500\u2500 venv/\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 MANIFEST.inIf you\u2019re using version control, the following files that are generated\nwhile running your project should be ignored. There may be other files\nbased on the editor you use. In general, ignore files that you didn\u2019t\nwrite. For example, with git:.gitignore\n\u00b6venv/*.pyc\n__pycache__/instance/.pytest_cache/\n.coverage\nhtmlcov/dist/\nbuild/\n*.egg-info/Continue toApplication Setup\n.NavigationOverviewTutorialPrevious:TutorialNext:Application SetupVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/tutorial/layout/"},
{"text": "Installation \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbInstallation\n\u00b6Python Version\n\u00b6We recommend using the latest version of Python 3. Flask supports Python 3.4\nand newer, Python 2.7, and PyPy.Dependencies\n\u00b6These distributions will be installed automatically when installing Flask.Werkzeugimplements WSGI, the standard Python interface between\napplications and servers.Jinjais a template language that renders the pages your application\nserves.MarkupSafecomes with Jinja. It escapes untrusted input when rendering\ntemplates to avoid injection attacks.ItsDangeroussecurely signs data to ensure its integrity. This is used\nto protect Flask\u2019s session cookie.Clickis a framework for writing command line applications. It provides\ntheflaskcommand and allows adding custom management commands.Optional dependencies\n\u00b6These distributions will not be installed automatically. Flask will detect and\nuse them if you install them.Blinkerprovides support forSignals\n.SimpleJSONis a fast JSON implementation that is compatible with\nPython\u2019sjsonmodule. It is preferred for JSON operations if it is\ninstalled.python-dotenvenables support forEnvironment Variables From dotenvwhen runningflaskcommands.Watchdogprovides a faster, more efficient reloader for the development\nserver.Virtual environments\n\u00b6Use a virtual environment to manage the dependencies for your project, both in\ndevelopment and in production.What problem does a virtual environment solve? The more Python projects you\nhave, the more likely it is that you need to work with different versions of\nPython libraries, or even Python itself. Newer versions of libraries for one\nproject can break compatibility in another project.Virtual environments are independent groups of Python libraries, one for each\nproject. Packages installed for one project will not affect other projects or\nthe operating system\u2019s packages.Python 3 comes bundled with thevenvmodule to create virtual\nenvironments. If you\u2019re using a modern version of Python, you can continue on\nto the next section.If you\u2019re using Python 2, seeInstall virtualenvfirst.Create an environment\n\u00b6Create a project folder and avenvfolder within:mkdir myprojectcdmyproject\npython3 -m venv venvOn Windows:py -3 -m venv venvIf you needed to install virtualenv because you are on an older version of\nPython, use the following command instead:virtualenv venvOn Windows:\\Python27\\Scripts\\virtualenv.exe venvActivate the environment\n\u00b6Before you work on your project, activate the corresponding environment:. venv/bin/activateOn Windows:venv\\Scripts\\activateYour shell prompt will change to show the name of the activated environment.Install Flask\n\u00b6Within the activated environment, use the following command to install Flask:pip install FlaskFlask is now installed. Check out theQuickstartor go to theDocumentation Overview\n.Living on the edge\n\u00b6If you want to work with the latest Flask code before it\u2019s released, install or\nupdate the code from the master branch:pip install -U https://github.com/pallets/flask/archive/master.tar.gzInstall virtualenv\n\u00b6If you are using Python 2, the venv module is not available. Instead,\ninstallvirtualenv\n.On Linux, virtualenv is provided by your package manager:# Debian, Ubuntusudo apt-get install python-virtualenv# CentOS, Fedorasudo yum install python-virtualenv# Archsudo pacman -S python-virtualenvIf you are on Mac OS X or Windows, downloadget-pip.py\n, then:sudo python2 Downloads/get-pip.py\nsudo python2 -m pip install virtualenvOn Windows, as an administrator:\\Python27\\python.exe Downloads\\get-pip.py\n\\Python27\\python.exe -m pip install virtualenvNow you can return above andCreate an environment\n.ContentsInstallationPython VersionDependenciesOptional dependenciesVirtual environmentsCreate an environmentActivate the environmentInstall FlaskLiving on the edgeInstall virtualenvNavigationOverviewPrevious:Foreword for Experienced ProgrammersNext:QuickstartVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/installation/"},
{"text": "Templates \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTutorial\u00bbTemplates\n\u00b6You\u2019ve written the authentication views for your application, but if\nyou\u2019re running the server and try to go to any of the URLs, you\u2019ll see aTemplateNotFounderror. That\u2019s because the views are callingrender_template()\n, but you haven\u2019t written the templates yet.\nThe template files will be stored in thetemplatesdirectory inside\ntheflaskrpackage.Templates are files that contain static data as well as placeholders\nfor dynamic data. A template is rendered with specific data to produce a\nfinal document. Flask uses theJinjatemplate library to render\ntemplates.In your application, you will use templates to renderHTMLwhich\nwill display in the user\u2019s browser. In Flask, Jinja is configured toautoescapeany data that is rendered in HTML templates. This means\nthat it\u2019s safe to render user input; any characters they\u2019ve entered that\ncould mess with the HTML, such as<and>will beescapedwithsafevalues that look the same in the browser but don\u2019t cause unwanted\neffects.Jinja looks and behaves mostly like Python. Special delimiters are used\nto distinguish Jinja syntax from the static data in the template.\nAnything between{{and}}is an expression that will be output\nto the final document.{%and%}denotes a control flow\nstatement likeifandfor\n. Unlike Python, blocks are denoted\nby start and end tags rather than indentation since static text within\na block could change indentation.The Base Layout\n\u00b6Each page in the application will have the same basic layout around a\ndifferent body. Instead of writing the entire HTML structure in each\ntemplate, each template willextenda base template and override\nspecific sections.flaskr/templates/base.html\n\u00b6<!doctype html><\ntitle\n>\n{%blocktitle%}{%endblock%}- Flaskr\n</\ntitle\n><\nlinkrel\n=\n\"stylesheet\"href\n=\n\"\n{{url_for\n(\n'static'\n,filename\n=\n'style.css'\n)}}\n\"\n><\nnav\n><\nh1\n>\nFlaskr\n</\nh1\n><\nul\n>{%ifg.user%}<\nli\n><\nspan\n>\n{{g.user\n[\n'username'\n]}}\n</\nspan\n><\nli\n><\nahref\n=\n\"\n{{url_for\n(\n'auth.logout'\n)}}\n\"\n>\nLog Out\n</\na\n>{%else%}<\nli\n><\nahref\n=\n\"\n{{url_for\n(\n'auth.register'\n)}}\n\"\n>\nRegister\n</\na\n><\nli\n><\nahref\n=\n\"\n{{url_for\n(\n'auth.login'\n)}}\n\"\n>\nLog In\n</\na\n>{%endif%}</\nul\n></\nnav\n><\nsectionclass\n=\n\"content\"\n><\nheader\n>{%blockheader%}{%endblock%}</\nheader\n>{%formessageinget_flashed_messages\n()%}<\ndivclass\n=\n\"flash\"\n>\n{{message}}\n</\ndiv\n>{%endfor%}{%blockcontent%}{%endblock%}</\nsection\n>gis automatically available in templates. Based on ifg.useris set (fromload_logged_in_user\n), either the username\nand a log out link are displayed, otherwise links to register and log in\nare displayed.url_for()is also automatically available, and is\nused to generate URLs to views instead of writing them out manually.After the page title, and before the content, the template loops over\neach message returned byget_flashed_messages()\n. You usedflash()in the views to show error messages, and this is the code\nthat will display them.There are three blocks defined here that will be overridden in the other\ntemplates:{%blocktitle%}will change the title displayed in the\nbrowser\u2019s tab and window title.{%blockheader%}is similar totitlebut will change the\ntitle displayed on the page.{%blockcontent%}is where the content of each page goes, such\nas the login form or a blog post.The base template is directly in thetemplatesdirectory. To keep\nthe others organized, the templates for a blueprint will be placed in a\ndirectory with the same name as the blueprint.Register\n\u00b6flaskr/templates/auth/register.html\n\u00b6{%extends'base.html'%}{%blockheader%}<\nh1\n>\n{%blocktitle%}\nRegister\n{%endblock%}\n</\nh1\n>{%endblock%}{%blockcontent%}<\nformmethod\n=\n\"post\"\n><\nlabelfor\n=\n\"username\"\n>\nUsername\n</\nlabel\n><\ninputname\n=\n\"username\"id\n=\n\"username\"required\n><\nlabelfor\n=\n\"password\"\n>\nPassword\n</\nlabel\n><\ninputtype\n=\n\"password\"name\n=\n\"password\"id\n=\n\"password\"required\n><\ninputtype\n=\n\"submit\"value\n=\n\"Register\"\n></\nform\n>{%endblock%}{%extends'base.html'%}tells Jinja that this template should\nreplace the blocks from the base template. All the rendered content must\nappear inside{%block%}tags that override blocks from the base\ntemplate.A useful pattern used here is to place{%blocktitle%}inside{%blockheader%}\n. This will set the title block and then output\nthe value of it into the header block, so that both the window and page\nshare the same title without writing it twice.Theinputtags are using therequiredattribute here. This tells\nthe browser not to submit the form until those fields are filled in. If\nthe user is using an older browser that doesn\u2019t support that attribute,\nor if they are using something besides a browser to make requests, you\nstill want to validate the data in the Flask view. It\u2019s important to\nalways fully validate the data on the server, even if the client does\nsome validation as well.Log In\n\u00b6This is identical to the register template except for the title and\nsubmit button.flaskr/templates/auth/login.html\n\u00b6{%extends'base.html'%}{%blockheader%}<\nh1\n>\n{%blocktitle%}\nLog In\n{%endblock%}\n</\nh1\n>{%endblock%}{%blockcontent%}<\nformmethod\n=\n\"post\"\n><\nlabelfor\n=\n\"username\"\n>\nUsername\n</\nlabel\n><\ninputname\n=\n\"username\"id\n=\n\"username\"required\n><\nlabelfor\n=\n\"password\"\n>\nPassword\n</\nlabel\n><\ninputtype\n=\n\"password\"name\n=\n\"password\"id\n=\n\"password\"required\n><\ninputtype\n=\n\"submit\"value\n=\n\"Log In\"\n></\nform\n>{%endblock%}Register A User\n\u00b6Now that the authentication templates are written, you can register a\nuser. Make sure the server is still running (\nflaskrunif it\u2019s not),\nthen go tohttp://127.0.0.1:5000/auth/register\n.Try clicking the \u201cRegister\u201d button without filling out the form and see\nthat the browser shows an error message. Try removing therequiredattributes from theregister.htmltemplate and click \u201cRegister\u201d\nagain. Instead of the browser showing an error, the page will reload and\nthe error fromflash()in the view will be shown.Fill out a username and password and you\u2019ll be redirected to the login\npage. Try entering an incorrect username, or the correct username and\nincorrect password. If you log in you\u2019ll get an error because there\u2019s\nnoindexview to redirect to yet.Continue toStatic Files\n.ContentsTemplatesThe Base LayoutRegisterLog InRegister A UserNavigationOverviewTutorialPrevious:Blueprints and ViewsNext:Static FilesVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/tutorial/templates/"},
{"text": "Static Files \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTutorial\u00bbStatic Files\n\u00b6The authentication views and templates work, but they look very plain\nright now. SomeCSScan be added to add style to the HTML layout you\nconstructed. The style won\u2019t change, so it\u2019s astaticfile rather than\na template.Flask automatically adds astaticview that takes a path relative\nto theflaskr/staticdirectory and serves it. Thebase.htmltemplate already has a link to thestyle.cssfile:{{url_for\n(\n'static'\n,filename\n=\n'style.css'\n)}}Besides CSS, other types of static files might be files with JavaScript\nfunctions, or a logo image. They are all placed under theflaskr/staticdirectory and referenced withurl_for('static',filename='...')\n.This tutorial isn\u2019t focused on how to write CSS, so you can just copy\nthe following into theflaskr/static/style.cssfile:flaskr/static/style.css\n\u00b6html{font-family\n:sans-serif\n;background\n:#eee\n;padding\n:1\nrem\n;}body{max-width\n:960\npx\n;margin\n:0auto\n;background\n:white\n;}h1{font-family\n:serif\n;color\n:#377ba8\n;margin\n:1\nrem0\n;}a{color\n:#377ba8\n;}hr{border\n:none\n;border-top\n:1\npxsolidlightgray\n;}nav{background\n:lightgray\n;display\n:flex\n;align-items\n:center\n;padding\n:00.5\nrem\n;}navh1{flex\n:auto\n;margin\n:0\n;}navh1a{text-decoration\n:none\n;padding\n:0.25\nrem0.5\nrem\n;}navul{display\n:flex\n;list-style\n:none\n;margin\n:0\n;padding\n:0\n;}navullia\n,navullispan\n,header.\naction{display\n:block\n;padding\n:0.5\nrem\n;}.\ncontent{padding\n:01\nrem1\nrem\n;}.\ncontent>header{border-bottom\n:1\npxsolidlightgray\n;display\n:flex\n;align-items\n:flex-end\n;}.\ncontent>headerh1{flex\n:auto\n;margin\n:1\nrem00.25\nrem0\n;}.\nflash{margin\n:1\nem0\n;padding\n:1\nem\n;background\n:#cae6f6\n;border\n:1\npxsolid#377ba8\n;}.\npost>header{display\n:flex\n;align-items\n:flex-end\n;font-size\n:0.85\nem\n;}.\npost>header>div\n:\nfirst-of-type{flex\n:auto\n;}.\npost>headerh1{font-size\n:1.5\nem\n;margin-bottom\n:0\n;}.\npost.\nabout{color\n:slategray\n;font-style\n:italic\n;}.\npost.\nbody{white-space\n:pre-line\n;}.\ncontent\n:\nlast-child{margin-bottom\n:0\n;}.\ncontentform{margin\n:1\nem0\n;display\n:flex\n;flex-direction\n:column\n;}.\ncontentlabel{font-weight\n:bold\n;margin-bottom\n:0.5\nem\n;}.\ncontentinput\n,.\ncontenttextarea{margin-bottom\n:1\nem\n;}.\ncontenttextarea{min-height\n:12\nem\n;resize\n:vertical\n;}input\n.\ndanger{color\n:#cc2f2e\n;}input\n[\ntype\n=\nsubmit\n]{align-self\n:start\n;min-width\n:10\nem\n;}You can find a less compact version ofstyle.cssin theexample code\n.Go tohttp://127.0.0.1:5000/auth/loginand the page should look like the\nscreenshot below.You can read more about CSS fromMozilla\u2019s documentation\n. If\nyou change a static file, refresh the browser page. If the change\ndoesn\u2019t show up, try clearing your browser\u2019s cache.Continue toBlog Blueprint\n.NavigationOverviewTutorialPrevious:TemplatesNext:Blog BlueprintVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/tutorial/static/"},
{"text": "Blog Blueprint \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTutorial\u00bbBlog Blueprint\n\u00b6You\u2019ll use the same techniques you learned about when writing the\nauthentication blueprint to write the blog blueprint. The blog should\nlist all posts, allow logged in users to create posts, and allow the\nauthor of a post to edit or delete it.As you implement each view, keep the development server running. As you\nsave your changes, try going to the URL in your browser and testing them\nout.The Blueprint\n\u00b6Define the blueprint and register it in the application factory.flaskr/blog.py\n\u00b6fromflaskimport(Blueprint\n,flash\n,g\n,redirect\n,render_template\n,request\n,url_for)fromwerkzeug.exceptionsimportabortfromflaskr.authimportlogin_requiredfromflaskr.dbimportget_dbbp=Blueprint\n(\n'blog'\n,__name__\n)Import and register the blueprint from the factory usingapp.register_blueprint()\n. Place the\nnew code at the end of the factory function before returning the app.flaskr/__init__.py\n\u00b6defcreate_app\n():app=...# existing code omittedfrom.importblogapp\n.\nregister_blueprint\n(\nblog\n.\nbp\n)app\n.\nadd_url_rule\n(\n'/'\n,endpoint\n=\n'index'\n)returnappUnlike the auth blueprint, the blog blueprint does not have aurl_prefix\n. So theindexview will be at/\n, thecreateview at/create\n, and so on. The blog is the main feature of Flaskr,\nso it makes sense that the blog index will be the main index.However, the endpoint for theindexview defined below will beblog.index\n. Some of the authentication views referred to a plainindexendpoint.app.add_url_rule()associates the endpoint name'index'with the/url so thaturl_for('index')orurl_for('blog.index')will both work,\ngenerating the same/URL either way.In another application you might give the blog blueprint aurl_prefixand define a separateindexview in the application\nfactory, similar to thehelloview. Then theindexandblog.indexendpoints and URLs would be different.Index\n\u00b6The index will show all of the posts, most recent first. AJOINis\nused so that the author information from theusertable is\navailable in the result.flaskr/blog.py\n\u00b6@bp.route\n(\n'/'\n)defindex\n():db=get_db\n()posts=db\n.\nexecute\n('SELECT p.id, title, body, created, author_id, username'' FROM post p JOIN user u ON p.author_id = u.id'' ORDER BY created DESC')\n.\nfetchall\n()returnrender_template\n(\n'blog/index.html'\n,posts\n=\nposts\n)flaskr/templates/blog/index.html\n\u00b6{%extends'base.html'%}{%blockheader%}<\nh1\n>\n{%blocktitle%}\nPosts\n{%endblock%}\n</\nh1\n>{%ifg.user%}<\naclass\n=\n\"action\"href\n=\n\"\n{{url_for\n(\n'blog.create'\n)}}\n\"\n>\nNew\n</\na\n>{%endif%}{%endblock%}{%blockcontent%}{%forpostinposts%}<\narticleclass\n=\n\"post\"\n><\nheader\n><\ndiv\n><\nh1\n>\n{{post\n[\n'title'\n]}}\n</\nh1\n><\ndivclass\n=\n\"about\"\n>\nby{{post\n[\n'username'\n]}}on{{post\n[\n'created'\n]\n.strftime\n(\n'%Y-%m-%d'\n)}}\n</\ndiv\n></\ndiv\n>{%ifg.user\n[\n'id'\n]==post\n[\n'author_id'\n]%}<\naclass\n=\n\"action\"href\n=\n\"\n{{url_for\n(\n'blog.update'\n,id\n=\npost\n[\n'id'\n])}}\n\"\n>\nEdit\n</\na\n>{%endif%}</\nheader\n><\npclass\n=\n\"body\"\n>\n{{post\n[\n'body'\n]}}\n</\np\n></\narticle\n>{%ifnotloop\n.last%}<\nhr\n>{%endif%}{%endfor%}{%endblock%}When a user is logged in, theheaderblock adds a link to thecreateview. When the user is the author of a post, they\u2019ll see an\n\u201cEdit\u201d link to theupdateview for that post.loop.lastis a\nspecial variable available insideJinja for loops\n. It\u2019s used to\ndisplay a line after each post except the last one, to visually separate\nthem.Create\n\u00b6Thecreateview works the same as the authregisterview. Either\nthe form is displayed, or the posted data is validated and the post is\nadded to the database or an error is shown.Thelogin_requireddecorator you wrote earlier is used on the blog\nviews. A user must be logged in to visit these views, otherwise they\nwill be redirected to the login page.flaskr/blog.py\n\u00b6@bp.route\n(\n'/create'\n,methods\n=\n(\n'GET'\n,'POST'\n))@login_requireddefcreate\n():ifrequest\n.\nmethod=='POST'\n:title=request\n.\nform\n[\n'title'\n]body=request\n.\nform\n[\n'body'\n]error=Noneifnottitle\n:error='Title is required.'iferrorisnotNone\n:flash\n(\nerror\n)else\n:db=get_db\n()db\n.\nexecute\n('INSERT INTO post (title, body, author_id)'' VALUES (?, ?, ?)'\n,(\ntitle\n,body\n,g\n.\nuser\n[\n'id'\n]))db\n.\ncommit\n()returnredirect\n(\nurl_for\n(\n'blog.index'\n))returnrender_template\n(\n'blog/create.html'\n)flaskr/templates/blog/create.html\n\u00b6{%extends'base.html'%}{%blockheader%}<\nh1\n>\n{%blocktitle%}\nNew Post\n{%endblock%}\n</\nh1\n>{%endblock%}{%blockcontent%}<\nformmethod\n=\n\"post\"\n><\nlabelfor\n=\n\"title\"\n>\nTitle\n</\nlabel\n><\ninputname\n=\n\"title\"id\n=\n\"title\"value\n=\n\"\n{{request.form\n[\n'title'\n]}}\n\"required\n><\nlabelfor\n=\n\"body\"\n>\nBody\n</\nlabel\n><\ntextareaname\n=\n\"body\"id\n=\n\"body\"\n>\n{{request.form\n[\n'body'\n]}}\n</\ntextarea\n><\ninputtype\n=\n\"submit\"value\n=\n\"Save\"\n></\nform\n>{%endblock%}Update\n\u00b6Both theupdateanddeleteviews will need to fetch apostbyidand check if the author matches the logged in user. To avoid\nduplicating code, you can write a function to get thepostand call\nit from each view.flaskr/blog.py\n\u00b6defget_post\n(\nid\n,check_author\n=\nTrue\n):post=get_db\n()\n.\nexecute\n('SELECT p.id, title, body, created, author_id, username'' FROM post p JOIN user u ON p.author_id = u.id'' WHERE p.id = ?'\n,(\nid\n,))\n.\nfetchone\n()ifpostisNone\n:abort\n(\n404\n,\"Post id {0} doesn't exist.\"\n.\nformat\n(\nid\n))ifcheck_authorandpost\n[\n'author_id'\n]!=g\n.\nuser\n[\n'id'\n]:abort\n(\n403\n)returnpostabort()will raise a special exception that returns an HTTP status\ncode. It takes an optional message to show with the error, otherwise a\ndefault message is used.404means \u201cNot Found\u201d, and403means\n\u201cForbidden\u201d. (\n401means \u201cUnauthorized\u201d, but you redirect to the\nlogin page instead of returning that status.)Thecheck_authorargument is defined so that the function can be\nused to get apostwithout checking the author. This would be useful\nif you wrote a view to show an individual post on a page, where the user\ndoesn\u2019t matter because they\u2019re not modifying the post.flaskr/blog.py\n\u00b6@bp.route\n(\n'/<int:id>/update'\n,methods\n=\n(\n'GET'\n,'POST'\n))@login_requireddefupdate\n(\nid\n):post=get_post\n(\nid\n)ifrequest\n.\nmethod=='POST'\n:title=request\n.\nform\n[\n'title'\n]body=request\n.\nform\n[\n'body'\n]error=Noneifnottitle\n:error='Title is required.'iferrorisnotNone\n:flash\n(\nerror\n)else\n:db=get_db\n()db\n.\nexecute\n('UPDATE post SET title = ?, body = ?'' WHERE id = ?'\n,(\ntitle\n,body\n,id\n))db\n.\ncommit\n()returnredirect\n(\nurl_for\n(\n'blog.index'\n))returnrender_template\n(\n'blog/update.html'\n,post\n=\npost\n)Unlike the views you\u2019ve written so far, theupdatefunction takes\nan argument,id\n. That corresponds to the<int:id>in the route.\nA real URL will look like/1/update\n. Flask will capture the1\n,\nensure it\u2019s anint\n, and pass it as theidargument. If you\ndon\u2019t specifyint:and instead do<id>\n, it will be a string.\nTo generate a URL to the update page,url_for()needs to be passed\ntheidso it knows what to fill in:url_for('blog.update',id=post['id'])\n. This is also in theindex.htmlfile above.Thecreateandupdateviews look very similar. The main\ndifference is that theupdateview uses apostobject and anUPDATEquery instead of anINSERT\n. With some clever refactoring,\nyou could use one view and template for both actions, but for the\ntutorial it\u2019s clearer to keep them separate.flaskr/templates/blog/update.html\n\u00b6{%extends'base.html'%}{%blockheader%}<\nh1\n>\n{%blocktitle%}\nEdit \"\n{{post\n[\n'title'\n]}}\n\"\n{%endblock%}\n</\nh1\n>{%endblock%}{%blockcontent%}<\nformmethod\n=\n\"post\"\n><\nlabelfor\n=\n\"title\"\n>\nTitle\n</\nlabel\n><\ninputname\n=\n\"title\"id\n=\n\"title\"value\n=\n\"\n{{request.form\n[\n'title'\n]orpost\n[\n'title'\n]}}\n\"required\n><\nlabelfor\n=\n\"body\"\n>\nBody\n</\nlabel\n><\ntextareaname\n=\n\"body\"id\n=\n\"body\"\n>\n{{request.form\n[\n'body'\n]orpost\n[\n'body'\n]}}\n</\ntextarea\n><\ninputtype\n=\n\"submit\"value\n=\n\"Save\"\n></\nform\n><\nhr\n><\nformaction\n=\n\"\n{{url_for\n(\n'blog.delete'\n,id\n=\npost\n[\n'id'\n])}}\n\"method\n=\n\"post\"\n><\ninputclass\n=\n\"danger\"type\n=\n\"submit\"value\n=\n\"Delete\"onclick\n=\n\"return confirm('Are you sure?');\"\n></\nform\n>{%endblock%}This template has two forms. The first posts the edited data to the\ncurrent page (\n/<id>/update\n). The other form contains only a button\nand specifies anactionattribute that posts to the delete view\ninstead. The button uses some JavaScript to show a confirmation dialog\nbefore submitting.The pattern{{request.form['title']orpost['title']}}is used to\nchoose what data appears in the form. When the form hasn\u2019t been\nsubmitted, the originalpostdata appears, but if invalid form data\nwas posted you want to display that so the user can fix the error, sorequest.formis used instead.requestis another variable\nthat\u2019s automatically available in templates.Delete\n\u00b6The delete view doesn\u2019t have its own template, the delete button is part\nofupdate.htmland posts to the/<id>/deleteURL. Since there\nis no template, it will only handle thePOSTmethod then redirect\nto theindexview.flaskr/blog.py\n\u00b6@bp.route\n(\n'/<int:id>/delete'\n,methods\n=\n(\n'POST'\n,))@login_requireddefdelete\n(\nid\n):get_post\n(\nid\n)db=get_db\n()db\n.\nexecute\n(\n'DELETE FROM post WHERE id = ?'\n,(\nid\n,))db\n.\ncommit\n()returnredirect\n(\nurl_for\n(\n'blog.index'\n))Congratulations, you\u2019ve now finished writing your application! Take some\ntime to try out everything in the browser. However, there\u2019s still more\nto do before the project is complete.Continue toMake the Project Installable\n.ContentsBlog BlueprintThe BlueprintIndexCreateUpdateDeleteNavigationOverviewTutorialPrevious:Static FilesNext:Make the Project InstallableVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/tutorial/blog/"},
{"text": "Make the Project Installable \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTutorial\u00bbMake the Project Installable\n\u00b6Making your project installable means that you can build adistributionfile and install that in another environment, just like\nyou installed Flask in your project\u2019s environment. This makes deploying\nyour project the same as installing any other library, so you\u2019re using\nall the standard Python tools to manage everything.Installing also comes with other benefits that might not be obvious from\nthe tutorial or as a new Python user, including:Currently, Python and Flask understand how to use theflaskrpackage only because you\u2019re running from your project\u2019s directory.\nInstalling means you can import it no matter where you run from.You can manage your project\u2019s dependencies just like other packages\ndo, sopipinstallyourproject.whlinstalls them.Test tools can isolate your test environment from your development\nenvironment.NoteThis is being introduced late in the tutorial, but in your future\nprojects you should always start with this.Describe the Project\n\u00b6Thesetup.pyfile describes your project and the files that belong\nto it.setup.py\n\u00b6fromsetuptoolsimportfind_packages\n,setupsetup\n(name\n=\n'flaskr'\n,version\n=\n'1.0.0'\n,packages\n=\nfind_packages\n(),include_package_data\n=\nTrue\n,zip_safe\n=\nFalse\n,install_requires\n=\n['flask'\n,],)packagestells Python what package directories (and the Python files\nthey contain) to include.find_packages()finds these directories\nautomatically so you don\u2019t have to type them out. To include other\nfiles, such as the static and templates directories,include_package_datais set. Python needs another file namedMANIFEST.into tell what this other data is.MANIFEST.in\n\u00b6include flaskr/schema.sql\ngraft flaskr/static\ngraft flaskr/templates\nglobal-exclude *.pycThis tells Python to copy everything in thestaticandtemplatesdirectories, and theschema.sqlfile, but to exclude all bytecode\nfiles.See theofficial packaging guidefor another explanation of the files\nand options used.Install the Project\n\u00b6Usepipto install your project in the virtual environment.pip install -e .This tells pip to findsetup.pyin the current directory and install\nit ineditableordevelopmentmode. Editable mode means that as you\nmake changes to your local code, you\u2019ll only need to re-install if you\nchange the metadata about the project, such as its dependencies.You can observe that the project is now installed withpiplist\n.pip listPackageVersionLocation\n-------------- --------- ----------------------------------\nclick6.7\nFlask1.0\nflaskr1.0.0/home/user/Projects/flask-tutorial\nitsdangerous0.24\nJinja22.10\nMarkupSafe1.0\npip9.0.3\nsetuptools39.0.1\nWerkzeug0.14.1\nwheel0.30.0Nothing changes from how you\u2019ve been running your project so far.FLASK_APPis still set toflaskrandflaskrunstill runs\nthe application.Continue toTest Coverage\n.ContentsMake the Project InstallableDescribe the ProjectInstall the ProjectNavigationOverviewTutorialPrevious:Blog BlueprintNext:Test CoverageVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/tutorial/install/"},
{"text": "Patterns for Flask \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\n\u00b6Certain things are common enough that the chances are high you will find\nthem in most web applications.For example quite a lot of applications\nare using relational databases and user authentication.In that case,\nchances are they will open a database connection at the beginning of the\nrequest and get the information of the currently logged in user.At the\nend of the request, the database connection is closed again.There are more user contributed snippets and patterns in theFlask\nSnippet Archives\n.Larger ApplicationsSimple PackagesWorking with BlueprintsApplication FactoriesBasic FactoriesFactories & ExtensionsUsing ApplicationsFactory ImprovementsApplication DispatchingWorking with this DocumentCombining ApplicationsDispatch by SubdomainDispatch by PathImplementing API ExceptionsSimple Exception ClassRegistering an Error HandlerUsage in ViewsUsing URL ProcessorsInternationalized Application URLsInternationalized Blueprint URLsDeploying with SetuptoolsBasic Setup ScriptTagging BuildsDistributing ResourcesDeclaring DependenciesInstalling / DevelopingDeploying with FabricCreating the first FabfileRunning FabfilesThe WSGI FileThe Configuration FileFirst DeploymentNext StepsUsing SQLite 3 with FlaskConnect on DemandEasy QueryingInitial SchemasSQLAlchemy in FlaskFlask-SQLAlchemy ExtensionDeclarativeManual Object Relational MappingSQL Abstraction LayerUploading FilesA Gentle IntroductionImproving UploadsUpload Progress BarsAn Easier SolutionCachingSetting up a CacheUsing a CacheView DecoratorsLogin Required DecoratorCaching DecoratorTemplating DecoratorEndpoint DecoratorForm Validation with WTFormsThe FormsIn the ViewForms in TemplatesTemplate InheritanceBase TemplateChild TemplateMessage FlashingSimple FlashingFlashing With CategoriesFiltering Flash MessagesAJAX with jQueryLoading jQueryWhere is My Site?JSON View FunctionsThe HTMLCustom Error PagesCommon Error CodesError HandlersLazily Loading ViewsConverting to Centralized URL MapLoading LateMongoKit in FlaskDeclarativePyMongo Compatibility LayerAdding a faviconSee alsoStreaming ContentsBasic UsageStreaming from TemplatesStreaming with ContextDeferred Request CallbacksAdding HTTP Method OverridesRequest Content ChecksumsCelery Background TasksInstallConfigureAn example taskRun a workerSubclassing FlaskNavigationOverviewPrevious:Working with the ShellNext:Larger ApplicationsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/"},
{"text": "Index \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|Flask 1.0.2 documentation\u00bbIndex_|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|Y__app_ctx_stack (in module flask)_AppCtxGlobals (class in flask.ctx)_request_ctx_stack (in module flask)Aabort() (in module flask)accept_charsets (flask.Request attribute)accept_encodings (flask.Request attribute)accept_languages (flask.Request attribute)accept_mimetypes (flask.Request attribute)access_route (flask.Request attribute)accessed (flask.sessions.SecureCookieSession attribute)(flask.sessions.SessionMixin attribute)add_app_template_filter() (flask.Blueprint method)add_app_template_global() (flask.Blueprint method)add_app_template_test() (flask.Blueprint method)add_template_filter() (flask.Flask method)add_template_global() (flask.Flask method)add_template_test() (flask.Flask method)add_url_rule() (flask.Blueprint method)(flask.Flask method)(flask.blueprints.BlueprintSetupState method)after_app_request() (flask.Blueprint method)after_request() (flask.Blueprint method)(flask.Flask method)after_request_funcs (flask.Flask attribute)after_this_request() (in module flask)app (flask.blueprints.BlueprintSetupState attribute)app_context() (flask.Flask method)app_context_processor() (flask.Blueprint method)app_ctx_globals_class (flask.Flask attribute)app_errorhandler() (flask.Blueprint method)app_import_path (flask.cli.ScriptInfo attribute)app_template_filter() (flask.Blueprint method)app_template_global() (flask.Blueprint method)app_template_test() (flask.Blueprint method)app_url_defaults() (flask.Blueprint method)app_url_value_preprocessor() (flask.Blueprint method)AppContext (class in flask.ctx)appcontext_popped (in module flask)appcontext_pushed (in module flask)appcontext_tearing_down (in module flask)AppGroup (class in flask.cli)application() (flask.Request class method)APPLICATION_ROOT (built-in variable)args (flask.Request attribute)as_view() (flask.views.View class method)authorization (flask.Request attribute)auto_find_instance_path() (flask.Flask method)Bbase_url (flask.Request attribute)\n,[1]before_app_first_request() (flask.Blueprint method)before_app_request() (flask.Blueprint method)before_first_request() (flask.Flask method)before_first_request_funcs (flask.Flask attribute)before_request() (flask.Blueprint method)(flask.Flask method)before_request_funcs (flask.Flask attribute)Blueprint (class in flask)blueprint (flask.blueprints.BlueprintSetupState attribute)(flask.Request attribute)blueprints (flask.Flask attribute)BlueprintSetupState (class in flask.blueprints)Ccache_control (flask.Request attribute)check() (flask.json.tag.JSONTag method)cli (flask.Flask attribute)close() (flask.Request method)command() (flask.cli.AppGroup method)Config (class in flask)config (flask.Flask attribute)config_class (flask.Flask attribute)content_encoding (flask.Request attribute)content_length (flask.Request attribute)content_md5 (flask.Request attribute)content_type (flask.Request attribute)context_processor() (flask.Blueprint method)(flask.Flask method)cookies (flask.Request attribute)copy() (flask.ctx.RequestContext method)copy_current_request_context() (in module flask)create_app (flask.cli.ScriptInfo attribute)create_global_jinja_loader() (flask.Flask method)create_jinja_environment() (flask.Flask method)create_url_adapter() (flask.Flask method)current_app (in module flask)Ddata (flask.cli.ScriptInfo attribute)(flask.Request attribute)(flask.Response attribute)date (flask.Request attribute)DEBUG (built-in variable)debug (flask.Flask attribute)decorators (flask.views.View attribute)default() (flask.json.JSONEncoder method)default_config (flask.Flask attribute)default_tags (flask.json.tag.TaggedJSONSerializer attribute)dict_storage_class (flask.Request attribute)digest_method() (flask.sessions.SecureCookieSessionInterface static method)dispatch_request() (flask.Flask method)(flask.views.MethodView method)(flask.views.View method)do_teardown_appcontext() (flask.Flask method)do_teardown_request() (flask.Flask method)dump() (in module flask.json)dumps() (flask.json.tag.TaggedJSONSerializer method)(in module flask.json)Eendpoint (flask.Request attribute)endpoint() (flask.Blueprint method)(flask.Flask method)ENV (built-in variable)env (flask.Flask attribute)environ (flask.Request attribute)environment variableFLASK_DEBUG\n,[1]\n,[2]FLASK_ENV\n,[1]\n,[2]\n,[3]\n,[4]\n,[5]\n,[6]\n,[7]\n,[8]\n,[9]\n,[10]YOURAPPLICATION_SETTINGSerror_handler_spec (flask.Flask attribute)errorhandler() (flask.Blueprint method)(flask.Flask method)escape() (flask.Markup class method)(in module flask)EXPLAIN_TEMPLATE_LOADING (built-in variable)extensions (flask.Flask attribute)Ffiles (flask.Request attribute)first_registration (flask.blueprints.BlueprintSetupState attribute)flash() (in module flask)Flask (class in flask)flask (module)flask.json (module)flask.json.tag (module)FLASK_DEBUG\n,[1]\n,[2]FLASK_ENV\n,[1]\n,[2]\n,[3]\n,[4]\n,[5]\n,[6]\n,[7]\n,[8]\n,[9]\n,[10]FlaskClient (class in flask.testing)FlaskCliRunner (class in flask.testing)FlaskGroup (class in flask.cli)form (flask.Request attribute)form_data_parser_class (flask.Request attribute)from_envvar() (flask.Config method)from_json() (flask.Config method)from_mapping() (flask.Config method)from_object() (flask.Config method)from_pyfile() (flask.Config method)from_values() (flask.Request class method)full_dispatch_request() (flask.Flask method)full_path (flask.Request attribute)\n,[1]Gg (in module flask)get() (flask.ctx._AppCtxGlobals method)(flask.sessions.SecureCookieSession method)get_command() (flask.cli.FlaskGroup method)get_cookie_domain() (flask.sessions.SessionInterface method)get_cookie_httponly() (flask.sessions.SessionInterface method)get_cookie_path() (flask.sessions.SessionInterface method)get_cookie_samesite() (flask.sessions.SessionInterface method)get_cookie_secure() (flask.sessions.SessionInterface method)get_data() (flask.Request method)get_expiration_time() (flask.sessions.SessionInterface method)get_flashed_messages() (in module flask)get_json() (flask.Request method)(flask.Response method)get_namespace() (flask.Config method)get_send_file_max_age() (flask.Blueprint method)(flask.Flask method)get_template_attribute() (in module flask)got_first_request (flask.Flask attribute)got_request_exception (in module flask)group() (flask.cli.AppGroup method)Hhandle_exception() (flask.Flask method)handle_http_exception() (flask.Flask method)handle_url_build_error() (flask.Flask method)handle_user_exception() (flask.Flask method)has_app_context() (in module flask)has_request_context() (in module flask)has_static_folder (flask.Blueprint attribute)(flask.Flask attribute)headers (flask.Request attribute)(flask.Response attribute)host (flask.Request attribute)host_url (flask.Request attribute)Iif_match (flask.Request attribute)if_modified_since (flask.Request attribute)if_none_match (flask.Request attribute)if_range (flask.Request attribute)if_unmodified_since (flask.Request attribute)import_name (flask.Blueprint attribute)(flask.Flask attribute)inject_url_defaults() (flask.Flask method)instance_path (flask.Flask attribute)invoke() (flask.testing.FlaskCliRunner method)is_json (flask.Request attribute)(flask.Response attribute)is_multiprocess (flask.Request attribute)is_multithread (flask.Request attribute)is_null_session() (flask.sessions.SessionInterface method)is_run_once (flask.Request attribute)is_secure (flask.Request attribute)is_xhr (flask.Request attribute)iter_blueprints() (flask.Flask method)Jjinja_env (flask.Flask attribute)jinja_environment (flask.Flask attribute)jinja_loader (flask.Blueprint attribute)(flask.Flask attribute)jinja_options (flask.Flask attribute)json (flask.Request attribute)JSON_AS_ASCII (built-in variable)json_decoder (flask.Blueprint attribute)(flask.Flask attribute)json_encoder (flask.Blueprint attribute)(flask.Flask attribute)JSON_SORT_KEYS (built-in variable)JSONDecoder (class in flask.json)JSONEncoder (class in flask.json)jsonify() (in module flask.json)JSONIFY_MIMETYPE (built-in variable)JSONIFY_PRETTYPRINT_REGULAR (built-in variable)JSONTag (class in flask.json.tag)Kkey (flask.json.tag.JSONTag attribute)key_derivation (flask.sessions.SecureCookieSessionInterface attribute)Llist_commands() (flask.cli.FlaskGroup method)list_storage_class (flask.Request attribute)load() (in module flask.json)load_app() (flask.cli.ScriptInfo method)load_dotenv() (in module flask.cli)loads() (flask.json.tag.TaggedJSONSerializer method)(in module flask.json)log_exception() (flask.Flask method)logger (flask.Flask attribute)Mmain() (flask.cli.FlaskGroup method)make_config() (flask.Flask method)make_default_options_response() (flask.Flask method)make_form_data_parser() (flask.Request method)make_null_session() (flask.Flask method)(flask.sessions.SessionInterface method)make_response() (flask.Flask method)(in module flask)make_setup_state() (flask.Blueprint method)make_shell_context() (flask.Flask method)Markup (class in flask)match_request() (flask.ctx.RequestContext method)MAX_CONTENT_LENGTH (built-in variable)max_content_length (flask.Request attribute)MAX_COOKIE_SIZE (built-in variable)max_cookie_size (flask.Response attribute)max_forwards (flask.Request attribute)message_flashed (in module flask)method (flask.Request attribute)methods (flask.views.View attribute)MethodView (class in flask.views)mimetype (flask.Request attribute)(flask.Response attribute)mimetype_params (flask.Request attribute)modified (flask.session attribute)(flask.sessions.SecureCookieSession attribute)(flask.sessions.SessionMixin attribute)Nname (flask.Flask attribute)new (flask.session attribute)null_session_class (flask.sessions.SessionInterface attribute)NullSession (class in flask.sessions)Oon_json_loading_failed() (flask.Request method)open() (flask.testing.FlaskClient method)open_instance_resource() (flask.Flask method)open_resource() (flask.Blueprint method)(flask.Flask method)open_session() (flask.Flask method)(flask.sessions.SecureCookieSessionInterface method)(flask.sessions.SessionInterface method)options (flask.blueprints.BlueprintSetupState attribute)Pparameter_storage_class (flask.Request attribute)pass_script_info() (in module flask.cli)path (flask.Request attribute)\n,[1]permanent (flask.session attribute)(flask.sessions.SessionMixin attribute)PERMANENT_SESSION_LIFETIME (built-in variable)permanent_session_lifetime (flask.Flask attribute)pickle_based (flask.sessions.SessionInterface attribute)pop() (flask.ctx._AppCtxGlobals method)(flask.ctx.AppContext method)(flask.ctx.RequestContext method)pragma (flask.Request attribute)PREFERRED_URL_SCHEME (built-in variable)preprocess_request() (flask.Flask method)PRESERVE_CONTEXT_ON_EXCEPTION (built-in variable)preserve_context_on_exception (flask.Flask attribute)process_response() (flask.Flask method)PROPAGATE_EXCEPTIONS (built-in variable)propagate_exceptions (flask.Flask attribute)provide_automatic_options (flask.views.View attribute)push() (flask.ctx.AppContext method)(flask.ctx.RequestContext method)Python Enhancement ProposalsPEP 8Qquery_string (flask.Request attribute)Rrange (flask.Request attribute)record() (flask.Blueprint method)record_once() (flask.Blueprint method)redirect() (in module flask)referrer (flask.Request attribute)register() (flask.Blueprint method)(flask.json.tag.TaggedJSONSerializer method)register_blueprint() (flask.Flask method)register_error_handler() (flask.Blueprint method)(flask.Flask method)remote_addr (flask.Request attribute)remote_user (flask.Request attribute)render_template() (in module flask)render_template_string() (in module flask)Request (class in flask)request (in module flask)request_class (flask.Flask attribute)request_context() (flask.Flask method)request_finished (in module flask)request_started (in module flask)request_tearing_down (in module flask)RequestContext (class in flask.ctx)Response (class in flask)response_class (flask.Flask attribute)RFCRFC 822RFC 8259\n,[1]root_path (flask.Blueprint attribute)(flask.Flask attribute)route() (flask.Blueprint method)(flask.Flask method)routing_exception (flask.Request attribute)run() (flask.Flask method)run_command (in module flask.cli)Ssafe_join() (in module flask)salt (flask.sessions.SecureCookieSessionInterface attribute)save_session() (flask.Flask method)(flask.sessions.SecureCookieSessionInterface method)(flask.sessions.SessionInterface method)scheme (flask.Request attribute)script_root (flask.Request attribute)\n,[1]ScriptInfo (class in flask.cli)SECRET_KEY (built-in variable)secret_key (flask.Flask attribute)SecureCookieSession (class in flask.sessions)SecureCookieSessionInterface (class in flask.sessions)select_jinja_autoescape() (flask.Flask method)send_file() (in module flask)SEND_FILE_MAX_AGE_DEFAULT (built-in variable)send_file_max_age_default (flask.Flask attribute)send_from_directory() (in module flask)send_static_file() (flask.Blueprint method)(flask.Flask method)serializer (flask.sessions.SecureCookieSessionInterface attribute)SERVER_NAME (built-in variable)session (class in flask)session_class (flask.sessions.SecureCookieSessionInterface attribute)SESSION_COOKIE_DOMAIN (built-in variable)SESSION_COOKIE_HTTPONLY (built-in variable)SESSION_COOKIE_NAME (built-in variable)session_cookie_name (flask.Flask attribute)SESSION_COOKIE_PATH (built-in variable)SESSION_COOKIE_SAMESITE (built-in variable)SESSION_COOKIE_SECURE (built-in variable)session_interface (flask.Flask attribute)SESSION_REFRESH_EACH_REQUEST (built-in variable)session_transaction() (flask.testing.FlaskClient method)SessionInterface (class in flask.sessions)SessionMixin (class in flask.sessions)set_cookie() (flask.Response method)setdefault() (flask.ctx._AppCtxGlobals method)(flask.sessions.SecureCookieSession method)shell_command (in module flask.cli)shell_context_processor() (flask.Flask method)shell_context_processors (flask.Flask attribute)should_ignore_error() (flask.Flask method)should_set_cookie() (flask.sessions.SessionInterface method)signal() (flask.signals.Namespace method)signals.Namespace (class in flask)signals.signals_available (in module flask)static_folder (flask.Blueprint attribute)(flask.Flask attribute)static_url_path (flask.Blueprint attribute)(flask.Flask attribute)status (flask.Response attribute)status_code (flask.Response attribute)stream (flask.Request attribute)stream_with_context() (in module flask)striptags() (flask.Markup method)subdomain (flask.blueprints.BlueprintSetupState attribute)Ttag() (flask.json.tag.JSONTag method)(flask.json.tag.TaggedJSONSerializer method)TaggedJSONSerializer (class in flask.json.tag)teardown_app_request() (flask.Blueprint method)teardown_appcontext() (flask.Flask method)teardown_appcontext_funcs (flask.Flask attribute)teardown_request() (flask.Blueprint method)(flask.Flask method)teardown_request_funcs (flask.Flask attribute)template_context_processors (flask.Flask attribute)template_filter() (flask.Flask method)template_folder (flask.Blueprint attribute)(flask.Flask attribute)template_global() (flask.Flask method)template_rendered (in module flask)template_test() (flask.Flask method)TEMPLATES_AUTO_RELOAD (built-in variable)templates_auto_reload (flask.Flask attribute)test_cli_runner() (flask.Flask method)test_cli_runner_class (flask.Flask attribute)test_client() (flask.Flask method)test_client_class (flask.Flask attribute)test_request_context() (flask.Flask method)TESTING (built-in variable)testing (flask.Flask attribute)to_json() (flask.json.tag.JSONTag method)to_python() (flask.json.tag.JSONTag method)TRAP_BAD_REQUEST_ERRORS (built-in variable)trap_http_exception() (flask.Flask method)TRAP_HTTP_EXCEPTIONS (built-in variable)Uunescape() (flask.Markup method)untag() (flask.json.tag.TaggedJSONSerializer method)update_template_context() (flask.Flask method)url (flask.Request attribute)\n,[1]url_build_error_handlers (flask.Flask attribute)url_charset (flask.Request attribute)url_default_functions (flask.Flask attribute)url_defaults (flask.blueprints.BlueprintSetupState attribute)url_defaults() (flask.Blueprint method)(flask.Flask method)url_for() (in module flask)url_map (flask.Flask attribute)url_prefix (flask.blueprints.BlueprintSetupState attribute)url_root (flask.Request attribute)\n,[1]url_rule (flask.Request attribute)url_rule_class (flask.Flask attribute)url_value_preprocessor() (flask.Blueprint method)(flask.Flask method)url_value_preprocessors (flask.Flask attribute)USE_X_SENDFILE (built-in variable)use_x_sendfile (flask.Flask attribute)user_agent (flask.Request attribute)Vvalues (flask.Request attribute)View (class in flask.views)view_args (flask.Request attribute)view_functions (flask.Flask attribute)Wwant_form_data_parsed (flask.Request attribute)with_appcontext() (in module flask.cli)wsgi_app() (flask.Flask method)YYOURAPPLICATION_SETTINGSNavigationOverviewVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/genindex/"},
{"text": "License \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbLicense\n\u00b6Flask is licensed under a three clause BSD License.It basically means:\ndo whatever you want with it as long as the copyright in Flask sticks\naround, the conditions are not modified and the disclaimer is present.\nFurthermore you must not use the names of the authors to promote derivatives\nof the software without written consent.The full license text can be found below (\nFlask License\n).For the\ndocumentation and artwork different licenses apply.Authors\n\u00b6Flask is developed and maintained by the Pallets team and community\ncontributors. It was created by Armin Ronacher. The core maintainers\nare:David Lord (davidism)Adrian M\u00f6nnich (ThiefMaster)Armin Ronacher (mitsuhiko)Marcus Unterwaditzer (untitaker)A full list of contributors is available from git with:gitshortlog-\nsneGeneral License Definitions\n\u00b6The following section contains the full license texts for Flask and the\ndocumentation.\u201cAUTHORS\u201d hereby refers to all the authors listed in theAuthorssection.The \u201c\nFlask License\n\u201d applies to all the source code shipped as\npart of Flask (Flask itself as well as the examples and the unittests)\nas well as documentation.The \u201c\nFlask Artwork License\n\u201d applies to the project\u2019s Horn-Logo.Flask License\n\u00b6Copyright \u00a9 2010 by the Pallets team.Some rights reserved.Redistribution and use in source and binary forms of the software as\nwell as documentation, with or without modification, are permitted\nprovided that the following conditions are met:Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.Neither the name of the copyright holder nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.THIS SOFTWARE AND DOCUMENTATION IS PROVIDED BY THE COPYRIGHT HOLDERS AND\nCONTRIBUTORS \u201cAS IS\u201d AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,\nBUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\nUSE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE AND DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.Flask Artwork License\n\u00b6Copyright (c) 2010 by Armin Ronacher.Some rights reserved.This logo or a modified version may be used by anyone to refer to the\nFlask project, but does not indicate endorsement by the project.Redistribution and use in source (the SVG file) and binary forms (rendered\nPNG files etc.) of the image, with or without modification, are permitted\nprovided that the following conditions are met:Redistributions of source code must retain the above copyright\nnotice and this list of conditions.The names of the contributors to the Flask software (see AUTHORS) may\nnot be used to endorse or promote products derived from this software\nwithout specific prior written permission.Note: we would appreciate that you make the image a link tohttp://flask.pocoo.org/if you use it on a web page.ContentsLicenseAuthorsGeneral License DefinitionsFlask LicenseFlask Artwork LicenseNavigationOverviewPrevious:Flask ChangelogNext:How to contribute to FlaskVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/license/"},
{"text": "Upgrading to Newer Releases \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbUpgrading to Newer Releases\n\u00b6Flask itself is changing like any software is changing over time.Most of\nthe changes are the nice kind, the kind where you don\u2019t have to change\nanything in your code to profit from a new release.However every once in a while there are changes that do require some\nchanges in your code or there are changes that make it possible for you to\nimprove your own code quality by taking advantage of new features in\nFlask.This section of the documentation enumerates all the changes in Flask from\nrelease to release and how you can change your code to have a painless\nupdating experience.Use thepipcommand to upgrade your existing Flask installation by\nproviding the--upgradeparameter:$ pip install --upgrade FlaskVersion 0.12\n\u00b6Changes to send_file\n\u00b6Thefilenameis no longer automatically inferred from file-like objects.\nThis means that the following code will no longer automatically haveX-Sendfilesupport, etag generation or MIME-type guessing:response=send_file\n(\nopen\n(\n'/path/to/file.txt'\n))Any of the following is functionally equivalent:fname='/path/to/file.txt'# Just pass the filepath directlyresponse=send_file\n(\nfname\n)# Set the MIME-type and ETag explicitlyresponse=send_file\n(\nopen\n(\nfname\n),mimetype\n=\n'text/plain'\n)response\n.\nset_etag\n(\n...\n)# Set `attachment_filename` for MIME-type guessing# ETag still needs to be manually setresponse=send_file\n(\nopen\n(\nfname\n),attachment_filename\n=\nfname\n)response\n.\nset_etag\n(\n...\n)The reason for this is that some file-like objects have an invalid or even\nmisleadingnameattribute. Silently swallowing errors in such cases was not\na satisfying solution.Additionally the default of falling back toapplication/octet-streamhas\nbeen restricted. If Flask can\u2019t guess one or the user didn\u2019t provide one, the\nfunction fails if no filename information was provided.Version 0.11\n\u00b60.11 is an odd release in the Flask release cycle because it was supposed\nto be the 1.0 release.However because there was such a long lead time up\nto the release we decided to push out a 0.11 release first with some\nchanges removed to make the transition easier.If you have been tracking\nthe master branch which was 1.0 you might see some unexpected changes.In case you did track the master branch you will notice thatflask --appis removed now.You need to use the environment variable to specify an\napplication.Debugging\n\u00b6Flask 0.11 removed thedebug_log_formatattribute from Flask\napplications.Instead the newLOGGER_HANDLER_POLICYconfiguration can\nbe used to disable the default log handlers and custom log handlers can be\nset up.Error handling\n\u00b6The behavior of error handlers was changed.\nThe precedence of handlers used to be based on the decoration/call order oferrorhandler()andregister_error_handler()\n, respectively.\nNow the inheritance hierarchy takes precedence and handlers for more\nspecific exception classes are executed instead of more general ones.\nSeeError handlersfor specifics.Trying to register a handler on an instance now raisesValueError\n.NoteThere used to be a logic error allowing you to register handlers\nonly for exceptioninstances\n. This was unintended and plain wrong,\nand therefore was replaced with the intended behavior of registering\nhandlers only using exception classes and HTTP error codes.Templating\n\u00b6Therender_template_string()function has changed to\nautoescape template variables by default. This better matches the behavior\nofrender_template()\n.Extension imports\n\u00b6Extension imports of the formflask.ext.fooare deprecated, you should useflask_foo\n.The old form still works, but Flask will issue aflask.exthook.ExtDeprecationWarningfor each extension you import the old\nway. We also provide a migration utility calledflask-ext-migratethat is supposed to\nautomatically rewrite your imports for this.Version 0.10\n\u00b6The biggest change going from 0.9 to 0.10 is that the cookie serialization\nformat changed from pickle to a specialized JSON format.This change has\nbeen done in order to avoid the damage an attacker can do if the secret\nkey is leaked.When you upgrade you will notice two major changes: all\nsessions that were issued before the upgrade are invalidated and you can\nonly store a limited amount of types in the session.The new sessions are\nby design much more restricted to only allow JSON with a few small\nextensions for tuples and strings with HTML markup.In order to not break people\u2019s sessions it is possible to continue using\nthe old session system by using theFlask-OldSessionsextension.Flask also started storing theflask.gobject on the application\ncontext instead of the request context.This change should be transparent\nfor you but it means that you now can store things on thegobject\nwhen there is no request context yet but an application context.The oldflask.Flask.request_globals_classattribute was renamed toflask.Flask.app_ctx_globals_class\n.Version 0.9\n\u00b6The behavior of returning tuples from a function was simplified.If you\nreturn a tuple it no longer defines the arguments for the response object\nyou\u2019re creating, it\u2019s now always a tuple in the form(response,status,headers)where at least one item has to be provided.If you depend on\nthe old behavior, you can add it easily by subclassing Flask:classTraditionalFlask\n(\nFlask\n):defmake_response\n(\nself\n,rv\n):ifisinstance\n(\nrv\n,tuple\n):returnself\n.\nresponse_class\n(\n*\nrv\n)returnFlask\n.\nmake_response\n(\nself\n,rv\n)If you maintain an extension that was using_request_ctx_stackbefore, please consider changing to_app_ctx_stackif it makes\nsense for your extension.For instance, the app context stack makes sense for\nextensions which connect to databases.Using the app context stack instead of\nthe request context stack will make extensions more readily handle use cases\noutside of requests.Version 0.8\n\u00b6Flask introduced a new session interface system.We also noticed that\nthere was a naming collision betweenflask.sessionthe module that\nimplements sessions andflask.sessionwhich is the global session\nobject.With that introduction we moved the implementation details for\nthe session system into a new module calledflask.sessions\n.If you\nused the previously undocumented session support we urge you to upgrade.If invalid JSON data was submitted Flask will now raise aBadRequestexception instead of letting the\ndefaultValueErrorbubble up.This has the advantage that you no\nlonger have to handle that error to avoid an internal server error showing\nup for the user.If you were catching this down explicitly in the past\nasValueErroryou will need to change this.Due to a bug in the test client Flask 0.7 did not trigger teardown\nhandlers when the test client was used in a with statement.This was\nsince fixed but might require some changes in your test suites if you\nrelied on this behavior.Version 0.7\n\u00b6In Flask 0.7 we cleaned up the code base internally a lot and did some\nbackwards incompatible changes that make it easier to implement larger\napplications with Flask.Because we want to make upgrading as easy as\npossible we tried to counter the problems arising from these changes by\nproviding a script that can ease the transition.The script scans your whole application and generates a unified diff with\nchanges it assumes are safe to apply.However as this is an automated\ntool it won\u2019t be able to find all use cases and it might miss some.We\ninternally spread a lot of deprecation warnings all over the place to make\nit easy to find pieces of code that it was unable to upgrade.We strongly recommend that you hand review the generated patchfile and\nonly apply the chunks that look good.If you are using git as version control system for your project we\nrecommend applying the patch withpath-p1<patchfile.diffand then\nusing the interactive commit feature to only apply the chunks that look\ngood.To apply the upgrade script do the following:Download the script:flask-07-upgrade.pyRun it in the directory of your application:pythonflask\n-\n07\n-\nupgrade\n.\npy>patchfile\n.\ndiffReview the generated patchfile.Apply the patch:patch-\np1<patchfile\n.\ndiffIf you were using per-module template folders you need to move some\ntemplates around.Previously if you had a folder namedtemplatesnext to a blueprint namedadminthe implicit template path\nautomatically wasadmin/index.htmlfor a template file calledtemplates/index.html\n.This no longer is the case.Now you need\nto name the templatetemplates/admin/index.html\n.The tool will\nnot detect this so you will have to do that on your own.Please note that deprecation warnings are disabled by default starting\nwith Python 2.7.In order to see the deprecation warnings that might be\nemitted you have to enabled them with thewarningsmodule.If you are working with windows and you lack thepatchcommand line\nutility you can get it as part of various Unix runtime environments for\nwindows including cygwin, msysgit or ming32.Also source control systems\nlike svn, hg or git have builtin support for applying unified diffs as\ngenerated by the tool.Check the manual of your version control system\nfor more information.Bug in Request Locals\n\u00b6Due to a bug in earlier implementations the request local proxies now\nraise aRuntimeErrorinstead of anAttributeErrorwhen they\nare unbound.If you caught these exceptions withAttributeErrorbefore, you should catch them withRuntimeErrornow.Additionally thesend_file()function is now issuing\ndeprecation warnings if you depend on functionality that will be removed\nin Flask 0.11.Previously it was possible to use etags and mimetypes\nwhen file objects were passed.This was unreliable and caused issues\nfor a few setups.If you get a deprecation warning, make sure to\nupdate your application to work with either filenames there or disable\netag attaching and attach them yourself.Old code:returnsend_file\n(\nmy_file_object\n)returnsend_file\n(\nmy_file_object\n)New code:returnsend_file\n(\nmy_file_object\n,add_etags\n=\nFalse\n)Upgrading to new Teardown Handling\n\u00b6We streamlined the behavior of the callbacks for request handling.For\nthings that modify the response theafter_request()decorators continue to work as expected, but for things that absolutely\nmust happen at the end of request we introduced the newteardown_request()decorator.Unfortunately that\nchange also made after-request work differently under error conditions.\nIt\u2019s not consistently skipped if exceptions happen whereas previously it\nmight have been called twice to ensure it is executed at the end of the\nrequest.If you have database connection code that looks like this:@app\n.\nafter_requestdefafter_request\n(\nresponse\n):g\n.\ndb\n.\nclose\n()returnresponseYou are now encouraged to use this instead:@app\n.\nteardown_requestdefafter_request\n(\nexception\n):ifhasattr\n(\ng\n,'db'\n):g\n.\ndb\n.\nclose\n()On the upside this change greatly improves the internal code flow and\nmakes it easier to customize the dispatching and error handling.This\nmakes it now a lot easier to write unit tests as you can prevent closing\ndown of database connections for a while.You can take advantage of the\nfact that the teardown callbacks are called when the response context is\nremoved from the stack so a test can query the database after request\nhandling:withapp\n.\ntest_client\n()asclient\n:resp=client\n.\nget\n(\n'/'\n)# g.db is still bound if there is such a thing# and here it's goneManual Error Handler Attaching\n\u00b6While it is still possible to attach error handlers toFlask.error_handlersit\u2019s discouraged to do so and in fact\ndeprecated.In general we no longer recommend custom error handler\nattaching via assignments to the underlying dictionary due to the more\ncomplex internal handling to support arbitrary exception classes and\nblueprints.SeeFlask.errorhandler()for more information.The proper upgrade is to change this:app\n.\nerror_handlers\n[\n403\n]=handle_errorInto this:app\n.\nregister_error_handler\n(\n403\n,handle_error\n)Alternatively you should just attach the function with a decorator:@app\n.\nerrorhandler\n(\n403\n)defhandle_error\n(\ne\n):...(Note thatregister_error_handler()is new in Flask 0.7)Blueprint Support\n\u00b6Blueprints replace the previous concept of \u201cModules\u201d in Flask.They\nprovide better semantics for various features and work better with large\napplications.The update script provided should be able to upgrade your\napplications automatically, but there might be some cases where it fails\nto upgrade.What changed?Blueprints need explicit names.Modules had an automatic name\nguessing scheme where the shortname for the module was taken from the\nlast part of the import module.The upgrade script tries to guess\nthat name but it might fail as this information could change at\nruntime.Blueprints have an inverse behavior forurl_for()\n.Previously.footoldurl_for()that it should look for the endpointfooon the application.Now it means \u201crelative to current module\u201d.\nThe script will inverse all calls tourl_for()automatically for\nyou.It will do this in a very eager way so you might end up with\nsome unnecessary leading dots in your code if you\u2019re not using\nmodules.Blueprints do not automatically provide static folders.They will\nalso no longer automatically export templates from a folder calledtemplatesnext to their location however but it can be enabled from\nthe constructor.Same with static files: if you want to continue\nserving static files you need to tell the constructor explicitly the\npath to the static folder (which can be relative to the blueprint\u2019s\nmodule path).Rendering templates was simplified.Now the blueprints can provide\ntemplate folders which are added to a general template searchpath.\nThis means that you need to add another subfolder with the blueprint\u2019s\nname into that folder if you wantblueprintname/template.htmlas\nthe template name.If you continue to use theModuleobject which is deprecated, Flask will\nrestore the previous behavior as good as possible.However we strongly\nrecommend upgrading to the new blueprints as they provide a lot of useful\nimprovement such as the ability to attach a blueprint multiple times,\nblueprint specific error handlers and a lot more.Version 0.6\n\u00b6Flask 0.6 comes with a backwards incompatible change which affects the\norder of after-request handlers.Previously they were called in the order\nof the registration, now they are called in reverse order.This change\nwas made so that Flask behaves more like people expected it to work and\nhow other systems handle request pre- and post-processing.If you\ndepend on the order of execution of post-request functions, be sure to\nchange the order.Another change that breaks backwards compatibility is that context\nprocessors will no longer override values passed directly to the template\nrendering function.If for examplerequestis as variable passed\ndirectly to the template, the default context processor will not override\nit with the current request object.This makes it easier to extend\ncontext processors later to inject additional variables without breaking\nexisting template not expecting them.Version 0.5\n\u00b6Flask 0.5 is the first release that comes as a Python package instead of a\nsingle module.There were a couple of internal refactoring so if you\ndepend on undocumented internal details you probably have to adapt the\nimports.The following changes may be relevant to your application:autoescaping no longer happens for all templates.Instead it is\nconfigured to only happen on files ending with.html\n,.htm\n,.xmland.xhtml\n.If you have templates with different\nextensions you should override theselect_jinja_autoescape()method.Flask no longer supports zipped applications in this release.This\nfunctionality might come back in future releases if there is demand\nfor this feature.Removing support for this makes the Flask internal\ncode easier to understand and fixes a couple of small issues that make\ndebugging harder than necessary.Thecreate_jinja_loaderfunction is gone.If you want to customize\nthe Jinja loader now, use thecreate_jinja_environment()method instead.Version 0.4\n\u00b6For application developers there are no changes that require changes in\nyour code.In case you are developing on a Flask extension however, and\nthat extension has a unittest-mode you might want to link the activation\nof that mode to the newTESTINGflag.Version 0.3\n\u00b6Flask 0.3 introduces configuration support and logging as well as\ncategories for flashing messages.All these are features that are 100%\nbackwards compatible but you might want to take advantage of them.Configuration Support\n\u00b6The configuration support makes it easier to write any kind of application\nthat requires some sort of configuration.(Which most likely is the case\nfor any application out there).If you previously had code like this:app\n.\ndebug=DEBUGapp\n.\nsecret_key=SECRET_KEYYou no longer have to do that, instead you can just load a configuration\ninto the config object.How this works is outlined inConfiguration Handling\n.Logging Integration\n\u00b6Flask now configures a logger for you with some basic and useful defaults.\nIf you run your application in production and want to profit from\nautomatic error logging, you might be interested in attaching a proper log\nhandler.Also you can start logging warnings and errors into the logger\nwhen appropriately.For more information on that, readApplication Errors\n.Categories for Flash Messages\n\u00b6Flash messages can now have categories attached.This makes it possible\nto render errors, warnings or regular messages differently for example.\nThis is an opt-in feature because it requires some rethinking in the code.Read all about that in theMessage Flashingpattern.ContentsUpgrading to Newer ReleasesVersion 0.12Changes to send_fileVersion 0.11DebuggingError handlingTemplatingExtension importsVersion 0.10Version 0.9Version 0.8Version 0.7Bug in Request LocalsUpgrading to new Teardown HandlingManual Error Handler AttachingBlueprint SupportVersion 0.6Version 0.5Version 0.4Version 0.3Configuration SupportLogging IntegrationCategories for Flash MessagesNavigationOverviewPrevious:Pocoo StyleguideNext:Flask ChangelogVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/upgrading/"},
{"text": "API \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbAPI\n\u00b6This part of the documentation covers all the interfaces of Flask.For\nparts where Flask depends on external libraries, we document the most\nimportant right here and provide links to the canonical documentation.Application Object\n\u00b6classflask.\nFlask\n(\nimport_name\n,static_url_path=None\n,static_folder='static'\n,static_host=None\n,host_matching=False\n,subdomain_matching=False\n,template_folder='templates'\n,instance_path=None\n,instance_relative_config=False\n,root_path=None\n)\n\u00b6The flask object implements a WSGI application and acts as the central\nobject.It is passed the name of the module or package of the\napplication.Once it is created it will act as a central registry for\nthe view functions, the URL rules, template configuration and much more.The name of the package is used to resolve resources from inside the\npackage or the folder the module is contained in depending on if the\npackage parameter resolves to an actual python package (a folder with\nan__init__.pyfile inside) or a standard module (just a.pyfile).For more information about resource loading, seeopen_resource()\n.Usually you create aFlaskinstance in your main module or\nin the__init__.pyfile of your package like this:fromflaskimportFlaskapp=Flask\n(\n__name__\n)About the First ParameterThe idea of the first parameter is to give Flask an idea of what\nbelongs to your application.This name is used to find resources\non the filesystem, can be used by extensions to improve debugging\ninformation and a lot more.So it\u2019s important what you provide there.If you are using a single\nmodule,__name__is always the correct value.If you however are\nusing a package, it\u2019s usually recommended to hardcode the name of\nyour package there.For example if your application is defined inyourapplication/app.pyyou should create it with one of the two versions below:app=Flask\n(\n'yourapplication'\n)app=Flask\n(\n__name__\n.\nsplit\n(\n'.'\n)[\n0\n])Why is that?The application will work even with__name__\n, thanks\nto how resources are looked up.However it will make debugging more\npainful.Certain extensions can make assumptions based on the\nimport name of your application.For example the Flask-SQLAlchemy\nextension will look for the code in your application that triggered\nan SQL query in debug mode.If the import name is not properly set\nup, that debugging information is lost.(For example it would only\npick up SQL queries inyourapplication.appand notyourapplication.views.frontend\n)New in version 1.0:Thehost_matchingandstatic_hostparameters were added.New in version 1.0:Thesubdomain_matchingparameter was added. Subdomain\nmatching needs to be enabled manually now. SettingSERVER_NAMEdoes not implicitly enable it.ChangelogNew in version 0.11:Theroot_pathparameter was added.New in version 0.8:Theinstance_pathandinstance_relative_configparameters were\nadded.New in version 0.7:Thestatic_url_path\n,static_folder\n, andtemplate_folderparameters were added.Parameters:import_name\u2013 the name of the application packagestatic_url_path\u2013 can be used to specify a different path for the\nstatic files on the web.Defaults to the name\nof thestatic_folderfolder.static_folder\u2013 the folder with static files that should be served\natstatic_url_path\n.Defaults to the'static'folder in the root path of the application.static_host\u2013 the host to use when adding the static route.\nDefaults to None. Required when usinghost_matching=Truewith astatic_folderconfigured.host_matching\u2013 seturl_map.host_matchingattribute.\nDefaults to False.subdomain_matching\u2013 consider the subdomain relative toSERVER_NAMEwhen matching routes. Defaults to False.template_folder\u2013 the folder that contains the templates that should\nbe used by the application.Defaults to'templates'folder in the root path of the\napplication.instance_path\u2013 An alternative instance path for the application.\nBy default the folder'instance'next to the\npackage or module is assumed to be the instance\npath.instance_relative_config\u2013 if set toTruerelative filenames\nfor loading the config are assumed to\nbe relative to the instance path instead\nof the application root.root_path\u2013 Flask by default will automatically calculate the path\nto the root of the application.In certain situations\nthis cannot be achieved (for instance if the package\nis a Python 3 namespace package) and needs to be\nmanually defined.add_template_filter\n(\nf\n,name=None\n)\n\u00b6Register a custom template filter.Works exactly like thetemplate_filter()decorator.Parameters:\nname\u2013 the optional name of the filter, otherwise the\nfunction name will be used.add_template_global\n(\nf\n,name=None\n)\n\u00b6Register a custom template global function. Works exactly like thetemplate_global()decorator.ChangelogNew in version 0.10.Parameters:\nname\u2013 the optional name of the global function, otherwise the\nfunction name will be used.add_template_test\n(\nf\n,name=None\n)\n\u00b6Register a custom template test.Works exactly like thetemplate_test()decorator.ChangelogNew in version 0.10.Parameters:\nname\u2013 the optional name of the test, otherwise the\nfunction name will be used.add_url_rule\n(\nrule\n,endpoint=None\n,view_func=None\n,provide_automatic_options=None\n,**options\n)\n\u00b6Connects a URL rule.Works exactly like theroute()decorator.If a view_func is provided it will be registered with the\nendpoint.Basically this example:@app\n.\nroute\n(\n'/'\n)defindex\n():passIs equivalent to the following:defindex\n():passapp\n.\nadd_url_rule\n(\n'/'\n,'index'\n,index\n)If the view_func is not provided you will need to connect the endpoint\nto a view function like so:app\n.\nview_functions\n[\n'index'\n]=indexInternallyroute()invokesadd_url_rule()so if you want\nto customize the behavior via subclassing you only need to change\nthis method.For more information refer toURL Route Registrations\n.ChangelogChanged in version 0.6:OPTIONSis added automatically as method.Changed in version 0.2:view_funcparameter added.Parameters:rule\u2013 the URL rule as stringendpoint\u2013 the endpoint for the registered URL rule.Flask\nitself assumes the name of the view function as\nendpointview_func\u2013 the function to call when serving a request to the\nprovided endpointprovide_automatic_options\u2013 controls whether theOPTIONSmethod should be added automatically. This can also be controlled\nby setting theview_func.provide_automatic_options=Falsebefore adding the rule.options\u2013 the options to be forwarded to the underlyingRuleobject.A change\nto Werkzeug is handling of method options.methods\nis a list of methods this rule should be limited\nto (\nGET\n,POSTetc.).By default a rule\njust listens forGET(and implicitlyHEAD\n).\nStarting with Flask 0.6,OPTIONSis implicitly\nadded and handled by the standard request handling.after_request\n(\nf\n)\n\u00b6Register a function to be run after each request.Your function must take one parameter, an instance ofresponse_classand return a new response object or the\nsame (seeprocess_response()\n).As of Flask 0.7 this function might not be executed at the end of the\nrequest in case an unhandled exception occurred.after_request_funcs= None\n\u00b6A dictionary with lists of functions that should be called after\neach request.The key of the dictionary is the name of the blueprint\nthis function is active for,Nonefor all requests.This can for\nexample be used to close database connections. To register a function\nhere, use theafter_request()decorator.app_context\n(\n)\n\u00b6Create anAppContext\n. Use as awithblock to push the context, which will makecurrent_apppoint at this application.An application context is automatically pushed byRequestContext.push()when handling a request, and when running a CLI command. Use\nthis to manually create a context outside of these situations.withapp\n.\napp_context\n():init_db\n()SeeThe Application Context\n.ChangelogNew in version 0.9.app_ctx_globals_class\n\u00b6alias offlask.ctx._AppCtxGlobalsauto_find_instance_path\n(\n)\n\u00b6Tries to locate the instance path if it was not provided to the\nconstructor of the application class.It will basically calculate\nthe path to a folder namedinstancenext to your main file or\nthe package.ChangelogNew in version 0.8.before_first_request\n(\nf\n)\n\u00b6Registers a function to be run before the first request to this\ninstance of the application.The function will be called without any arguments and its return\nvalue is ignored.ChangelogNew in version 0.8.before_first_request_funcs= None\n\u00b6A list of functions that will be called at the beginning of the\nfirst request to this instance. To register a function, use thebefore_first_request()decorator.ChangelogNew in version 0.8.before_request\n(\nf\n)\n\u00b6Registers a function to run before each request.For example, this can be used to open a database connection, or to load\nthe logged in user from the session.The function will be called without any arguments. If it returns a\nnon-None value, the value is handled as if it was the return value from\nthe view, and further request handling is stopped.before_request_funcs= None\n\u00b6A dictionary with lists of functions that will be called at the\nbeginning of each request. The key of the dictionary is the name of\nthe blueprint this function is active for, orNonefor all\nrequests. To register a function, use thebefore_request()decorator.blueprints= None\n\u00b6all the attached blueprints in a dictionary by name.Blueprints\ncan be attached multiple times so this dictionary does not tell\nyou how often they got attached.ChangelogNew in version 0.7.cli= None\n\u00b6The click command line context for this application.Commands\nregistered here show up in theflaskcommand once the\napplication has been discovered.The default commands are\nprovided by Flask itself and can be overridden.This is an instance of aclick.Groupobject.config= None\n\u00b6The configuration dictionary asConfig\n.This behaves\nexactly like a regular dictionary but supports additional methods\nto load a config from files.config_class\n\u00b6alias offlask.config.Configcontext_processor\n(\nf\n)\n\u00b6Registers a template context processor function.create_global_jinja_loader\n(\n)\n\u00b6Creates the loader for the Jinja2 environment.Can be used to\noverride just the loader and keeping the rest unchanged.It\u2019s\ndiscouraged to override this function.Instead one should override\nthejinja_loader()function instead.The global loader dispatches between the loaders of the application\nand the individual blueprints.ChangelogNew in version 0.7.create_jinja_environment\n(\n)\n\u00b6Creates the Jinja2 environment based onjinja_optionsandselect_jinja_autoescape()\n.Since 0.7 this also adds\nthe Jinja2 globals and filters after initialization.Override\nthis function to customize the behavior.ChangelogChanged in version 0.11:Environment.auto_reloadset in accordance withTEMPLATES_AUTO_RELOADconfiguration option.New in version 0.5.create_url_adapter\n(\nrequest\n)\n\u00b6Creates a URL adapter for the given request. The URL adapter\nis created at a point where the request context is not yet set\nup so the request is passed explicitly.Changed in version 1.0:SERVER_NAMEno longer implicitly enables subdomain\nmatching. Usesubdomain_matchinginstead.ChangelogChanged in version 0.9:This can now also be called without a request object when the\nURL adapter is created for the application context.New in version 0.6.debug\n\u00b6Whether debug mode is enabled. When usingflaskrunto start\nthe development server, an interactive debugger will be shown for\nunhandled exceptions, and the server will be reloaded when code\nchanges. This maps to theDEBUGconfig key. This is\nenabled whenenvis'development'and is overridden\nby theFLASK_DEBUGenvironment variable. It may not behave as\nexpected if set in code.Do not enable debug mode when deploying in production.Default:Trueifenvis'development'\n, orFalseotherwise.default_config= {'APPLICATION_ROOT': '/', 'DEBUG': None, 'ENV': None, 'EXPLAIN_TEMPLATE_LOADING': False, 'JSONIFY_MIMETYPE': 'application/json', 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'MAX_CONTENT_LENGTH': None, 'MAX_COOKIE_SIZE': 4093, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'PREFERRED_URL_SCHEME': 'http', 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'PROPAGATE_EXCEPTIONS': None, 'SECRET_KEY': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'SERVER_NAME': None, 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'TEMPLATES_AUTO_RELOAD': None, 'TESTING': False, 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'USE_X_SENDFILE': False}\n\u00b6Default configuration parameters.dispatch_request\n(\n)\n\u00b6Does the request dispatching.Matches the URL and returns the\nreturn value of the view or error handler.This does not have to\nbe a response object.In order to convert the return value to a\nproper response object, callmake_response()\n.ChangelogChanged in version 0.7:This no longer does the exception handling, this code was\nmoved to the newfull_dispatch_request()\n.do_teardown_appcontext\n(\nexc=<object object>\n)\n\u00b6Called right before the application context is popped.When handling a request, the application context is popped\nafter the request context. Seedo_teardown_request()\n.This calls all functions decorated withteardown_appcontext()\n. Then theappcontext_tearing_downsignal is sent.This is called byAppContext.pop()\n.ChangelogNew in version 0.9.do_teardown_request\n(\nexc=<object object>\n)\n\u00b6Called after the request is dispatched and the response is\nreturned, right before the request context is popped.This calls all functions decorated withteardown_request()\n, andBlueprint.teardown_request()if a blueprint handled the request. Finally, therequest_tearing_downsignal is sent.This is called byRequestContext.pop()\n,\nwhich may be delayed during testing to maintain access to\nresources.Parameters:\nexc\u2013 An unhandled exception raised while dispatching the\nrequest. Detected from the current exception information if\nnot passed. Passed to each teardown function.ChangelogChanged in version 0.9:Added theexcargument.endpoint\n(\nendpoint\n)\n\u00b6A decorator to register a function as an endpoint.\nExample:@app\n.\nendpoint\n(\n'example.endpoint'\n)defexample\n():return\"example\"Parameters:\nendpoint\u2013 the name of the endpointenv\n\u00b6What environment the app is running in. Flask and extensions may\nenable behaviors based on the environment, such as enabling debug\nmode. This maps to theENVconfig key. This is set by theFLASK_ENVenvironment variable and may not behave as\nexpected if set in code.Do not enable development when deploying in production.Default:'production'error_handler_spec= None\n\u00b6A dictionary of all registered error handlers.The key isNonefor error handlers active on the application, otherwise the key is\nthe name of the blueprint.Each key points to another dictionary\nwhere the key is the status code of the http exception.The\nspecial keyNonepoints to a list of tuples where the first item\nis the class for the instance check and the second the error handler\nfunction.To register an error handler, use theerrorhandler()decorator.errorhandler\n(\ncode_or_exception\n)\n\u00b6Register a function to handle errors by code or exception class.A decorator that is used to register a function given an\nerror code.Example:@app\n.\nerrorhandler\n(\n404\n)defpage_not_found\n(\nerror\n):return'This page does not exist'\n,404You can also register handlers for arbitrary exceptions:@app\n.\nerrorhandler\n(\nDatabaseError\n)defspecial_exception_handler\n(\nerror\n):return'Database connection failed'\n,500ChangelogNew in version 0.7:Useregister_error_handler()instead of modifyingerror_handler_specdirectly, for application wide error\nhandlers.New in version 0.7:One can now additionally also register custom exception types\nthat do not necessarily have to be a subclass of theHTTPExceptionclass.Parameters:\ncode_or_exception\u2013 the code as integer for the handler, or\nan arbitrary exceptionextensions= None\n\u00b6a place where extensions can store application specific state.For\nexample this is where an extension could store database engines and\nsimilar things.For backwards compatibility extensions should register\nthemselves like this:ifnothasattr\n(\napp\n,'extensions'\n):app\n.\nextensions={}app\n.\nextensions\n[\n'extensionname'\n]=SomeObject\n()The key must match the name of the extension module. For example in\ncase of a \u201cFlask-Foo\u201d extension inflask_foo\n, the key would be'foo'\n.ChangelogNew in version 0.7.full_dispatch_request\n(\n)\n\u00b6Dispatches the request and on top of that performs request\npre and postprocessing as well as HTTP exception catching and\nerror handling.ChangelogNew in version 0.7.get_send_file_max_age\n(\nfilename\n)\n\u00b6Provides default cache_timeout for thesend_file()functions.By default, this function returnsSEND_FILE_MAX_AGE_DEFAULTfrom\nthe configuration ofcurrent_app\n.Static file functions such assend_from_directory()use this\nfunction, andsend_file()calls this function oncurrent_appwhen the given cache_timeout isNone\n. If a\ncache_timeout is given insend_file()\n, that timeout is used;\notherwise, this method is called.This allows subclasses to change the behavior when sending files based\non the filename.For example, to set the cache timeout for .js files\nto 60 seconds:classMyFlask\n(\nflask\n.\nFlask\n):defget_send_file_max_age\n(\nself\n,name\n):ifname\n.\nlower\n()\n.\nendswith\n(\n'.js'\n):return60returnflask\n.\nFlask\n.\nget_send_file_max_age\n(\nself\n,name\n)ChangelogNew in version 0.9.got_first_request\n\u00b6This attribute is set toTrueif the application started\nhandling the first request.ChangelogNew in version 0.8.handle_exception\n(\ne\n)\n\u00b6Default exception handling that kicks in when an exception\noccurs that is not caught.In debug mode the exception will\nbe re-raised immediately, otherwise it is logged and the handler\nfor a 500 internal server error is used.If no such handler\nexists, a default 500 internal server error message is displayed.ChangelogNew in version 0.3.handle_http_exception\n(\ne\n)\n\u00b6Handles an HTTP exception.By default this will invoke the\nregistered error handlers and fall back to returning the\nexception as response.ChangelogNew in version 0.3.handle_url_build_error\n(\nerror\n,endpoint\n,values\n)\n\u00b6HandleBuildErroronurl_for()\n.handle_user_exception\n(\ne\n)\n\u00b6This method is called whenever an exception occurs that should be\nhandled.A special case areHTTPException\ns which are forwarded by\nthis function to thehandle_http_exception()method.This\nfunction will either return a response value or reraise the\nexception with the same traceback.Changed in version 1.0:Key errors raised from request data likeformshow the the bad\nkey in debug mode rather than a generic bad request message.ChangelogNew in version 0.7.has_static_folder\n\u00b6This isTrueif the package bound object\u2019s container has a\nfolder for static files.ChangelogNew in version 0.5.import_name= None\n\u00b6The name of the package or module that this app belongs to. Do not\nchange this once it is set by the constructor.inject_url_defaults\n(\nendpoint\n,values\n)\n\u00b6Injects the URL defaults for the given endpoint directly into\nthe values dictionary passed.This is used internally and\nautomatically called on URL building.ChangelogNew in version 0.7.instance_path= None\n\u00b6Holds the path to the instance folder.ChangelogNew in version 0.8.iter_blueprints\n(\n)\n\u00b6Iterates over all blueprints by the order they were registered.ChangelogNew in version 0.11.jinja_env\n\u00b6The Jinja2 environment used to load templates.jinja_environment\n\u00b6alias offlask.templating.Environmentjinja_loader\n\u00b6The Jinja loader for this package bound object.ChangelogNew in version 0.5.jinja_options= {'extensions': ['jinja2.ext.autoescape', 'jinja2.ext.with_']}\n\u00b6Options that are passed directly to the Jinja2 environment.json_decoder\n\u00b6alias offlask.json.JSONDecoderjson_encoder\n\u00b6alias offlask.json.JSONEncoderlog_exception\n(\nexc_info\n)\n\u00b6Logs an exception.This is called byhandle_exception()if debugging is disabled and right before the handler is called.\nThe default implementation logs the exception as error on thelogger\n.ChangelogNew in version 0.8.logger\n\u00b6The'flask.app'logger, a standard PythonLogger\n.In debug mode, the logger\u2019slevelwill be set\ntoDEBUG\n.If there are no handlers configured, a default handler will be added.\nSeeLoggingfor more information.Changed in version 1.0:Behavior was simplified. The logger is always namedflask.app\n. The level is only set during configuration, it\ndoesn\u2019t checkapp.debugeach time. Only one format is used,\nnot different ones depending onapp.debug\n. No handlers are\nremoved, and a handler is only added if no handlers are already\nconfigured.ChangelogNew in version 0.3.make_config\n(\ninstance_relative=False\n)\n\u00b6Used to create the config attribute by the Flask constructor.\nTheinstance_relativeparameter is passed in from the constructor\nof Flask (there namedinstance_relative_config\n) and indicates if\nthe config should be relative to the instance path or the root path\nof the application.ChangelogNew in version 0.8.make_default_options_response\n(\n)\n\u00b6This method is called to create the defaultOPTIONSresponse.\nThis can be changed through subclassing to change the default\nbehavior ofOPTIONSresponses.ChangelogNew in version 0.7.make_null_session\n(\n)\n\u00b6Creates a new instance of a missing session.Instead of overriding\nthis method we recommend replacing thesession_interface\n.ChangelogNew in version 0.7.make_response\n(\nrv\n)\n\u00b6Convert the return value from a view function to an instance ofresponse_class\n.Parameters:\nrv\u2013the return value from the view function. The view function\nmust return a response. ReturningNone\n, or the view ending\nwithout returning, is not allowed. The following types are allowed\nforview_rv\n:str(\nunicodein Python 2)A response object is created with the string encoded to UTF-8\nas the body.bytes(\nstrin Python 2)A response object is created with the bytes as the body.tupleEither(body,status,headers)\n,(body,status)\n, or(body,headers)\n, wherebodyis any of the other types\nallowed here,statusis a string or an integer, andheadersis a dictionary or a list of(key,value)tuples. Ifbodyis aresponse_classinstance,statusoverwrites the exiting value andheadersare\nextended.response_classThe object is returned unchanged.otherResponseclassThe object is coerced toresponse_class\n.callable()The function is called as a WSGI application. The result is\nused to create a response object.ChangelogChanged in version 0.9:Previously a tuple was interpreted as the arguments for the\nresponse object.make_shell_context\n(\n)\n\u00b6Returns the shell context for an interactive shell for this\napplication.This runs all the registered shell context\nprocessors.ChangelogNew in version 0.11.name\n\u00b6The name of the application.This is usually the import name\nwith the difference that it\u2019s guessed from the run file if the\nimport name is main.This name is used as a display name when\nFlask needs the name of the application.It can be set and overridden\nto change the value.ChangelogNew in version 0.8.open_instance_resource\n(\nresource\n,mode='rb'\n)\n\u00b6Opens a resource from the application\u2019s instance folder\n(\ninstance_path\n).Otherwise works likeopen_resource()\n.Instance resources can also be opened for\nwriting.Parameters:resource\u2013 the name of the resource.To access resources within\nsubfolders use forward slashes as separator.mode\u2013 resource file opening mode, default is \u2018rb\u2019.open_resource\n(\nresource\n,mode='rb'\n)\n\u00b6Opens a resource from the application\u2019s resource folder.To see\nhow this works, consider the following folder structure:/\nmyapplication\n.\npy/\nschema\n.\nsql/\nstatic/\nstyle\n.\ncss/\ntemplates/\nlayout\n.\nhtml/\nindex\n.\nhtmlIf you want to open theschema.sqlfile you would do the\nfollowing:withapp\n.\nopen_resource\n(\n'schema.sql'\n)asf\n:contents=f\n.\nread\n()do_something_with\n(\ncontents\n)Parameters:resource\u2013 the name of the resource.To access resources within\nsubfolders use forward slashes as separator.mode\u2013 resource file opening mode, default is \u2018rb\u2019.open_session\n(\nrequest\n)\n\u00b6Creates or opens a new session.Default implementation stores all\nsession data in a signed cookie.This requires that thesecret_keyis set.Instead of overriding this method\nwe recommend replacing thesession_interface\n.Parameters:\nrequest\u2013 an instance ofrequest_class\n.permanent_session_lifetime\n\u00b6Atimedeltawhich is used to set the expiration\ndate of a permanent session.The default is 31 days which makes a\npermanent session survive for roughly one month.This attribute can also be configured from the config with thePERMANENT_SESSION_LIFETIMEconfiguration key.Defaults totimedelta(days=31)preprocess_request\n(\n)\n\u00b6Called before the request is dispatched. Callsurl_value_preprocessorsregistered with the app and the\ncurrent blueprint (if any). Then callsbefore_request_funcsregistered with the app and the blueprint.If anybefore_request()handler returns a non-None value, the\nvalue is handled as if it was the return value from the view, and\nfurther request handling is stopped.preserve_context_on_exception\n\u00b6Returns the value of thePRESERVE_CONTEXT_ON_EXCEPTIONconfiguration value in case it\u2019s set, otherwise a sensible default\nis returned.ChangelogNew in version 0.7.process_response\n(\nresponse\n)\n\u00b6Can be overridden in order to modify the response object\nbefore it\u2019s sent to the WSGI server.By default this will\ncall all theafter_request()decorated functions.ChangelogChanged in version 0.5:As of Flask 0.5 the functions registered for after request\nexecution are called in reverse order of registration.Parameters:\nresponse\u2013 aresponse_classobject.Returns:\na new response object or the same, has to be an\ninstance ofresponse_class\n.propagate_exceptions\n\u00b6Returns the value of thePROPAGATE_EXCEPTIONSconfiguration\nvalue in case it\u2019s set, otherwise a sensible default is returned.ChangelogNew in version 0.7.register_blueprint\n(\nblueprint\n,**options\n)\n\u00b6Register aBlueprinton the application. Keyword\narguments passed to this method will override the defaults set on the\nblueprint.Calls the blueprint\u2019sregister()method after\nrecording the blueprint in the application\u2019sblueprints\n.Parameters:blueprint\u2013 The blueprint to register.url_prefix\u2013 Blueprint routes will be prefixed with this.subdomain\u2013 Blueprint routes will match on this subdomain.url_defaults\u2013 Blueprint routes will use these default values for\nview arguments.options\u2013 Additional keyword arguments are passed toBlueprintSetupState\n. They can be\naccessed inrecord()callbacks.ChangelogNew in version 0.7.register_error_handler\n(\ncode_or_exception\n,f\n)\n\u00b6Alternative error attach function to theerrorhandler()decorator that is more straightforward to use for non decorator\nusage.ChangelogNew in version 0.7.request_class\n\u00b6alias offlask.wrappers.Requestrequest_context\n(\nenviron\n)\n\u00b6Create aRequestContextrepresenting a\nWSGI environment. Use awithblock to push the context,\nwhich will makerequestpoint at this request.SeeThe Request Context\n.Typically you should not call this from your own code. A request\ncontext is automatically pushed by thewsgi_app()when\nhandling a request. Usetest_request_context()to create\nan environment and context instead of this method.Parameters:\nenviron\u2013 a WSGI environmentresponse_class\n\u00b6alias offlask.wrappers.Responseroot_path= None\n\u00b6Absolute path to the package on the filesystem. Used to look up\nresources contained in the package.route\n(\nrule\n,**options\n)\n\u00b6A decorator that is used to register a view function for a\ngiven URL rule.This does the same thing asadd_url_rule()but is intended for decorator usage:@app\n.\nroute\n(\n'/'\n)defindex\n():return'Hello World'For more information refer toURL Route Registrations\n.Parameters:rule\u2013 the URL rule as stringendpoint\u2013 the endpoint for the registered URL rule.Flask\nitself assumes the name of the view function as\nendpointoptions\u2013 the options to be forwarded to the underlyingRuleobject.A change\nto Werkzeug is handling of method options.methods\nis a list of methods this rule should be limited\nto (\nGET\n,POSTetc.).By default a rule\njust listens forGET(and implicitlyHEAD\n).\nStarting with Flask 0.6,OPTIONSis implicitly\nadded and handled by the standard request handling.run\n(\nhost=None\n,port=None\n,debug=None\n,load_dotenv=True\n,**options\n)\n\u00b6Runs the application on a local development server.Do not userun()in a production setting. It is not intended to\nmeet security and performance requirements for a production server.\nInstead, seeDeployment Optionsfor WSGI server recommendations.If thedebugflag is set the server will automatically reload\nfor code changes and show a debugger in case an exception happened.If you want to run the application in debug mode, but disable the\ncode execution on the interactive debugger, you can passuse_evalex=Falseas parameter.This will keep the debugger\u2019s\ntraceback screen active, but disable code execution.It is not recommended to use this function for development with\nautomatic reloading as this is badly supported.Instead you should\nbe using theflaskcommand line script\u2019srunsupport.Keep in MindFlask will suppress any server error with a generic error page\nunless it is in debug mode.As such to enable just the\ninteractive debugger without the code reloading, you have to\ninvokerun()withdebug=Trueanduse_reloader=False\n.\nSettinguse_debuggertoTruewithout being in debug mode\nwon\u2019t catch any exceptions because there won\u2019t be any to\ncatch.Parameters:host\u2013 the hostname to listen on. Set this to'0.0.0.0'to\nhave the server available externally as well. Defaults to'127.0.0.1'or the host in theSERVER_NAMEconfig variable\nif present.port\u2013 the port of the webserver. Defaults to5000or the\nport defined in theSERVER_NAMEconfig variable if present.debug\u2013 if given, enable or disable debug mode. Seedebug\n.load_dotenv\u2013 Load the nearest.envand.flaskenvfiles to set environment variables. Will also change the working\ndirectory to the directory containing the first file found.options\u2013 the options to be forwarded to the underlying Werkzeug\nserver. Seewerkzeug.serving.run_simple()for more\ninformation.Changed in version 1.0:If installed, python-dotenv will be used to load environment\nvariables from.envand.flaskenvfiles.If set, theFLASK_ENVandFLASK_DEBUGenvironment variables will overrideenvanddebug\n.Threaded mode is enabled by default.ChangelogChanged in version 0.10:The default port is now picked from theSERVER_NAMEvariable.save_session\n(\nsession\n,response\n)\n\u00b6Saves the session if it needs updates.For the default\nimplementation, checkopen_session()\n.Instead of overriding this\nmethod we recommend replacing thesession_interface\n.Parameters:session\u2013 the session to be saved (aSecureCookieobject)response\u2013 an instance ofresponse_classsecret_key\n\u00b6If a secret key is set, cryptographic components can use this to\nsign cookies and other things. Set this to a complex random value\nwhen you want to use the secure cookie for instance.This attribute can also be configured from the config with theSECRET_KEYconfiguration key. Defaults toNone\n.select_jinja_autoescape\n(\nfilename\n)\n\u00b6ReturnsTrueif autoescaping should be active for the given\ntemplate name. If no template name is given, returnsTrue\n.ChangelogNew in version 0.5.send_file_max_age_default\n\u00b6Atimedeltawhich is used as default cache_timeout\nfor thesend_file()functions. The default is 12 hours.This attribute can also be configured from the config with theSEND_FILE_MAX_AGE_DEFAULTconfiguration key. This configuration\nvariable can also be set with an integer value used as seconds.\nDefaults totimedelta(hours=12)send_static_file\n(\nfilename\n)\n\u00b6Function used internally to send static files from the static\nfolder to the browser.ChangelogNew in version 0.5.session_cookie_name\n\u00b6The secure cookie uses this for the name of the session cookie.This attribute can also be configured from the config with theSESSION_COOKIE_NAMEconfiguration key.Defaults to'session'session_interface= <flask.sessions.SecureCookieSessionInterface object>\n\u00b6the session interface to use.By default an instance ofSecureCookieSessionInterfaceis used here.ChangelogNew in version 0.8.shell_context_processor\n(\nf\n)\n\u00b6Registers a shell context processor function.ChangelogNew in version 0.11.shell_context_processors= None\n\u00b6A list of shell context processor functions that should be run\nwhen a shell context is created.ChangelogNew in version 0.11.should_ignore_error\n(\nerror\n)\n\u00b6This is called to figure out if an error should be ignored\nor not as far as the teardown system is concerned.If this\nfunction returnsTruethen the teardown handlers will not be\npassed the error.ChangelogNew in version 0.10.static_folder\n\u00b6The absolute path to the configured static folder.static_url_path\n\u00b6The URL prefix that the static route will be registered for.teardown_appcontext\n(\nf\n)\n\u00b6Registers a function to be called when the application context\nends.These functions are typically also called when the request\ncontext is popped.Example:ctx=app\n.\napp_context\n()ctx\n.\npush\n()...ctx\n.\npop\n()Whenctx.pop()is executed in the above example, the teardown\nfunctions are called just before the app context moves from the\nstack of active contexts.This becomes relevant if you are using\nsuch constructs in tests.Since a request context typically also manages an application\ncontext it would also be called when you pop a request context.When a teardown function was called because of an unhandled exception\nit will be passed an error object. If anerrorhandler()is\nregistered, it will handle the exception and the teardown will not\nreceive it.The return values of teardown functions are ignored.ChangelogNew in version 0.9.teardown_appcontext_funcs= None\n\u00b6A list of functions that are called when the application context\nis destroyed.Since the application context is also torn down\nif the request ends this is the place to store code that disconnects\nfrom databases.ChangelogNew in version 0.9.teardown_request\n(\nf\n)\n\u00b6Register a function to be run at the end of each request,\nregardless of whether there was an exception or not.These functions\nare executed when the request context is popped, even if not an\nactual request was performed.Example:ctx=app\n.\ntest_request_context\n()ctx\n.\npush\n()...ctx\n.\npop\n()Whenctx.pop()is executed in the above example, the teardown\nfunctions are called just before the request context moves from the\nstack of active contexts.This becomes relevant if you are using\nsuch constructs in tests.Generally teardown functions must take every necessary step to avoid\nthat they will fail.If they do execute code that might fail they\nwill have to surround the execution of these code by try/except\nstatements and log occurring errors.When a teardown function was called because of an exception it will\nbe passed an error object.The return values of teardown functions are ignored.Debug NoteIn debug mode Flask will not tear down a request on an exception\nimmediately.Instead it will keep it alive so that the interactive\ndebugger can still access it.This behavior can be controlled\nby thePRESERVE_CONTEXT_ON_EXCEPTIONconfiguration variable.teardown_request_funcs= None\n\u00b6A dictionary with lists of functions that are called after\neach request, even if an exception has occurred. The key of the\ndictionary is the name of the blueprint this function is active for,Nonefor all requests. These functions are not allowed to modify\nthe request, and their return values are ignored. If an exception\noccurred while processing the request, it gets passed to each\nteardown_request function. To register a function here, use theteardown_request()decorator.ChangelogNew in version 0.7.template_context_processors= None\n\u00b6A dictionary with list of functions that are called without argument\nto populate the template context.The key of the dictionary is the\nname of the blueprint this function is active for,Nonefor all\nrequests.Each returns a dictionary that the template context is\nupdated with.To register a function here, use thecontext_processor()decorator.template_filter\n(\nname=None\n)\n\u00b6A decorator that is used to register custom template filter.\nYou can specify a name for the filter, otherwise the function\nname will be used. Example:@app\n.\ntemplate_filter\n()defreverse\n(\ns\n):returns\n[::\n-\n1\n]Parameters:\nname\u2013 the optional name of the filter, otherwise the\nfunction name will be used.template_folder= None\n\u00b6Location of the template files to be added to the template lookup.Noneif templates should not be added.template_global\n(\nname=None\n)\n\u00b6A decorator that is used to register a custom template global function.\nYou can specify a name for the global function, otherwise the function\nname will be used. Example:@app\n.\ntemplate_global\n()defdouble\n(\nn\n):return2*nChangelogNew in version 0.10.Parameters:\nname\u2013 the optional name of the global function, otherwise the\nfunction name will be used.template_test\n(\nname=None\n)\n\u00b6A decorator that is used to register custom template test.\nYou can specify a name for the test, otherwise the function\nname will be used. Example:@app\n.\ntemplate_test\n()defis_prime\n(\nn\n):ifn==2\n:returnTrueforiinrange\n(\n2\n,int\n(\nmath\n.\nceil\n(\nmath\n.\nsqrt\n(\nn\n)))+1\n):ifn%i==0\n:returnFalsereturnTrueChangelogNew in version 0.10.Parameters:\nname\u2013 the optional name of the test, otherwise the\nfunction name will be used.templates_auto_reload\n\u00b6Reload templates when they are changed. Used bycreate_jinja_environment()\n.This attribute can be configured withTEMPLATES_AUTO_RELOAD\n. If\nnot set, it will be enabled in debug mode.New in version 1.0:This property was added but the underlying config and behavior\nalready existed.Changelogtest_cli_runner\n(\n**kwargs\n)\n\u00b6Create a CLI runner for testing CLI commands.\nSeeTesting CLI Commands\n.Returns an instance oftest_cli_runner_class\n, by defaultFlaskCliRunner\n. The Flask app object is\npassed as the first argument.New in version 1.0.Changelogtest_cli_runner_class= None\n\u00b6TheCliRunnersubclass, by defaultFlaskCliRunnerthat is used bytest_cli_runner()\n. Its__init__method should take a\nFlask app object as the first argument.New in version 1.0.Changelogtest_client\n(\nuse_cookies=True\n,**kwargs\n)\n\u00b6Creates a test client for this application.For information\nabout unit testing head over toTesting Flask Applications\n.Note that if you are testing for assertions or exceptions in your\napplication code, you must setapp.testing=Truein order for the\nexceptions to propagate to the test client.Otherwise, the exception\nwill be handled by the application (not visible to the test client) and\nthe only indication of an AssertionError or other exception will be a\n500 status code response to the test client.See thetestingattribute.For example:app\n.\ntesting=Trueclient=app\n.\ntest_client\n()The test client can be used in awithblock to defer the closing down\nof the context until the end of thewithblock.This is useful if\nyou want to access the context locals for testing:withapp\n.\ntest_client\n()asc\n:rv=c\n.\nget\n(\n'/?vodka=42'\n)assertrequest\n.\nargs\n[\n'vodka'\n]=='42'Additionally, you may pass optional keyword arguments that will then\nbe passed to the application\u2019stest_client_classconstructor.\nFor example:fromflask.testingimportFlaskClientclassCustomClient\n(\nFlaskClient\n):def__init__\n(\nself\n,*\nargs\n,**\nkwargs\n):self\n.\n_authentication=kwargs\n.\npop\n(\n\"authentication\"\n)super\n(\nCustomClient\n,\nself\n)\n.\n__init__\n(*\nargs\n,**\nkwargs\n)app\n.\ntest_client_class=CustomClientclient=app\n.\ntest_client\n(\nauthentication\n=\n'Basic ....'\n)SeeFlaskClientfor more information.ChangelogChanged in version 0.11:Added**kwargsto support passing additional keyword arguments to\nthe constructor oftest_client_class\n.New in version 0.7:Theuse_cookiesparameter was added as well as the ability\nto override the client to be used by setting thetest_client_classattribute.Changed in version 0.4:added support forwithblock usage for the client.test_client_class= None\n\u00b6the test client that is used with whentest_clientis used.ChangelogNew in version 0.7.test_request_context\n(\n*args\n,**kwargs\n)\n\u00b6Create aRequestContextfor a WSGI\nenvironment created from the given values. This is mostly useful\nduring testing, where you may want to run a function that uses\nrequest data without dispatching a full request.SeeThe Request Context\n.Use awithblock to push the context, which will makerequestpoint at the request for the created\nenvironment.withtest_request_context\n(\n...\n):generate_report\n()When using the shell, it may be easier to push and pop the\ncontext manually to avoid indentation.ctx=app\n.\ntest_request_context\n(\n...\n)ctx\n.\npush\n()...ctx\n.\npop\n()Takes the same arguments as Werkzeug\u2019sEnvironBuilder\n, with some defaults from\nthe application. See the linked Werkzeug docs for most of the\navailable arguments. Flask-specific behavior is listed here.Parameters:path\u2013 URL path being requested.base_url\u2013 Base URL where the app is being served, whichpathis relative to. If not given, built fromPREFERRED_URL_SCHEME\n,subdomain\n,SERVER_NAME\n, andAPPLICATION_ROOT\n.subdomain\u2013 Subdomain name to append toSERVER_NAME\n.url_scheme\u2013 Scheme to use instead ofPREFERRED_URL_SCHEME\n.data\u2013 The request body, either as a string or a dict of\nform keys and values.json\u2013 If given, this is serialized as JSON and passed asdata\n. Also defaultscontent_typetoapplication/json\n.args\u2013 other positional arguments passed toEnvironBuilder\n.kwargs\u2013 other keyword arguments passed toEnvironBuilder\n.testing\n\u00b6The testing flag.Set this toTrueto enable the test mode of\nFlask extensions (and in the future probably also Flask itself).\nFor example this might activate test helpers that have an\nadditional runtime cost which should not be enabled by default.If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the\ndefault it\u2019s implicitly enabled.This attribute can also be configured from the config with theTESTINGconfiguration key.Defaults toFalse\n.trap_http_exception\n(\ne\n)\n\u00b6Checks if an HTTP exception should be trapped or not.By default\nthis will returnFalsefor all exceptions except for a bad request\nkey error ifTRAP_BAD_REQUEST_ERRORSis set toTrue\n.It\nalso returnsTrueifTRAP_HTTP_EXCEPTIONSis set toTrue\n.This is called for all HTTP exceptions raised by a view function.\nIf it returnsTruefor any exception the error handler for this\nexception is not called and it shows up as regular exception in the\ntraceback.This is helpful for debugging implicitly raised HTTP\nexceptions.Changed in version 1.0:Bad request errors are not trapped by default in debug mode.ChangelogNew in version 0.8.update_template_context\n(\ncontext\n)\n\u00b6Update the template context with some commonly used variables.\nThis injects request, session, config and g into the template\ncontext as well as everything template context processors want\nto inject.Note that the as of Flask 0.6, the original values\nin the context will not be overridden if a context processor\ndecides to return a value with the same key.Parameters:\ncontext\u2013 the context as a dictionary that is updated in place\nto add extra variables.url_build_error_handlers= None\n\u00b6A list of functions that are called whenurl_for()raises aBuildError\n.Each function registered here\nis called witherror\n,endpointandvalues\n.If a function\nreturnsNoneor raises aBuildErrorthe next function is\ntried.ChangelogNew in version 0.9.url_default_functions= None\n\u00b6A dictionary with lists of functions that can be used as URL value\npreprocessors.The keyNonehere is used for application wide\ncallbacks, otherwise the key is the name of the blueprint.\nEach of these functions has the chance to modify the dictionary\nof URL values before they are used as the keyword arguments of the\nview function.For each function registered this one should also\nprovide aurl_defaults()function that adds the parameters\nautomatically again that were removed that way.ChangelogNew in version 0.7.url_defaults\n(\nf\n)\n\u00b6Callback function for URL defaults for all view functions of the\napplication.It\u2019s called with the endpoint and values and should\nupdate the values passed in place.url_map= None\n\u00b6TheMapfor this instance.You can use\nthis to change the routing converters after the class was created\nbut before any routes are connected.Example:fromwerkzeug.routingimportBaseConverterclassListConverter\n(\nBaseConverter\n):defto_python\n(\nself\n,value\n):returnvalue\n.\nsplit\n(\n','\n)defto_url\n(\nself\n,values\n):return','\n.\njoin\n(\nsuper\n(\nListConverter\n,self\n)\n.\nto_url\n(\nvalue\n)forvalueinvalues\n)app=Flask\n(\n__name__\n)app\n.\nurl_map\n.\nconverters\n[\n'list'\n]=ListConverterurl_rule_class\n\u00b6alias ofwerkzeug.routing.Ruleurl_value_preprocessor\n(\nf\n)\n\u00b6Register a URL value preprocessor function for all view\nfunctions in the application. These functions will be called before thebefore_request()functions.The function can modify the values captured from the matched url before\nthey are passed to the view. For example, this can be used to pop a\ncommon language code value and place it ingrather than pass it to\nevery view.The function is passed the endpoint name and values dict. The return\nvalue is ignored.url_value_preprocessors= None\n\u00b6A dictionary with lists of functions that are called before thebefore_request_funcsfunctions. The key of the dictionary is\nthe name of the blueprint this function is active for, orNonefor all requests. To register a function, useurl_value_preprocessor()\n.ChangelogNew in version 0.7.use_x_sendfile\n\u00b6Enable this if you want to use the X-Sendfile feature.Keep in\nmind that the server has to support this.This only affects files\nsent with thesend_file()method.ChangelogNew in version 0.2.This attribute can also be configured from the config with theUSE_X_SENDFILEconfiguration key.Defaults toFalse\n.view_functions= None\n\u00b6A dictionary of all view functions registered.The keys will\nbe function names which are also used to generate URLs and\nthe values are the function objects themselves.\nTo register a view function, use theroute()decorator.wsgi_app\n(\nenviron\n,start_response\n)\n\u00b6The actual WSGI application. This is not implemented in__call__()so that middlewares can be applied without\nlosing a reference to the app object. Instead of doing this:app=MyMiddleware\n(\napp\n)It\u2019s a better idea to do this instead:app\n.\nwsgi_app=MyMiddleware\n(\napp\n.\nwsgi_app\n)Then you still have the original application object around and\ncan continue to call methods on it.ChangelogChanged in version 0.7:Teardown events for the request and app contexts are called\neven if an unhandled error occurs. Other events may not be\ncalled depending on when an error occurs during dispatch.\nSeeCallbacks and Errors\n.Parameters:environ\u2013 A WSGI environment.start_response\u2013 A callable accepting a status code,\na list of headers, and an optional exception context to\nstart the response.Blueprint Objects\n\u00b6classflask.\nBlueprint\n(\nname\n,import_name\n,static_folder=None\n,static_url_path=None\n,template_folder=None\n,url_prefix=None\n,subdomain=None\n,url_defaults=None\n,root_path=None\n)\n\u00b6Represents a blueprint.A blueprint is an object that records\nfunctions that will be called with theBlueprintSetupStatelater to register functions\nor other things on the main application.SeeModular Applications with Blueprintsfor more\ninformation.ChangelogNew in version 0.7.add_app_template_filter\n(\nf\n,name=None\n)\n\u00b6Register a custom template filter, available application wide.LikeFlask.add_template_filter()but for a blueprint.Works exactly\nlike theapp_template_filter()decorator.Parameters:\nname\u2013 the optional name of the filter, otherwise the\nfunction name will be used.add_app_template_global\n(\nf\n,name=None\n)\n\u00b6Register a custom template global, available application wide.LikeFlask.add_template_global()but for a blueprint.Works exactly\nlike theapp_template_global()decorator.ChangelogNew in version 0.10.Parameters:\nname\u2013 the optional name of the global, otherwise the\nfunction name will be used.add_app_template_test\n(\nf\n,name=None\n)\n\u00b6Register a custom template test, available application wide.LikeFlask.add_template_test()but for a blueprint.Works exactly\nlike theapp_template_test()decorator.ChangelogNew in version 0.10.Parameters:\nname\u2013 the optional name of the test, otherwise the\nfunction name will be used.add_url_rule\n(\nrule\n,endpoint=None\n,view_func=None\n,**options\n)\n\u00b6LikeFlask.add_url_rule()but for a blueprint.The endpoint for\ntheurl_for()function is prefixed with the name of the blueprint.after_app_request\n(\nf\n)\n\u00b6LikeFlask.after_request()but for a blueprint.Such a function\nis executed after each request, even if outside of the blueprint.after_request\n(\nf\n)\n\u00b6LikeFlask.after_request()but for a blueprint.This function\nis only executed after each request that is handled by a function of\nthat blueprint.app_context_processor\n(\nf\n)\n\u00b6LikeFlask.context_processor()but for a blueprint.Such a\nfunction is executed each request, even if outside of the blueprint.app_errorhandler\n(\ncode\n)\n\u00b6LikeFlask.errorhandler()but for a blueprint.This\nhandler is used for all requests, even if outside of the blueprint.app_template_filter\n(\nname=None\n)\n\u00b6Register a custom template filter, available application wide.LikeFlask.template_filter()but for a blueprint.Parameters:\nname\u2013 the optional name of the filter, otherwise the\nfunction name will be used.app_template_global\n(\nname=None\n)\n\u00b6Register a custom template global, available application wide.LikeFlask.template_global()but for a blueprint.ChangelogNew in version 0.10.Parameters:\nname\u2013 the optional name of the global, otherwise the\nfunction name will be used.app_template_test\n(\nname=None\n)\n\u00b6Register a custom template test, available application wide.LikeFlask.template_test()but for a blueprint.ChangelogNew in version 0.10.Parameters:\nname\u2013 the optional name of the test, otherwise the\nfunction name will be used.app_url_defaults\n(\nf\n)\n\u00b6Same asurl_defaults()but application wide.app_url_value_preprocessor\n(\nf\n)\n\u00b6Same asurl_value_preprocessor()but application wide.before_app_first_request\n(\nf\n)\n\u00b6LikeFlask.before_first_request()\n.Such a function is\nexecuted before the first request to the application.before_app_request\n(\nf\n)\n\u00b6LikeFlask.before_request()\n.Such a function is executed\nbefore each request, even if outside of a blueprint.before_request\n(\nf\n)\n\u00b6LikeFlask.before_request()but for a blueprint.This function\nis only executed before each request that is handled by a function of\nthat blueprint.context_processor\n(\nf\n)\n\u00b6LikeFlask.context_processor()but for a blueprint.This\nfunction is only executed for requests handled by a blueprint.endpoint\n(\nendpoint\n)\n\u00b6LikeFlask.endpoint()but for a blueprint.This does not\nprefix the endpoint with the blueprint name, this has to be done\nexplicitly by the user of this method.If the endpoint is prefixed\nwith a.it will be registered to the current blueprint, otherwise\nit\u2019s an application independent endpoint.errorhandler\n(\ncode_or_exception\n)\n\u00b6Registers an error handler that becomes active for this blueprint\nonly.Please be aware that routing does not happen local to a\nblueprint so an error handler for 404 usually is not handled by\na blueprint unless it is caused inside a view function.Another\nspecial case is the 500 internal server error which is always looked\nup from the application.Otherwise works as theerrorhandler()decorator\nof theFlaskobject.get_send_file_max_age\n(\nfilename\n)\n\u00b6Provides default cache_timeout for thesend_file()functions.By default, this function returnsSEND_FILE_MAX_AGE_DEFAULTfrom\nthe configuration ofcurrent_app\n.Static file functions such assend_from_directory()use this\nfunction, andsend_file()calls this function oncurrent_appwhen the given cache_timeout isNone\n. If a\ncache_timeout is given insend_file()\n, that timeout is used;\notherwise, this method is called.This allows subclasses to change the behavior when sending files based\non the filename.For example, to set the cache timeout for .js files\nto 60 seconds:classMyFlask\n(\nflask\n.\nFlask\n):defget_send_file_max_age\n(\nself\n,name\n):ifname\n.\nlower\n()\n.\nendswith\n(\n'.js'\n):return60returnflask\n.\nFlask\n.\nget_send_file_max_age\n(\nself\n,name\n)ChangelogNew in version 0.9.has_static_folder\n\u00b6This isTrueif the package bound object\u2019s container has a\nfolder for static files.ChangelogNew in version 0.5.import_name= None\n\u00b6The name of the package or module that this app belongs to. Do not\nchange this once it is set by the constructor.jinja_loader\n\u00b6The Jinja loader for this package bound object.ChangelogNew in version 0.5.json_decoder= None\n\u00b6Blueprint local JSON decoder class to use.\nSet toNoneto use the app\u2019sjson_decoder\n.json_encoder= None\n\u00b6Blueprint local JSON decoder class to use.\nSet toNoneto use the app\u2019sjson_encoder\n.make_setup_state\n(\napp\n,options\n,first_registration=False\n)\n\u00b6Creates an instance ofBlueprintSetupState()object that is later passed to the register callback functions.\nSubclasses can override this to return a subclass of the setup state.open_resource\n(\nresource\n,mode='rb'\n)\n\u00b6Opens a resource from the application\u2019s resource folder.To see\nhow this works, consider the following folder structure:/\nmyapplication\n.\npy/\nschema\n.\nsql/\nstatic/\nstyle\n.\ncss/\ntemplates/\nlayout\n.\nhtml/\nindex\n.\nhtmlIf you want to open theschema.sqlfile you would do the\nfollowing:withapp\n.\nopen_resource\n(\n'schema.sql'\n)asf\n:contents=f\n.\nread\n()do_something_with\n(\ncontents\n)Parameters:resource\u2013 the name of the resource.To access resources within\nsubfolders use forward slashes as separator.mode\u2013 resource file opening mode, default is \u2018rb\u2019.record\n(\nfunc\n)\n\u00b6Registers a function that is called when the blueprint is\nregistered on the application.This function is called with the\nstate as argument as returned by themake_setup_state()method.record_once\n(\nfunc\n)\n\u00b6Works likerecord()but wraps the function in another\nfunction that will ensure the function is only called once.If the\nblueprint is registered a second time on the application, the\nfunction passed is not called.register\n(\napp\n,options\n,first_registration=False\n)\n\u00b6Called byFlask.register_blueprint()to register all views\nand callbacks registered on the blueprint with the application. Creates\naBlueprintSetupStateand calls eachrecord()callback\nwith it.Parameters:app\u2013 The application this blueprint is being registered with.options\u2013 Keyword arguments forwarded fromregister_blueprint()\n.first_registration\u2013 Whether this is the first time this\nblueprint has been registered on the application.register_error_handler\n(\ncode_or_exception\n,f\n)\n\u00b6Non-decorator version of theerrorhandler()error attach\nfunction, akin to theregister_error_handler()application-wide function of theFlaskobject but\nfor error handlers limited to this blueprint.ChangelogNew in version 0.11.root_path= None\n\u00b6Absolute path to the package on the filesystem. Used to look up\nresources contained in the package.route\n(\nrule\n,**options\n)\n\u00b6LikeFlask.route()but for a blueprint.The endpoint for theurl_for()function is prefixed with the name of the blueprint.send_static_file\n(\nfilename\n)\n\u00b6Function used internally to send static files from the static\nfolder to the browser.ChangelogNew in version 0.5.static_folder\n\u00b6The absolute path to the configured static folder.static_url_path\n\u00b6The URL prefix that the static route will be registered for.teardown_app_request\n(\nf\n)\n\u00b6LikeFlask.teardown_request()but for a blueprint.Such a\nfunction is executed when tearing down each request, even if outside of\nthe blueprint.teardown_request\n(\nf\n)\n\u00b6LikeFlask.teardown_request()but for a blueprint.This\nfunction is only executed when tearing down requests handled by a\nfunction of that blueprint.Teardown request functions are executed\nwhen the request context is popped, even when no actual request was\nperformed.template_folder= None\n\u00b6Location of the template files to be added to the template lookup.Noneif templates should not be added.url_defaults\n(\nf\n)\n\u00b6Callback function for URL defaults for this blueprint.It\u2019s called\nwith the endpoint and values and should update the values passed\nin place.url_value_preprocessor\n(\nf\n)\n\u00b6Registers a function as URL value preprocessor for this\nblueprint.It\u2019s called before the view functions are called and\ncan modify the url values provided.Incoming Request Data\n\u00b6classflask.\nRequest\n(\nenviron\n,populate_request=True\n,shallow=False\n)\n\u00b6The request object used by default in Flask.Remembers the\nmatched endpoint and view arguments.It is what ends up asrequest\n.If you want to replace\nthe request object used you can subclass this and setrequest_classto your subclass.The request object is aRequestsubclass and\nprovides all of the attributes Werkzeug defines plus a few Flask\nspecific ones.environ\n\u00b6The underlying WSGI environment.path\n\u00b6full_path\n\u00b6script_root\n\u00b6url\n\u00b6base_url\n\u00b6url_root\n\u00b6Provides different ways to look at the currentIRI\n.Imagine your application is\nlistening on the following application root:http\n:\n//\nwww\n.\nexample\n.\ncom\n/\nmyapplicationAnd a user requests the following URI:http://www.example.com/myapplication/%CF%80/page.html?x=yIn this case the values of the above mentioned attributes would be\nthe following:pathu'/\u03c0/page.html'full_pathu'/\u03c0/page.html?x=y'script_rootu'/myapplication'base_urlu'http://www.example.com/myapplication/\u03c0/page.html'urlu'http://www.example.com/myapplication/\u03c0/page.html?x=y'url_rootu'http://www.example.com/myapplication/'accept_charsets\n\u00b6List of charsets this client supports asCharsetAcceptobject.accept_encodings\n\u00b6List of encodings this client accepts.Encodings in a HTTP term\nare compression encodings such as gzip.For charsets have a look ataccept_charset\n.accept_languages\n\u00b6List of languages this client accepts asLanguageAcceptobject.accept_mimetypes\n\u00b6List of mimetypes this client supports asMIMEAcceptobject.access_route\n\u00b6If a forwarded header exists this is a list of all ip addresses\nfrom the client ip to the last proxy server.classmethodapplication\n(\nf\n)\n\u00b6Decorate a function as responder that accepts the request as first\nargument.This works like theresponder()decorator but the\nfunction is passed the request object as first argument and the\nrequest object will be closed automatically:@Request\n.\napplicationdefmy_wsgi_app\n(\nrequest\n):returnResponse\n(\n'Hello World!'\n)As of Werkzeug 0.14 HTTP exceptions are automatically caught and\nconverted to responses instead of failing.Parameters:\nf\u2013 the WSGI callable to decorateReturns:\na new WSGI callableargs\n\u00b6The parsed URL parameters (the part in the URL after the question\nmark).By default anImmutableMultiDictis returned from this function.This can be changed by settingparameter_storage_classto a different type.This might\nbe necessary if the order of the form data is important.authorization\n\u00b6TheAuthorizationobject in parsed form.base_urlLikeurlbut without the querystring\nSee also:trusted_hosts\n.blueprint\n\u00b6The name of the current blueprintcache_control\n\u00b6ARequestCacheControlobject\nfor the incoming cache control headers.close\n(\n)\n\u00b6Closes associated resources of this request object.This\ncloses all file handles explicitly.You can also use the request\nobject in a with statement which will automatically close it.ChangelogNew in version 0.9.content_encoding\n\u00b6The Content-Encoding entity-header field is used as a modifier to the\nmedia-type.When present, its value indicates what additional content\ncodings have been applied to the entity-body, and thus what decoding\nmechanisms must be applied in order to obtain the media-type\nreferenced by the Content-Type header field.ChangelogNew in version 0.9.content_length\n\u00b6The Content-Length entity-header field indicates the size of the\nentity-body in bytes or, in the case of the HEAD method, the size of\nthe entity-body that would have been sent had the request been a\nGET.content_md5\n\u00b6The Content-MD5 entity-header field, as defined in RFC 1864, is an\nMD5 digest of the entity-body for the purpose of providing an\nend-to-end message integrity check (MIC) of the entity-body.(Note:\na MIC is good for detecting accidental modification of the\nentity-body in transit, but is not proof against malicious attacks.)ChangelogNew in version 0.9.content_type\n\u00b6The Content-Type entity-header field indicates the media type of\nthe entity-body sent to the recipient or, in the case of the HEAD\nmethod, the media type that would have been sent had the request\nbeen a GET.cookies\n\u00b6Adictwith the contents of all cookies transmitted with\nthe request.data\n\u00b6Contains the incoming request data as string in case it came with\na mimetype Werkzeug does not handle.date\n\u00b6The Date general-header field represents the date and time at which\nthe message was originated, having the same semantics as orig-date\nin RFC 822.dict_storage_class\n\u00b6alias ofwerkzeug.datastructures.ImmutableTypeConversionDictendpoint\n\u00b6The endpoint that matched the request.This in combination withview_argscan be used to reconstruct the same or a\nmodified URL.If an exception happened when matching, this will\nbeNone\n.files\n\u00b6MultiDictobject containing\nall uploaded files.Each key infilesis the name from the<inputtype=\"file\"name=\"\">\n.Each value infilesis a\nWerkzeugFileStorageobject.It basically behaves like a standard file object you know from Python,\nwith the difference that it also has asave()function that can\nstore the file on the filesystem.Note thatfileswill only contain data if the request method was\nPOST, PUT or PATCH and the<form>that posted to the request hadenctype=\"multipart/form-data\"\n.It will be empty otherwise.See theMultiDict/FileStoragedocumentation for\nmore details about the used data structure.form\n\u00b6The form parameters.By default anImmutableMultiDictis returned from this function.This can be changed by settingparameter_storage_classto a different type.This might\nbe necessary if the order of the form data is important.Please keep in mind that file uploads will not end up here, but instead\nin thefilesattribute.ChangelogChanged in version 0.9:Previous to Werkzeug 0.9 this would only contain form data for POST\nand PUT requests.form_data_parser_class\n\u00b6alias ofwerkzeug.formparser.FormDataParserclassmethodfrom_values\n(\n*args\n,**kwargs\n)\n\u00b6Create a new request object based on the values provided.If\nenviron is given missing values are filled from there.This method is\nuseful for small scripts when you need to simulate a request from an URL.\nDo not use this method for unittesting, there is a full featured client\nobject (\nClient\n) that allows to create multipart requests,\nsupport for cookies etc.This accepts the same options as theEnvironBuilder\n.ChangelogChanged in version 0.5:This method now accepts the same arguments asEnvironBuilder\n.Because of this theenvironparameter is now calledenviron_overrides\n.Returns:\nrequest objectfull_pathRequested path as unicode, including the query string.get_data\n(\ncache=True\n,as_text=False\n,parse_form_data=False\n)\n\u00b6This reads the buffered incoming data from the client into one\nbytestring.By default this is cached but that behavior can be\nchanged by settingcachetoFalse\n.Usually it\u2019s a bad idea to call this method without checking the\ncontent length first as a client could send dozens of megabytes or more\nto cause memory problems on the server.Note that if the form data was already parsed this method will not\nreturn anything as form data parsing does not cache the data like\nthis method does.To implicitly invoke form data parsing function\nsetparse_form_datatoTrue\n.When this is done the return value\nof this method will be an empty string if the form parser handles\nthe data.This generally is not necessary as if the whole data is\ncached (which is the default) the form parser will used the cached\ndata to parse the form data.Please be generally aware of checking\nthe content length first in any case before calling this method\nto avoid exhausting server memory.Ifas_textis set toTruethe return value will be a decoded\nunicode string.ChangelogNew in version 0.9.get_json\n(\nforce=False\n,silent=False\n,cache=True\n)\n\u00b6Parse and return the data as JSON. If the mimetype does not\nindicate JSON (\napplication/json\n, seeis_json()\n), this returnsNoneunlessforceis\ntrue. If parsing fails,on_json_loading_failed()is called\nand its return value is used as the return value.Parameters:force\u2013 Ignore the mimetype and always try to parse JSON.silent\u2013 Silence parsing errors and returnNoneinstead.cache\u2013 Store the parsed JSON to return for subsequent\ncalls.headers\n\u00b6The headers from the WSGI environ as immutableEnvironHeaders\n.host\n\u00b6Just the host including the port if available.\nSee also:trusted_hosts\n.host_url\n\u00b6Just the host with scheme as IRI.\nSee also:trusted_hosts\n.if_match\n\u00b6An object containing all the etags in theIf-Matchheader.Return type:\nETagsif_modified_since\n\u00b6The parsedIf-Modified-Sinceheader as datetime object.if_none_match\n\u00b6An object containing all the etags in theIf-None-Matchheader.Return type:\nETagsif_range\n\u00b6The parsedIf-Rangeheader.ChangelogNew in version 0.7.Return type:\nIfRangeif_unmodified_since\n\u00b6The parsedIf-Unmodified-Sinceheader as datetime object.is_json\n\u00b6Check if the mimetype indicates JSON data, eitherapplication/jsonorapplication/*+json\n.ChangelogNew in version 0.11.is_multiprocess\n\u00b6boolean that isTrueif the application is served by\na WSGI server that spawns multiple processes.is_multithread\n\u00b6boolean that isTrueif the application is served by\na multithreaded WSGI server.is_run_once\n\u00b6boolean that isTrueif the application will be executed only\nonce in a process lifetime.This is the case for CGI for example,\nbut it\u2019s not guaranteed that the execution only happens one time.is_secure\n\u00b6Trueif the request is secure.is_xhr\n\u00b6True if the request was triggered via a JavaScript XMLHttpRequest.\nThis only works with libraries that support theX-Requested-Withheader and set it to \u201cXMLHttpRequest\u201d.Libraries that do that are\nprototype, jQuery and Mochikit and probably some more.Deprecated since version 0.13:X-Requested-Withis not standard and is unreliable.Changelogjson\n\u00b6This will contain the parsed JSON data if the mimetype indicates\nJSON (\napplication/json\n, seeis_json()\n), otherwise it\nwill beNone\n.list_storage_class\n\u00b6alias ofwerkzeug.datastructures.ImmutableListmake_form_data_parser\n(\n)\n\u00b6Creates the form data parser. Instantiates theform_data_parser_classwith some parameters.ChangelogNew in version 0.8.max_content_length\n\u00b6Read-only view of theMAX_CONTENT_LENGTHconfig key.max_forwards\n\u00b6The Max-Forwards request-header field provides a mechanism with the\nTRACE and OPTIONS methods to limit the number of proxies or gateways\nthat can forward the request to the next inbound server.method\n\u00b6The request method. (For example'GET'or'POST'\n).mimetype\n\u00b6Likecontent_type\n, but without parameters (eg, without\ncharset, type etc.) and always lowercase.For example if the content\ntype istext/HTML;charset=utf-8the mimetype would be'text/html'\n.mimetype_params\n\u00b6The mimetype parameters as dict.For example if the content\ntype istext/html;charset=utf-8the params would be{'charset':'utf-8'}\n.on_json_loading_failed\n(\ne\n)\n\u00b6Called ifget_json()parsing fails and isn\u2019t silenced. If\nthis method returns a value, it is used as the return value forget_json()\n. The default implementation raises aBadRequestexception.ChangelogChanged in version 0.10:Raise aBadRequesterror instead of returning an error\nmessage as JSON. If you want that behavior you can add it by\nsubclassing.New in version 0.8.parameter_storage_class\n\u00b6alias ofwerkzeug.datastructures.ImmutableMultiDictpathRequested path as unicode.This works a bit like the regular path\ninfo in the WSGI environment but will always include a leading slash,\neven if the URL root is accessed.pragma\n\u00b6The Pragma general-header field is used to include\nimplementation-specific directives that might apply to any recipient\nalong the request/response chain.All pragma directives specify\noptional behavior from the viewpoint of the protocol; however, some\nsystems MAY require that behavior be consistent with the directives.query_string\n\u00b6The URL parameters as raw bytestring.range\n\u00b6The parsedRangeheader.ChangelogNew in version 0.7.Return type:\nRangereferrer\n\u00b6The Referer[sic] request-header field allows the client to specify,\nfor the server\u2019s benefit, the address (URI) of the resource from which\nthe Request-URI was obtained (the \u201creferrer\u201d, although the header\nfield is misspelled).remote_addr\n\u00b6The remote address of the client.remote_user\n\u00b6If the server supports user authentication, and the script is\nprotected, this attribute contains the username the user has\nauthenticated as.routing_exception= None\n\u00b6If matching the URL failed, this is the exception that will be\nraised / was raised as part of the request handling.This is\nusually aNotFoundexception or\nsomething similar.scheme\n\u00b6URL scheme (http or https).ChangelogNew in version 0.7.script_rootThe root path of the script without the trailing slash.stream\n\u00b6If the incoming form data was not encoded with a known mimetype\nthe data is stored unmodified in this stream for consumption.Most\nof the time it is a better idea to usedatawhich will give\nyou that data as a string.The stream only returns the data once.Unlikeinput_streamthis stream is properly guarded that you\ncan\u2019t accidentally read past the length of the input.Werkzeug will\ninternally always refer to this stream to read data which makes it\npossible to wrap this object with a stream that does filtering.ChangelogChanged in version 0.9:This stream is now always available but might be consumed by the\nform parser later on.Previously the stream was only set if no\nparsing happened.urlThe reconstructed current URL as IRI.\nSee also:trusted_hosts\n.url_charset\n\u00b6The charset that is assumed for URLs.Defaults to the value\nofcharset\n.ChangelogNew in version 0.6.url_rootThe full URL root (with hostname), this is the application\nroot as IRI.\nSee also:trusted_hosts\n.url_rule= None\n\u00b6The internal URL rule that matched the request.This can be\nuseful to inspect which methods are allowed for the URL from\na before/after handler (\nrequest.url_rule.methods\n) etc.\nThough if the request\u2019s method was invalid for the URL rule,\nthe valid list is available inrouting_exception.valid_methodsinstead (an attribute of the Werkzeug exceptionMethodNotAllowed\n)\nbecause the request was never internally bound.ChangelogNew in version 0.6.user_agent\n\u00b6The current user agent.values\n\u00b6Awerkzeug.datastructures.CombinedMultiDictthat combinesargsandform\n.view_args= None\n\u00b6A dict of view arguments that matched the request.If an exception\nhappened when matching, this will beNone\n.want_form_data_parsed\n\u00b6Returns True if the request method carries content.As of\nWerkzeug 0.9 this will be the case if a content type is transmitted.ChangelogNew in version 0.8.flask.\nrequest\n\u00b6To access incoming request data, you can use the globalrequestobject.Flask parses incoming request data for you and gives you\naccess to it through that global object.Internally Flask makes\nsure that you always get the correct data for the active thread if you\nare in a multithreaded environment.This is a proxy.SeeNotes On Proxiesfor more information.The request object is an instance of aRequestsubclass and provides all of the attributes Werkzeug defines.This\njust shows a quick overview of the most important ones.Response Objects\n\u00b6classflask.\nResponse\n(\nresponse=None\n,status=None\n,headers=None\n,mimetype=None\n,content_type=None\n,direct_passthrough=False\n)\n\u00b6The response object that is used by default in Flask.Works like the\nresponse object from Werkzeug but is set to have an HTML mimetype by\ndefault.Quite often you don\u2019t have to create this object yourself becausemake_response()will take care of that for you.If you want to replace the response object used you can subclass this and\nsetresponse_classto your subclass.Changed in version 1.0:JSON support is added to the response, like the request. This is useful\nwhen testing to get the test client response data as JSON.Changed in version 1.0:Addedmax_cookie_size\n.Changelogheaders\n\u00b6AHeadersobject representing the response headers.status\n\u00b6A string with a response status.status_code\n\u00b6The response status as integer.data\n\u00b6A descriptor that callsget_data()andset_data()\n.This\nshould not be used and will eventually get deprecated.get_json\n(\nforce=False\n,silent=False\n,cache=True\n)\n\u00b6Parse and return the data as JSON. If the mimetype does not\nindicate JSON (\napplication/json\n, seeis_json()\n), this returnsNoneunlessforceis\ntrue. If parsing fails,on_json_loading_failed()is called\nand its return value is used as the return value.Parameters:force\u2013 Ignore the mimetype and always try to parse JSON.silent\u2013 Silence parsing errors and returnNoneinstead.cache\u2013 Store the parsed JSON to return for subsequent\ncalls.is_json\n\u00b6Check if the mimetype indicates JSON data, eitherapplication/jsonorapplication/*+json\n.ChangelogNew in version 0.11.max_cookie_size\n\u00b6Read-only view of theMAX_COOKIE_SIZEconfig key.Seemax_cookie_sizein\nWerkzeug\u2019s docs.mimetype\n\u00b6The mimetype (content type without charset etc.)set_cookie\n(\nkey\n,value=''\n,max_age=None\n,expires=None\n,path='/'\n,domain=None\n,secure=False\n,httponly=False\n,samesite=None\n)\n\u00b6Sets a cookie. The parameters are the same as in the cookieMorselobject in the Python standard library but it accepts unicode data, too.A warning is raised if the size of the cookie header exceedsmax_cookie_size\n, but the header will still be set.Parameters:key\u2013 the key (name) of the cookie to be set.value\u2013 the value of the cookie.max_age\u2013 should be a number of seconds, orNone(default) if\nthe cookie should last only as long as the client\u2019s\nbrowser session.expires\u2013 should be adatetimeobject or UNIX timestamp.path\u2013 limits the cookie to a given path, per default it will\nspan the whole domain.domain\u2013 if you want to set a cross-domain cookie.For example,domain=\".example.com\"will set a cookie that is\nreadable by the domainwww.example.com\n,foo.example.cometc.Otherwise, a cookie will only\nbe readable by the domain that set it.secure\u2013 IfTrue\n, the cookie will only be available via HTTPShttponly\u2013 disallow JavaScript to access the cookie.This is an\nextension to the cookie standard and probably not\nsupported by all browsers.samesite\u2013 Limits the scope of the cookie such that it will only\nbe attached to requests if those requests are\n\u201csame-site\u201d.Sessions\n\u00b6If you have setFlask.secret_key(or configured it fromSECRET_KEY\n) you can use sessions in Flask applications. A session makes\nit possible to remember information from one request to another. The way Flask\ndoes this is by using a signed cookie. The user can look at the session\ncontents, but can\u2019t modify it unless they know the secret key, so make sure to\nset that to something complex and unguessable.To access the current session you can use thesessionobject:classflask.\nsession\n\u00b6The session object works pretty much like an ordinary dict, with the\ndifference that it keeps track on modifications.This is a proxy.SeeNotes On Proxiesfor more information.The following attributes are interesting:new\n\u00b6Trueif the session is new,Falseotherwise.modified\n\u00b6Trueif the session object detected a modification.Be advised\nthat modifications on mutable structures are not picked up\nautomatically, in that situation you have to explicitly set the\nattribute toTrueyourself.Here an example:# this change is not picked up because a mutable object (here# a list) is changed.session\n[\n'objects'\n]\n.\nappend\n(\n42\n)# so mark it as modified yourselfsession\n.\nmodified=Truepermanent\n\u00b6If set toTruethe session lives forpermanent_session_lifetimeseconds.The\ndefault is 31 days.If set toFalse(which is the default) the\nsession will be deleted when the user closes the browser.Session Interface\n\u00b6ChangelogNew in version 0.8.The session interface provides a simple way to replace the session\nimplementation that Flask is using.classflask.sessions.\nSessionInterface\n\u00b6The basic interface you have to implement in order to replace the\ndefault session interface which uses werkzeug\u2019s securecookie\nimplementation.The only methods you have to implement areopen_session()andsave_session()\n, the others have\nuseful defaults which you don\u2019t need to change.The session object returned by theopen_session()method has to\nprovide a dictionary like interface plus the properties and methods\nfrom theSessionMixin\n.We recommend just subclassing a dict\nand adding that mixin:classSession\n(\ndict\n,SessionMixin\n):passIfopen_session()returnsNoneFlask will call intomake_null_session()to create a session that acts as replacement\nif the session support cannot work because some requirement is not\nfulfilled.The defaultNullSessionclass that is created\nwill complain that the secret key was not set.To replace the session interface on an application all you have to do\nis to assignflask.Flask.session_interface\n:app=Flask\n(\n__name__\n)app\n.\nsession_interface=MySessionInterface\n()ChangelogNew in version 0.8.get_cookie_domain\n(\napp\n)\n\u00b6Returns the domain that should be set for the session cookie.UsesSESSION_COOKIE_DOMAINif it is configured, otherwise\nfalls back to detecting the domain based onSERVER_NAME\n.Once detected (or if not set at all),SESSION_COOKIE_DOMAINis\nupdated to avoid re-running the logic.get_cookie_httponly\n(\napp\n)\n\u00b6Returns True if the session cookie should be httponly.This\ncurrently just returns the value of theSESSION_COOKIE_HTTPONLYconfig var.get_cookie_path\n(\napp\n)\n\u00b6Returns the path for which the cookie should be valid.The\ndefault implementation uses the value from theSESSION_COOKIE_PATHconfig var if it\u2019s set, and falls back toAPPLICATION_ROOTor\nuses/if it\u2019sNone\n.get_cookie_samesite\n(\napp\n)\n\u00b6Return'Strict'or'Lax'if the cookie should use theSameSiteattribute. This currently just returns the value of\ntheSESSION_COOKIE_SAMESITEsetting.get_cookie_secure\n(\napp\n)\n\u00b6Returns True if the cookie should be secure.This currently\njust returns the value of theSESSION_COOKIE_SECUREsetting.get_expiration_time\n(\napp\n,session\n)\n\u00b6A helper method that returns an expiration date for the session\norNoneif the session is linked to the browser session.The\ndefault implementation returns now + the permanent session\nlifetime configured on the application.is_null_session\n(\nobj\n)\n\u00b6Checks if a given object is a null session.Null sessions are\nnot asked to be saved.This checks if the object is an instance ofnull_session_classby default.make_null_session\n(\napp\n)\n\u00b6Creates a null session which acts as a replacement object if the\nreal session support could not be loaded due to a configuration\nerror.This mainly aids the user experience because the job of the\nnull session is to still support lookup without complaining but\nmodifications are answered with a helpful error message of what\nfailed.This creates an instance ofnull_session_classby default.null_session_class\n\u00b6make_null_session()will look here for the class that should\nbe created when a null session is requested.Likewise theis_null_session()method will perform a typecheck against\nthis type.alias ofNullSessionopen_session\n(\napp\n,request\n)\n\u00b6This method has to be implemented and must either returnNonein case the loading failed because of a configuration error or an\ninstance of a session object which implements a dictionary like\ninterface + the methods and attributes onSessionMixin\n.pickle_based= False\n\u00b6A flag that indicates if the session interface is pickle based.\nThis can be used by Flask extensions to make a decision in regards\nto how to deal with the session object.ChangelogNew in version 0.10.save_session\n(\napp\n,session\n,response\n)\n\u00b6This is called for actual sessions returned byopen_session()at the end of the request.This is still called during a request\ncontext so if you absolutely need access to the request you can do\nthat.should_set_cookie\n(\napp\n,session\n)\n\u00b6Used by session backends to determine if aSet-Cookieheader\nshould be set for this session cookie for this response. If the session\nhas been modified, the cookie is set. If the session is permanent and\ntheSESSION_REFRESH_EACH_REQUESTconfig is true, the cookie is\nalways set.This check is usually skipped if the session was deleted.ChangelogNew in version 0.11.classflask.sessions.\nSecureCookieSessionInterface\n\u00b6The default session interface that stores sessions in signed cookies\nthrough theitsdangerousmodule.staticdigest_method\n(\n)\n\u00b6the hash function to use for the signature.The default is sha1key_derivation= 'hmac'\n\u00b6the name of the itsdangerous supported key derivation.The default\nis hmac.open_session\n(\napp\n,request\n)\n\u00b6This method has to be implemented and must either returnNonein case the loading failed because of a configuration error or an\ninstance of a session object which implements a dictionary like\ninterface + the methods and attributes onSessionMixin\n.salt= 'cookie-session'\n\u00b6the salt that should be applied on top of the secret key for the\nsigning of cookie based sessions.save_session\n(\napp\n,session\n,response\n)\n\u00b6This is called for actual sessions returned byopen_session()at the end of the request.This is still called during a request\ncontext so if you absolutely need access to the request you can do\nthat.serializer= <flask.json.tag.TaggedJSONSerializer object>\n\u00b6A python serializer for the payload.The default is a compact\nJSON derived serializer with support for some extra Python types\nsuch as datetime objects or tuples.session_class\n\u00b6alias ofSecureCookieSessionclassflask.sessions.\nSecureCookieSession\n(\ninitial=None\n)\n\u00b6Base class for sessions based on signed cookies.This session backend will set themodifiedandaccessedattributes. It cannot reliably track whether a\nsession is new (vs. empty), sonewremains hard coded toFalse\n.accessed= False\n\u00b6header, which allows caching proxies to cache different pages for\ndifferent users.get\n(\nk\n[\n,d\n]\n)\u2192 D[k] if k in D, else d.d defaults to None.\n\u00b6modified= False\n\u00b6When data is changed, this is set toTrue\n. Only the session\ndictionary itself is tracked; if the session contains mutable\ndata (for example a nested dict) then this must be set toTruemanually when modifying that data. The session cookie\nwill only be written to the response if this isTrue\n.setdefault\n(\nk\n[\n,d\n]\n)\u2192 D.get(k,d), also set D[k]=d if k not in D\n\u00b6classflask.sessions.\nNullSession\n(\ninitial=None\n)\n\u00b6Class used to generate nicer error messages if sessions are not\navailable.Will still allow read-only access to the empty session\nbut fail on setting.classflask.sessions.\nSessionMixin\n\u00b6Expands a basic dictionary with session attributes.accessed= True\n\u00b6Some implementations can detect when session data is read or\nwritten and set this when that happens. The mixin default is hard\ncoded toTrue\n.modified= True\n\u00b6Some implementations can detect changes to the session and set\nthis when that happens. The mixin default is hard coded toTrue\n.permanent\n\u00b6This reflects the'_permanent'key in the dict.NoticeThePERMANENT_SESSION_LIFETIMEconfig key can also be an integer\nstarting with Flask 0.8.Either catch this down yourself or use\nthepermanent_session_lifetimeattribute on the\napp which converts the result to an integer automatically.Test Client\n\u00b6classflask.testing.\nFlaskClient\n(\n*args\n,**kwargs\n)\n\u00b6Works like a regular Werkzeug test client but has some knowledge about\nhow Flask works to defer the cleanup of the request context stack to the\nend of awithbody when used in awithstatement.For general\ninformation about how to use this class refer towerkzeug.test.Client\n.ChangelogChanged in version 0.12:app.test_client()includes preset default environment, which can be\nset after instantiation of theapp.test_client()object inclient.environ_base\n.Basic usage is outlined in theTesting Flask Applicationschapter.open\n(\n*args\n,**kwargs\n)\n\u00b6Takes the same arguments as theEnvironBuilderclass with\nsome additions:You can provide aEnvironBuilderor a WSGI\nenvironment as only argument instead of theEnvironBuilderarguments and two optional keyword arguments (\nas_tuple\n,buffered\n)\nthat change the type of the return value or the way the application is\nexecuted.ChangelogChanged in version 0.5:If a dict is provided as file in the dict for thedataparameter\nthe content type has to be calledcontent_typenow instead ofmimetype\n.This change was made for consistency withwerkzeug.FileWrapper\n.Thefollow_redirectsparameter was added toopen()\n.Additional parameters:Parameters:as_tuple\u2013 Returns a tuple in the form(environ,result)buffered\u2013 Set this to True to buffer the application run.\nThis will automatically close the application for\nyou as well.follow_redirects\u2013 Set this to True if theClientshould\nfollow HTTP redirects.session_transaction\n(\n*args\n,**kwargs\n)\n\u00b6When used in combination with awithstatement this opens a\nsession transaction.This can be used to modify the session that\nthe test client uses.Once thewithblock is left the session is\nstored back.withclient\n.\nsession_transaction\n()assession\n:session\n[\n'value'\n]=42Internally this is implemented by going through a temporary test\nrequest context and since session handling could depend on\nrequest variables this function accepts the same arguments astest_request_context()which are directly\npassed through.Test CLI Runner\n\u00b6classflask.testing.\nFlaskCliRunner\n(\napp\n,**kwargs\n)\n\u00b6ACliRunnerfor testing a Flask app\u2019s\nCLI commands. Typically created usingtest_cli_runner()\n. SeeTesting CLI Commands\n.invoke\n(\ncli=None\n,args=None\n,**kwargs\n)\n\u00b6Invokes a CLI command in an isolated environment. SeeCliRunner.invokefor\nfull method documentation. SeeTesting CLI Commandsfor examples.If theobjargument is not given, passes an instance ofScriptInfothat knows how to load the Flask\napp being tested.Parameters:cli\u2013 Command object to invoke. Default is the app\u2019scligroup.args\u2013 List of strings to invoke the command with.Returns:\naResultobject.Application Globals\n\u00b6To share data that is valid for one request only from one function to\nanother, a global variable is not good enough because it would break in\nthreaded environments.Flask provides you with a special object that\nensures it is only valid for the active request and that will return\ndifferent values for each request.In a nutshell: it does the right\nthing, like it does forrequestandsession\n.flask.\ng\n\u00b6A namespace object that can store data during anapplication context\n. This is an instance ofFlask.app_ctx_globals_class\n, which defaults toctx._AppCtxGlobals\n.This is a good place to store resources during a request. During\ntesting, you can use theFaking Resources and Contextpattern to\npre-configure such resources.This is a proxy. SeeNotes On Proxiesfor more information.ChangelogChanged in version 0.10:Bound to the application context instead of the request context.classflask.ctx.\n_AppCtxGlobals\n\u00b6A plain object. Used as a namespace for storing data during an\napplication context.Creating an app context automatically creates this object, which is\nmade available as thegproxy.'key' in gCheck whether an attribute is present.ChangelogNew in version 0.10.iter(g)Return an iterator over the attribute names.ChangelogNew in version 0.10.get\n(\nname\n,default=None\n)\n\u00b6Get an attribute by name, or a default value. Likedict.get()\n.Parameters:name\u2013 Name of attribute to get.default\u2013 Value to return if the attribute is not present.ChangelogNew in version 0.10.pop\n(\nname\n,default=<object object>\n)\n\u00b6Get and remove an attribute by name. Likedict.pop()\n.Parameters:name\u2013 Name of attribute to pop.default\u2013 Value to return if the attribute is not present,\ninstead of raise aKeyError\n.ChangelogNew in version 0.11.setdefault\n(\nname\n,default=None\n)\n\u00b6Get the value of an attribute if it is present, otherwise\nset and return a default value. Likedict.setdefault()\n.Parameters:\nname\u2013 Name of attribute to get.Param:\ndefault: Value to set and return if the attribute is not\npresent.ChangelogNew in version 0.11.Useful Functions and Classes\n\u00b6flask.\ncurrent_app\n\u00b6A proxy to the application handling the current request. This is\nuseful to access the application without needing to import it, or if\nit can\u2019t be imported, such as when using the application factory\npattern or in blueprints and extensions.This is only available when anapplication contextis pushed. This happens\nautomatically during requests and CLI commands. It can be controlled\nmanually withapp_context()\n.This is a proxy. SeeNotes On Proxiesfor more information.flask.\nhas_request_context\n(\n)\n\u00b6If you have code that wants to test if a request context is there or\nnot this function can be used.For instance, you may want to take advantage\nof request information if the request object is available, but fail\nsilently if it is unavailable.classUser\n(\ndb\n.\nModel\n):def__init__\n(\nself\n,username\n,remote_addr\n=\nNone\n):self\n.\nusername=usernameifremote_addrisNoneandhas_request_context\n():remote_addr=request\n.\nremote_addrself\n.\nremote_addr=remote_addrAlternatively you can also just test any of the context bound objects\n(such asrequestorgfor truthness):classUser\n(\ndb\n.\nModel\n):def__init__\n(\nself\n,username\n,remote_addr\n=\nNone\n):self\n.\nusername=usernameifremote_addrisNoneandrequest\n:remote_addr=request\n.\nremote_addrself\n.\nremote_addr=remote_addrChangelogNew in version 0.7.flask.\ncopy_current_request_context\n(\nf\n)\n\u00b6A helper function that decorates a function to retain the current\nrequest context.This is useful when working with greenlets.The moment\nthe function is decorated a copy of the request context is created and\nthen pushed when the function is called.Example:importgeventfromflaskimportcopy_current_request_context@app\n.\nroute\n(\n'/'\n)defindex\n():@copy_current_request_contextdefdo_some_work\n():# do some work here, it can access flask.request like you# would otherwise in the view function....gevent\n.\nspawn\n(\ndo_some_work\n)return'Regular response'ChangelogNew in version 0.10.flask.\nhas_app_context\n(\n)\n\u00b6Works likehas_request_context()but for the application\ncontext.You can also just do a boolean check on thecurrent_appobject instead.ChangelogNew in version 0.9.flask.\nurl_for\n(\nendpoint\n,**values\n)\n\u00b6Generates a URL to the given endpoint with the method provided.Variable arguments that are unknown to the target endpoint are appended\nto the generated URL as query arguments.If the value of a query argument\nisNone\n, the whole pair is skipped.In case blueprints are active\nyou can shortcut references to the same blueprint by prefixing the\nlocal endpoint with a dot (\n.\n).This will reference the index function local to the current blueprint:url_for\n(\n'.index'\n)For more information, head over to theQuickstart\n.To integrate applications,Flaskhas a hook to intercept URL build\nerrors throughFlask.url_build_error_handlers\n.Theurl_forfunction results in aBuildErrorwhen the current\napp does not have a URL for the given endpoint and values.When it does, thecurrent_appcalls itsurl_build_error_handlersif\nit is notNone\n, which can return a string to use as the result ofurl_for(instead ofurl_for\n\u2019s default to raise theBuildErrorexception) or re-raise the exception.\nAn example:defexternal_url_handler\n(\nerror\n,endpoint\n,values\n):\"Looks up an external URL when `url_for` cannot build a URL.\"# This is an example of hooking the build_error_handler.# Here, lookup_url is some utility function you've built# which looks up the endpoint in some external URL registry.url=lookup_url\n(\nendpoint\n,**\nvalues\n)ifurlisNone\n:# External lookup did not have a URL.# Re-raise the BuildError, in context of original traceback.exc_type\n,exc_value\n,tb=sys\n.\nexc_info\n()ifexc_valueiserror\n:raiseexc_type\n,exc_value\n,tbelse\n:raiseerror# url_for will use this result, instead of raising BuildError.returnurlapp\n.\nurl_build_error_handlers\n.\nappend\n(\nexternal_url_handler\n)Here,erroris the instance ofBuildError\n, andendpointandvaluesare the arguments passed intourl_for\n.Note\nthat this is for building URLs outside the current application, and not for\nhandling 404 NotFound errors.ChangelogNew in version 0.10:The_schemeparameter was added.New in version 0.9:The_anchorand_methodparameters were added.New in version 0.9:CallsFlask.handle_build_error()onBuildError\n.Parameters:endpoint\u2013 the endpoint of the URL (name of the function)values\u2013 the variable arguments of the URL rule_external\u2013 if set toTrue\n, an absolute URL is generated. Server\naddress can be changed viaSERVER_NAMEconfiguration variable which\ndefaults tolocalhost\n._scheme\u2013 a string specifying the desired URL scheme. The_externalparameter must be set toTrueor aValueErroris raised. The default\nbehavior uses the same scheme as the current request, orPREFERRED_URL_SCHEMEfrom theapp configurationif no\nrequest context is available. As of Werkzeug 0.10, this also can be set\nto an empty string to build protocol-relative URLs._anchor\u2013 if provided this is added as anchor to the URL._method\u2013 if provided this explicitly specifies an HTTP method.flask.\nabort\n(\nstatus\n,*args\n,**kwargs\n)\n\u00b6Raises anHTTPExceptionfor the given status code or WSGI\napplication:abort\n(\n404\n)# 404 Not Foundabort\n(\nResponse\n(\n'Hello World'\n))Can be passed a WSGI application or a status code.If a status code is\ngiven it\u2019s looked up in the list of exceptions and will raise that\nexception, if passed a WSGI application it will wrap it in a proxy WSGI\nexception and raise that:abort\n(\n404\n)abort\n(\nResponse\n(\n'Hello World'\n))flask.\nredirect\n(\nlocation\n,code=302\n,Response=None\n)\n\u00b6Returns a response object (a WSGI application) that, if called,\nredirects the client to the target location.Supported codes are 301,\n302, 303, 305, and 307.300 is not supported because it\u2019s not a real\nredirect and 304 because it\u2019s the answer for a request with a request\nwith defined If-Modified-Since headers.ChangelogNew in version 0.10:The class used for the Response object can now be passed in.New in version 0.6:The location can now be a unicode string that is encoded using\ntheiri_to_uri()function.Parameters:location\u2013 the location the response should redirect to.code\u2013 the redirect status code. defaults to 302.Response(\nclass\n) \u2013 a Response class to use when instantiating a\nresponse. The default iswerkzeug.wrappers.Responseif\nunspecified.flask.\nmake_response\n(\n*args\n)\n\u00b6Sometimes it is necessary to set additional headers in a view.Because\nviews do not have to return response objects but can return a value that\nis converted into a response object by Flask itself, it becomes tricky to\nadd headers to it.This function can be called instead of using a return\nand you will get a response object which you can use to attach headers.If view looked like this and you want to add a new header:defindex\n():returnrender_template\n(\n'index.html'\n,foo\n=\n42\n)You can now do something like this:defindex\n():response=make_response\n(\nrender_template\n(\n'index.html'\n,foo\n=\n42\n))response\n.\nheaders\n[\n'X-Parachutes'\n]='parachutes are cool'returnresponseThis function accepts the very same arguments you can return from a\nview function.This for example creates a response with a 404 error\ncode:response=make_response\n(\nrender_template\n(\n'not_found.html'\n),404\n)The other use case of this function is to force the return value of a\nview function into a response which is helpful with view\ndecorators:response=make_response\n(\nview_function\n())response\n.\nheaders\n[\n'X-Parachutes'\n]='parachutes are cool'Internally this function does the following things:if no arguments are passed, it creates a new response argumentif one argument is passed,flask.Flask.make_response()is invoked with it.if more than one argument is passed, the arguments are passed\nto theflask.Flask.make_response()function as tuple.ChangelogNew in version 0.6.flask.\nafter_this_request\n(\nf\n)\n\u00b6Executes a function after this request.This is useful to modify\nresponse objects.The function is passed the response object and has\nto return the same or a new one.Example:@app\n.\nroute\n(\n'/'\n)defindex\n():@after_this_requestdefadd_header\n(\nresponse\n):response\n.\nheaders\n[\n'X-Foo'\n]='Parachute'returnresponsereturn'Hello World!'This is more useful if a function other than the view function wants to\nmodify a response.For instance think of a decorator that wants to add\nsome headers without converting the return value into a response object.ChangelogNew in version 0.9.flask.\nsend_file\n(\nfilename_or_fp\n,mimetype=None\n,as_attachment=False\n,attachment_filename=None\n,add_etags=True\n,cache_timeout=None\n,conditional=False\n,last_modified=None\n)\n\u00b6Sends the contents of a file to the client.This will use the\nmost efficient method available and configured.By default it will\ntry to use the WSGI server\u2019s file_wrapper support.Alternatively\nyou can set the application\u2019suse_x_sendfileattribute\ntoTrueto directly emit anX-Sendfileheader.This however\nrequires support of the underlying webserver forX-Sendfile\n.By default it will try to guess the mimetype for you, but you can\nalso explicitly provide one.For extra security you probably want\nto send certain files as attachment (HTML for instance).The mimetype\nguessing requires afilenameor anattachment_filenameto be\nprovided.ETags will also be attached automatically if afilenameis provided. You\ncan turn this off by settingadd_etags=False\n.Ifconditional=Trueandfilenameis provided, this method will try to\nupgrade the response stream to support range requests.This will allow\nthe request to be answered with partial content response.Please never pass filenames to this function from user sources;\nyou should usesend_from_directory()instead.Changed in version 1.0:UTF-8 filenames, as specified inRFC 2231\n, are supported.ChangelogChanged in version 0.12:The filename is no longer automatically inferred from file objects. If\nyou want to use automatic mimetype and etag support, pass a filepath viafilename_or_fporattachment_filename\n.Changed in version 0.12:Theattachment_filenameis preferred overfilenamefor MIME-type\ndetection.Changed in version 0.9:cache_timeout pulls its default from application config, when None.Changed in version 0.7:mimetype guessing and etag support for file objects was\ndeprecated because it was unreliable.Pass a filename if you are\nable to, otherwise attach an etag yourself.This functionality\nwill be removed in Flask 1.0New in version 0.5:Theadd_etags\n,cache_timeoutandconditionalparameters were\nadded.The default behavior is now to attach etags.New in version 0.2.Parameters:filename_or_fp\u2013 the filename of the file to send.\nThis is relative to theroot_pathif a relative path is specified.\nAlternatively a file object might be provided in\nwhich caseX-Sendfilemight not work and fall\nback to the traditional method.Make sure that the\nfile pointer is positioned at the start of data to\nsend before callingsend_file()\n.mimetype\u2013 the mimetype of the file if provided. If a file path is\ngiven, auto detection happens as fallback, otherwise an\nerror will be raised.as_attachment\u2013 set toTrueif you want to send this file with\naContent-Disposition:attachmentheader.attachment_filename\u2013 the filename for the attachment if it\ndiffers from the file\u2019s filename.add_etags\u2013 set toFalseto disable attaching of etags.conditional\u2013 set toTrueto enable conditional responses.cache_timeout\u2013 the timeout in seconds for the headers. WhenNone(default), this value is set byget_send_file_max_age()ofcurrent_app\n.last_modified\u2013 set theLast-Modifiedheader to this value,\nadatetimeor timestamp.\nIf a file was passed, this overrides its mtime.flask.\nsend_from_directory\n(\ndirectory\n,filename\n,**options\n)\n\u00b6Send a file from a given directory withsend_file()\n.This\nis a secure way to quickly expose static files from an upload folder\nor something similar.Example usage:@app\n.\nroute\n(\n'/uploads/<path:filename>'\n)defdownload_file\n(\nfilename\n):returnsend_from_directory\n(\napp\n.\nconfig\n[\n'UPLOAD_FOLDER'\n],filename\n,as_attachment\n=\nTrue\n)Sending files and PerformanceIt is strongly recommended to activate eitherX-Sendfilesupport in\nyour webserver or (if no authentication happens) to tell the webserver\nto serve files for the given path on its own without calling into the\nweb application for improved performance.ChangelogNew in version 0.5.Parameters:directory\u2013 the directory where all the files are stored.filename\u2013 the filename relative to that directory to\ndownload.options\u2013 optional keyword arguments that are directly\nforwarded tosend_file()\n.flask.\nsafe_join\n(\ndirectory\n,*pathnames\n)\n\u00b6Safely joindirectoryand zero or more untrustedpathnamescomponents.Example usage:@app\n.\nroute\n(\n'/wiki/<path:filename>'\n)defwiki_page\n(\nfilename\n):filename=safe_join\n(\napp\n.\nconfig\n[\n'WIKI_FOLDER'\n],filename\n)withopen\n(\nfilename\n,'rb'\n)asfd\n:content=fd\n.\nread\n()# Read and process the file content...Parameters:directory\u2013 the trusted base directory.pathnames\u2013 the untrusted pathnames relative to that directory.Raises:\nNotFoundif one or more passed\npaths fall out of its boundaries.flask.\nescape\n(\ns\n)\u2192 markup\n\u00b6Convert the characters &, <, >, \u2018, and \u201d in string s to HTML-safe\nsequences.Use this if you need to display text that might contain\nsuch characters in HTML.Marks return value as markup string.classflask.\nMarkup\n\u00b6Marks a string as being safe for inclusion in HTML/XML output without\nneeding to be escaped.This implements the__html__interface a couple\nof frameworks and web applications use.Markupis a direct\nsubclass ofunicodeand provides all the methods ofunicodejust that\nit escapes arguments passed and always returnsMarkup\n.Theescapefunction returns markup objects so that double escaping can\u2019t\nhappen.The constructor of theMarkupclass can be used for three\ndifferent things:When passed an unicode object it\u2019s assumed to be safe,\nwhen passed an object with an HTML representation (has an__html__method) that representation is used, otherwise the object passed is\nconverted into a unicode string and then assumed to be safe:>>>Markup\n(\n\"Hello <em>World</em>!\"\n)Markup(u'Hello <em>World</em>!')>>>classFoo\n(\nobject\n):...def__html__\n(\nself\n):...return'<a href=\"#\">foo</a>'...>>>Markup\n(\nFoo\n())Markup(u'<a href=\"#\">foo</a>')If you want object passed being always treated as unsafe you can use theescape()classmethod to create aMarkupobject:>>>Markup\n.\nescape\n(\n\"Hello <em>World</em>!\"\n)Markup(u'Hello &lt;em&gt;World&lt;/em&gt;!')Operations on a markup string are markup aware which means that all\narguments are passed through theescape()function:>>>em=Markup\n(\n\"<em>\n%s\n</em>\"\n)>>>em%\"foo & bar\"Markup(u'<em>foo &amp; bar</em>')>>>strong=Markup\n(\n\"<strong>\n%(text)s\n</strong>\"\n)>>>strong%{\n'text'\n:'<blink>hacker here</blink>'\n}Markup(u'<strong>&lt;blink&gt;hacker here&lt;/blink&gt;</strong>')>>>Markup\n(\n\"<em>Hello</em> \"\n)+\"<foo>\"Markup(u'<em>Hello</em> &lt;foo&gt;')classmethodescape\n(\ns\n)\n\u00b6Escape the string.Works likeescape()with the difference\nthat for subclasses ofMarkupthis function would return the\ncorrect subclass.striptags\n(\n)\n\u00b6Unescape markup into an text_type string and strip all tags.This\nalso resolves known HTML4 and XHTML entities.Whitespace is\nnormalized to one:>>>Markup\n(\n\"Main &raquo;<em>About</em>\"\n)\n.\nstriptags\n()u'Main \\xbb About'unescape\n(\n)\n\u00b6Unescape markup again into an text_type string.This also resolves\nknown HTML4 and XHTML entities:>>>Markup\n(\n\"Main &raquo; <em>About</em>\"\n)\n.\nunescape\n()u'Main \\xbb <em>About</em>'Message Flashing\n\u00b6flask.\nflash\n(\nmessage\n,category='message'\n)\n\u00b6Flashes a message to the next request.In order to remove the\nflashed message from the session and to display it to the user,\nthe template has to callget_flashed_messages()\n.ChangelogChanged in version 0.3:categoryparameter added.Parameters:message\u2013 the message to be flashed.category\u2013 the category for the message.The following values\nare recommended:'message'for any kind of message,'error'for errors,'info'for information\nmessages and'warning'for warnings.However any\nkind of string can be used as category.flask.\nget_flashed_messages\n(\nwith_categories=False\n,category_filter=[]\n)\n\u00b6Pulls all flashed messages from the session and returns them.\nFurther calls in the same request to the function will return\nthe same messages.By default just the messages are returned,\nbut whenwith_categoriesis set toTrue\n, the return value will\nbe a list of tuples in the form(category,message)instead.Filter the flashed messages to one or more categories by providing those\ncategories incategory_filter\n.This allows rendering categories in\nseparate html blocks.Thewith_categoriesandcategory_filterarguments are distinct:with_categoriescontrols whether categories are returned with message\ntext (\nTruegives a tuple, whereFalsegives just the message text).category_filterfilters the messages down to only those matching the\nprovided categories.SeeMessage Flashingfor examples.ChangelogChanged in version 0.9:category_filterparameter added.Changed in version 0.3:with_categoriesparameter added.Parameters:with_categories\u2013 set toTrueto also receive categories.category_filter\u2013 whitelist of categories to limit return valuesJSON Support\n\u00b6Flask usessimplejsonfor the JSON implementation.Since simplejson\nis provided by both the standard library as well as extension, Flask will\ntry simplejson first and then fall back to the stdlib json module.On top\nof that it will delegate access to the current application\u2019s JSON encoders\nand decoders for easier customization.So for starters instead of doing:try\n:importsimplejsonasjsonexceptImportError\n:importjsonYou can instead just do this:fromflaskimportjsonFor usage examples, read thejsondocumentation in the standard\nlibrary.The following extensions are by default applied to the stdlib\u2019s\nJSON module:datetimeobjects are serialized asRFC 822strings.Any object with an__html__method (likeMarkup\n)\nwill have that method called and then the return value is serialized\nas string.Thehtmlsafe_dumps()function of this json module is also available\nas filter called|tojsonin Jinja2.Note that insidescripttags no escaping must take place, so make sure to disable escaping\nwith|safeif you intend to use it insidescripttags unless\nyou are using Flask 0.10 which implies that:<\nscripttype\n=\ntext/javascript\n>doSomethingWith\n(\n{{user.username\n|\ntojson\n|\nsafe}}\n);</\nscript\n>Auto-Sort JSON KeysThe configuration variableJSON_SORT_KEYS(\nConfiguration Handling\n) can be\nset to false to stop Flask from auto-sorting keys.By default sorting\nis enabled and outside of the app context sorting is turned on.Notice that disabling key sorting can cause issues when using content\nbased HTTP caches and Python\u2019s hash randomization feature.flask.json.\njsonify\n(\n*args\n,**kwargs\n)\n\u00b6This function wrapsdumps()to add a few enhancements that make\nlife easier.It turns the JSON output into aResponseobject with theapplication/jsonmimetype.For convenience, it\nalso converts multiple arguments into an array or multiple keyword arguments\ninto a dict.This means that bothjsonify(1,2,3)andjsonify([1,2,3])serialize to[1,2,3]\n.For clarity, the JSON serialization behavior has the following differences\nfromdumps()\n:Single argument: Passed straight through todumps()\n.Multiple arguments: Converted to an array before being passed todumps()\n.Multiple keyword arguments: Converted to a dict before being passed todumps()\n.Both args and kwargs: Behavior undefined and will throw an exception.Example usage:fromflaskimportjsonify@app\n.\nroute\n(\n'/_get_current_user'\n)defget_current_user\n():returnjsonify\n(\nusername\n=\ng\n.\nuser\n.\nusername\n,email\n=\ng\n.\nuser\n.\nemail\n,id\n=\ng\n.\nuser\n.\nid\n)This will send a JSON response like this to the browser:{\"username\"\n:\"admin\"\n,\"email\"\n:\"admin@localhost\"\n,\"id\"\n:42}ChangelogChanged in version 0.11:Added support for serializing top-level arrays. This introduces a\nsecurity risk in ancient browsers. SeeJSON Securityfor details.This function\u2019s response will be pretty printed if theJSONIFY_PRETTYPRINT_REGULARconfig parameter is set to True or the\nFlask app is running in debug mode. Compressed (not pretty) formatting\ncurrently means no indents and no spaces after separators.ChangelogNew in version 0.2.flask.json.\ndumps\n(\nobj\n,**kwargs\n)\n\u00b6Serializeobjto a JSON formattedstrby using the application\u2019s\nconfigured encoder (\njson_encoder\n) if there is an\napplication on the stack.This function can returnunicodestrings or ascii-only bytestrings by\ndefault which coerce into unicode strings automatically.That behavior by\ndefault is controlled by theJSON_AS_ASCIIconfiguration variable\nand can be overridden by the simplejsonensure_asciiparameter.flask.json.\ndump\n(\nobj\n,fp\n,**kwargs\n)\n\u00b6Likedumps()but writes into a file object.flask.json.\nloads\n(\ns\n,**kwargs\n)\n\u00b6Unserialize a JSON object from a stringsby using the application\u2019s\nconfigured decoder (\njson_decoder\n) if there is an\napplication on the stack.flask.json.\nload\n(\nfp\n,**kwargs\n)\n\u00b6Likeloads()but reads from a file object.classflask.json.\nJSONEncoder\n(\n*\n,skipkeys=False\n,ensure_ascii=True\n,check_circular=True\n,allow_nan=True\n,sort_keys=False\n,indent=None\n,separators=None\n,default=None\n)\n\u00b6The default Flask JSON encoder.This one extends the default simplejson\nencoder by also supportingdatetimeobjects,UUIDas well asMarkupobjects which are serialized as RFC 822 datetime strings (same\nas the HTTP date format).In order to support more data types override thedefault()method.default\n(\no\n)\n\u00b6Implement this method in a subclass such that it returns a\nserializable object foro\n, or calls the base implementation (to\nraise aTypeError\n).For example, to support arbitrary iterators, you could implement\ndefault like this:defdefault\n(\nself\n,o\n):try\n:iterable=iter\n(\no\n)exceptTypeError\n:passelse\n:returnlist\n(\niterable\n)returnJSONEncoder\n.\ndefault\n(\nself\n,o\n)classflask.json.\nJSONDecoder\n(\n*\n,object_hook=None\n,parse_float=None\n,parse_int=None\n,parse_constant=None\n,strict=True\n,object_pairs_hook=None\n)\n\u00b6The default JSON decoder.This one does not change the behavior from\nthe default simplejson decoder.Consult thejsondocumentation\nfor more information.This decoder is not only used for the load\nfunctions of this module but alsoRequest\n.Tagged JSON\n\u00b6A compact representation for lossless serialization of non-standard JSON types.SecureCookieSessionInterfaceuses this to serialize\nthe session data, but it may be useful in other places. It can be extended to\nsupport other types.classflask.json.tag.\nTaggedJSONSerializer\n\u00b6Serializer that uses a tag system to compactly represent objects that\nare not JSON types. Passed as the intermediate serializer toitsdangerous.Serializer\n.The following extra types are supported:dicttuplebytesMarkupUUIDdatetimedefault_tags= [<class 'flask.json.tag.TagDict'>, <class 'flask.json.tag.PassDict'>, <class 'flask.json.tag.TagTuple'>, <class 'flask.json.tag.PassList'>, <class 'flask.json.tag.TagBytes'>, <class 'flask.json.tag.TagMarkup'>, <class 'flask.json.tag.TagUUID'>, <class 'flask.json.tag.TagDateTime'>]\n\u00b6Tag classes to bind when creating the serializer. Other tags can be\nadded later usingregister()\n.dumps\n(\nvalue\n)\n\u00b6Tag the value and dump it to a compact JSON string.loads\n(\nvalue\n)\n\u00b6Load data from a JSON string and deserialized any tagged objects.register\n(\ntag_class\n,force=False\n,index=None\n)\n\u00b6Register a new tag with this serializer.Parameters:tag_class\u2013 tag class to register. Will be instantiated with this\nserializer instance.force\u2013 overwrite an existing tag. If false (default), aKeyErroris raised.index\u2013 index to insert the new tag in the tag order. Useful when\nthe new tag is a special case of an existing tag. IfNone(default), the tag is appended to the end of the order.Raises:\nKeyError\u2013 if the tag key is already registered andforceis\nnot true.tag\n(\nvalue\n)\n\u00b6Convert a value to a tagged representation if necessary.untag\n(\nvalue\n)\n\u00b6Convert a tagged representation back to the original type.classflask.json.tag.\nJSONTag\n(\nserializer\n)\n\u00b6Base class for defining type tags forTaggedJSONSerializer\n.check\n(\nvalue\n)\n\u00b6Check if the given value should be tagged by this tag.key= None\n\u00b6The tag to mark the serialized object with. IfNone\n, this tag is\nonly used as an intermediate step during tagging.tag\n(\nvalue\n)\n\u00b6Convert the value to a valid JSON type and add the tag structure\naround it.to_json\n(\nvalue\n)\n\u00b6Convert the Python object to an object that is a valid JSON type.\nThe tag will be added later.to_python\n(\nvalue\n)\n\u00b6Convert the JSON representation back to the correct type. The tag\nwill already be removed.Let\u2019s seen an example that adds support forOrderedDict\n.\nDicts don\u2019t have an order in Python or JSON, so to handle this we will dump\nthe items as a list of[key,value]pairs. SubclassJSONTagand\ngive it the new key'od'to identify the type. The session serializer\nprocesses dicts first, so insert the new tag at the front of the order sinceOrderedDictmust be processed beforedict\n.fromflask.json.tagimportJSONTagclassTagOrderedDict\n(\nJSONTag\n):__slots__=(\n'serializer'\n,)key=' od'defcheck\n(\nself\n,value\n):returnisinstance\n(\nvalue\n,OrderedDict\n)defto_json\n(\nself\n,value\n):return[[\nk\n,self\n.\nserializer\n.\ntag\n(\nv\n)]fork\n,viniteritems\n(\nvalue\n)]defto_python\n(\nself\n,value\n):returnOrderedDict\n(\nvalue\n)app\n.\nsession_interface\n.\nserializer\n.\nregister\n(\nTagOrderedDict\n,index\n=\n0\n)Template Rendering\n\u00b6flask.\nrender_template\n(\ntemplate_name_or_list\n,**context\n)\n\u00b6Renders a template from the template folder with the given\ncontext.Parameters:template_name_or_list\u2013 the name of the template to be\nrendered, or an iterable with template names\nthe first one existing will be renderedcontext\u2013 the variables that should be available in the\ncontext of the template.flask.\nrender_template_string\n(\nsource\n,**context\n)\n\u00b6Renders a template from the given template source string\nwith the given context. Template variables will be autoescaped.Parameters:source\u2013 the source code of the template to be\nrenderedcontext\u2013 the variables that should be available in the\ncontext of the template.flask.\nget_template_attribute\n(\ntemplate_name\n,attribute\n)\n\u00b6Loads a macro (or variable) a template exports.This can be used to\ninvoke a macro from within Python code.If you for example have a\ntemplate named_cider.htmlwith the following contents:{%macrohello\n(\nname\n)%}\nHello{{name}}\n!\n{%endmacro%}You can access this from Python code like this:hello=get_template_attribute\n(\n'_cider.html'\n,'hello'\n)returnhello\n(\n'World'\n)ChangelogNew in version 0.2.Parameters:template_name\u2013 the name of the templateattribute\u2013 the name of the variable of macro to accessConfiguration\n\u00b6classflask.\nConfig\n(\nroot_path\n,defaults=None\n)\n\u00b6Works exactly like a dict but provides ways to fill it from files\nor special dictionaries.There are two common patterns to populate the\nconfig.Either you can fill the config from a config file:app\n.\nconfig\n.\nfrom_pyfile\n(\n'yourconfig.cfg'\n)Or alternatively you can define the configuration options in the\nmodule that callsfrom_object()or provide an import path to\na module that should be loaded.It is also possible to tell it to\nuse the same module and with that provide the configuration values\njust before the call:DEBUG=TrueSECRET_KEY='development key'app\n.\nconfig\n.\nfrom_object\n(\n__name__\n)In both cases (loading from any Python file or loading from modules),\nonly uppercase keys are added to the config.This makes it possible to use\nlowercase values in the config file for temporary values that are not added\nto the config or to define the config keys in the same file that implements\nthe application.Probably the most interesting way to load configurations is from an\nenvironment variable pointing to a file:app\n.\nconfig\n.\nfrom_envvar\n(\n'YOURAPPLICATION_SETTINGS'\n)In this case before launching the application you have to set this\nenvironment variable to the file you want to use.On Linux and OS X\nuse the export statement:exportYOURAPPLICATION_SETTINGS\n=\n'/path/to/config/file'On windows usesetinstead.Parameters:root_path\u2013 path to which files are read relative from.When the\nconfig object is created by the application, this is\nthe application\u2019sroot_path\n.defaults\u2013 an optional dictionary of default valuesfrom_envvar\n(\nvariable_name\n,silent=False\n)\n\u00b6Loads a configuration from an environment variable pointing to\na configuration file.This is basically just a shortcut with nicer\nerror messages for this line of code:app\n.\nconfig\n.\nfrom_pyfile\n(\nos\n.\nenviron\n[\n'YOURAPPLICATION_SETTINGS'\n])Parameters:variable_name\u2013 name of the environment variablesilent\u2013 set toTrueif you want silent failure for missing\nfiles.Returns:\nbool.Trueif able to load config,Falseotherwise.from_json\n(\nfilename\n,silent=False\n)\n\u00b6Updates the values in the config from a JSON file. This function\nbehaves as if the JSON object was a dictionary and passed to thefrom_mapping()function.Parameters:filename\u2013 the filename of the JSON file.This can either be an\nabsolute filename or a filename relative to the\nroot path.silent\u2013 set toTrueif you want silent failure for missing\nfiles.ChangelogNew in version 0.11.from_mapping\n(\n*mapping\n,**kwargs\n)\n\u00b6Updates the config likeupdate()ignoring items with non-upper\nkeys.ChangelogNew in version 0.11.from_object\n(\nobj\n)\n\u00b6Updates the values from the given object.An object can be of one\nof the following two types:a string: in this case the object with that name will be importedan actual object reference: that object is used directlyObjects are usually either modules or classes.from_object()loads only the uppercase attributes of the module/class. Adictobject will not work withfrom_object()because the keys of adictare not attributes of thedictclass.Example of module-based configuration:app\n.\nconfig\n.\nfrom_object\n(\n'yourapplication.default_config'\n)fromyourapplicationimportdefault_configapp\n.\nconfig\n.\nfrom_object\n(\ndefault_config\n)You should not use this function to load the actual configuration but\nrather configuration defaults.The actual config should be loaded\nwithfrom_pyfile()and ideally from a location not within the\npackage because the package might be installed system wide.SeeDevelopment / Productionfor an example of class-based configuration\nusingfrom_object()\n.Parameters:\nobj\u2013 an import name or objectfrom_pyfile\n(\nfilename\n,silent=False\n)\n\u00b6Updates the values in the config from a Python file.This function\nbehaves as if the file was imported as module with thefrom_object()function.Parameters:filename\u2013 the filename of the config.This can either be an\nabsolute filename or a filename relative to the\nroot path.silent\u2013 set toTrueif you want silent failure for missing\nfiles.ChangelogNew in version 0.7:silentparameter.get_namespace\n(\nnamespace\n,lowercase=True\n,trim_namespace=True\n)\n\u00b6Returns a dictionary containing a subset of configuration options\nthat match the specified namespace/prefix. Example usage:app\n.\nconfig\n[\n'IMAGE_STORE_TYPE'\n]='fs'app\n.\nconfig\n[\n'IMAGE_STORE_PATH'\n]='/var/app/images'app\n.\nconfig\n[\n'IMAGE_STORE_BASE_URL'\n]='http://img.website.com'image_store_config=app\n.\nconfig\n.\nget_namespace\n(\n'IMAGE_STORE_'\n)The resulting dictionaryimage_store_configwould look like:{'type'\n:'fs'\n,'path'\n:'/var/app/images'\n,'base_url'\n:'http://img.website.com'}This is often useful when configuration options map directly to\nkeyword arguments in functions or class constructors.Parameters:namespace\u2013 a configuration namespacelowercase\u2013 a flag indicating if the keys of the resulting\ndictionary should be lowercasetrim_namespace\u2013 a flag indicating if the keys of the resulting\ndictionary should not include the namespaceChangelogNew in version 0.11.Stream Helpers\n\u00b6flask.\nstream_with_context\n(\ngenerator_or_function\n)\n\u00b6Request contexts disappear when the response is started on the server.\nThis is done for efficiency reasons and to make it less likely to encounter\nmemory leaks with badly written WSGI middlewares.The downside is that if\nyou are using streamed responses, the generator cannot access request bound\ninformation any more.This function however can help you keep the context around for longer:fromflaskimportstream_with_context\n,request\n,Response@app\n.\nroute\n(\n'/stream'\n)defstreamed_response\n():@stream_with_contextdefgenerate\n():yield'Hello 'yieldrequest\n.\nargs\n[\n'name'\n]yield'!'returnResponse\n(\ngenerate\n())Alternatively it can also be used around a specific generator:fromflaskimportstream_with_context\n,request\n,Response@app\n.\nroute\n(\n'/stream'\n)defstreamed_response\n():defgenerate\n():yield'Hello 'yieldrequest\n.\nargs\n[\n'name'\n]yield'!'returnResponse\n(\nstream_with_context\n(\ngenerate\n()))ChangelogNew in version 0.9.Useful Internals\n\u00b6classflask.ctx.\nRequestContext\n(\napp\n,environ\n,request=None\n)\n\u00b6The request context contains all request relevant information.It is\ncreated at the beginning of the request and pushed to the_request_ctx_stackand removed at the end of it.It will create the\nURL adapter and request object for the WSGI environment provided.Do not attempt to use this class directly, instead usetest_request_context()andrequest_context()to create this object.When the request context is popped, it will evaluate all the\nfunctions registered on the application for teardown execution\n(\nteardown_request()\n).The request context is automatically popped at the end of the request\nfor you.In debug mode the request context is kept around if\nexceptions happen so that interactive debuggers have a chance to\nintrospect the data.With 0.4 this can also be forced for requests\nthat did not fail and outside ofDEBUGmode.By setting'flask._preserve_context'toTrueon the WSGI environment the\ncontext will not pop itself at the end of the request.This is used by\nthetest_client()for example to implement the\ndeferred cleanup functionality.You might find this helpful for unittests where you need the\ninformation from the context local around for a little longer.Make\nsure to properlypop()the stack yourself in\nthat situation, otherwise your unittests will leak memory.copy\n(\n)\n\u00b6Creates a copy of this request context with the same request object.\nThis can be used to move a request context to a different greenlet.\nBecause the actual request object is the same this cannot be used to\nmove a request context to a different thread unless access to the\nrequest object is locked.ChangelogNew in version 0.10.match_request\n(\n)\n\u00b6Can be overridden by a subclass to hook into the matching\nof the request.pop\n(\nexc=<object object>\n)\n\u00b6Pops the request context and unbinds it by doing that.This will\nalso trigger the execution of functions registered by theteardown_request()decorator.ChangelogChanged in version 0.9:Added theexcargument.push\n(\n)\n\u00b6Binds the request context to the current context.flask.\n_request_ctx_stack\n\u00b6The internalLocalStackthat holdsRequestContextinstances. Typically, therequestandsessionproxies should be accessed\ninstead of the stack. It may be useful to access the stack in\nextension code.The following attributes are always present on each layer of the\nstack:appthe active Flask application.url_adapterthe URL adapter that was used to match the request.requestthe current request object.sessionthe active session object.gan object with all the attributes of theflask.gobject.flashesan internal cache for the flashed messages.Example usage:fromflaskimport_request_ctx_stackdefget_session\n():ctx=_request_ctx_stack\n.\ntopifctxisnotNone\n:returnctx\n.\nsessionclassflask.ctx.\nAppContext\n(\napp\n)\n\u00b6The application context binds an application object implicitly\nto the current thread or greenlet, similar to how theRequestContextbinds request information.The application\ncontext is also implicitly created if a request context is created\nbut the application is not on top of the individual application\ncontext.pop\n(\nexc=<object object>\n)\n\u00b6Pops the app context.push\n(\n)\n\u00b6Binds the app context to the current context.flask.\n_app_ctx_stack\n\u00b6The internalLocalStackthat holdsAppContextinstances. Typically, thecurrent_appandgproxies should be accessed instead\nof the stack. Extensions can access the contexts on the stack as a\nnamespace to store data.ChangelogNew in version 0.9.classflask.blueprints.\nBlueprintSetupState\n(\nblueprint\n,app\n,options\n,first_registration\n)\n\u00b6Temporary holder object for registering a blueprint with the\napplication.An instance of this class is created by themake_setup_state()method and later passed\nto all register callback functions.add_url_rule\n(\nrule\n,endpoint=None\n,view_func=None\n,**options\n)\n\u00b6A helper method to register a rule (and optionally a view function)\nto the application.The endpoint is automatically prefixed with the\nblueprint\u2019s name.app= None\n\u00b6a reference to the current applicationblueprint= None\n\u00b6a reference to the blueprint that created this setup state.first_registration= None\n\u00b6as blueprints can be registered multiple times with the\napplication and not everything wants to be registered\nmultiple times on it, this attribute can be used to figure\nout if the blueprint was registered in the past already.options= None\n\u00b6a dictionary with all options that were passed to theregister_blueprint()method.subdomain= None\n\u00b6The subdomain that the blueprint should be active for,Noneotherwise.url_defaults= None\n\u00b6A dictionary with URL defaults that is added to each and every\nURL that was defined with the blueprint.url_prefix= None\n\u00b6The prefix that should be used for all URLs defined on the\nblueprint.Signals\n\u00b6ChangelogNew in version 0.6.signals.\nsignals_available\n\u00b6Trueif the signaling system is available.This is the case\nwhenblinkeris installed.The following signals exist in Flask:flask.\ntemplate_rendered\n\u00b6This signal is sent when a template was successfully rendered.The\nsignal is invoked with the instance of the template astemplateand the context as dictionary (namedcontext\n).Example subscriber:deflog_template_renders\n(\nsender\n,template\n,context\n,**\nextra\n):sender\n.\nlogger\n.\ndebug\n(\n'Rendering template \"\n%s\n\" with context%s\n'\n,template\n.\nnameor'string template'\n,context\n)fromflaskimporttemplate_renderedtemplate_rendered\n.\nconnect\n(\nlog_template_renders\n,app\n)flask.\nbefore_render_templateThis signal is sent before template rendering process. The\nsignal is invoked with the instance of the template astemplateand the context as dictionary (namedcontext\n).Example subscriber:deflog_template_renders\n(\nsender\n,template\n,context\n,**\nextra\n):sender\n.\nlogger\n.\ndebug\n(\n'Rendering template \"\n%s\n\" with context%s\n'\n,template\n.\nnameor'string template'\n,context\n)fromflaskimportbefore_render_templatebefore_render_template\n.\nconnect\n(\nlog_template_renders\n,app\n)flask.\nrequest_started\n\u00b6This signal is sent when the request context is set up, before\nany request processing happens.Because the request context is already\nbound, the subscriber can access the request with the standard global\nproxies such asrequest\n.Example subscriber:deflog_request\n(\nsender\n,**\nextra\n):sender\n.\nlogger\n.\ndebug\n(\n'Request context is set up'\n)fromflaskimportrequest_startedrequest_started\n.\nconnect\n(\nlog_request\n,app\n)flask.\nrequest_finished\n\u00b6This signal is sent right before the response is sent to the client.\nIt is passed the response to be sent namedresponse\n.Example subscriber:deflog_response\n(\nsender\n,response\n,**\nextra\n):sender\n.\nlogger\n.\ndebug\n(\n'Request context is about to close down.''Response:%s\n'\n,response\n)fromflaskimportrequest_finishedrequest_finished\n.\nconnect\n(\nlog_response\n,app\n)flask.\ngot_request_exception\n\u00b6This signal is sent when an exception happens during request processing.\nIt is sentbeforethe standard exception handling kicks in and even\nin debug mode, where no exception handling happens.The exception\nitself is passed to the subscriber asexception\n.Example subscriber:deflog_exception\n(\nsender\n,exception\n,**\nextra\n):sender\n.\nlogger\n.\ndebug\n(\n'Got exception during processing:%s\n'\n,exception\n)fromflaskimportgot_request_exceptiongot_request_exception\n.\nconnect\n(\nlog_exception\n,app\n)flask.\nrequest_tearing_down\n\u00b6This signal is sent when the request is tearing down.This is always\ncalled, even if an exception is caused.Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on.Example subscriber:defclose_db_connection\n(\nsender\n,**\nextra\n):session\n.\nclose\n()fromflaskimportrequest_tearing_downrequest_tearing_down\n.\nconnect\n(\nclose_db_connection\n,app\n)As of Flask 0.9, this will also be passed anexckeyword argument\nthat has a reference to the exception that caused the teardown if\nthere was one.flask.\nappcontext_tearing_down\n\u00b6This signal is sent when the app context is tearing down.This is always\ncalled, even if an exception is caused.Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on.Example subscriber:defclose_db_connection\n(\nsender\n,**\nextra\n):session\n.\nclose\n()fromflaskimportappcontext_tearing_downappcontext_tearing_down\n.\nconnect\n(\nclose_db_connection\n,app\n)This will also be passed anexckeyword argument that has a reference\nto the exception that caused the teardown if there was one.flask.\nappcontext_pushed\n\u00b6This signal is sent when an application context is pushed.The sender\nis the application.This is usually useful for unittests in order to\ntemporarily hook in information.For instance it can be used to\nset a resource early onto thegobject.Example usage:fromcontextlibimportcontextmanagerfromflaskimportappcontext_pushed@contextmanagerdefuser_set\n(\napp\n,user\n):defhandler\n(\nsender\n,**\nkwargs\n):g\n.\nuser=userwithappcontext_pushed\n.\nconnected_to\n(\nhandler\n,app\n):yieldAnd in the testcode:deftest_user_me\n(\nself\n):withuser_set\n(\napp\n,'john'\n):c=app\n.\ntest_client\n()resp=c\n.\nget\n(\n'/users/me'\n)assertresp\n.\ndata=='username=john'ChangelogNew in version 0.10.flask.\nappcontext_popped\n\u00b6This signal is sent when an application context is popped.The sender\nis the application.This usually falls in line with theappcontext_tearing_downsignal.ChangelogNew in version 0.10.flask.\nmessage_flashed\n\u00b6This signal is sent when the application is flashing a message.The\nmessages is sent asmessagekeyword argument and the category ascategory\n.Example subscriber:recorded=[]defrecord\n(\nsender\n,message\n,category\n,**\nextra\n):recorded\n.\nappend\n((\nmessage\n,category\n))fromflaskimportmessage_flashedmessage_flashed\n.\nconnect\n(\nrecord\n,app\n)ChangelogNew in version 0.10.classsignals.\nNamespace\n\u00b6An alias forblinker.base.Namespaceif blinker is available,\notherwise a dummy class that creates fake signals.This class is\navailable for Flask extensions that want to provide the same fallback\nsystem as Flask itself.signal\n(\nname\n,doc=None\n)\n\u00b6Creates a new signal for this namespace if blinker is available,\notherwise returns a fake signal that has a send method that will\ndo nothing but will fail with aRuntimeErrorfor all other\noperations, including connecting.Class-Based Views\n\u00b6ChangelogNew in version 0.7.classflask.views.\nView\n\u00b6Alternative way to use view functions.A subclass has to implementdispatch_request()which is called with the view arguments from\nthe URL routing system.Ifmethodsis provided the methods\ndo not have to be passed to theadd_url_rule()method explicitly:classMyView\n(\nView\n):methods=[\n'GET'\n]defdispatch_request\n(\nself\n,name\n):return'Hello%s\n!'%nameapp\n.\nadd_url_rule\n(\n'/hello/<name>'\n,view_func\n=\nMyView\n.\nas_view\n(\n'myview'\n))When you want to decorate a pluggable view you will have to either do that\nwhen the view function is created (by wrapping the return value ofas_view()\n) or you can use thedecoratorsattribute:classSecretView\n(\nView\n):methods=[\n'GET'\n]decorators=[\nsuperuser_required\n]defdispatch_request\n(\nself\n):...The decorators stored in the decorators list are applied one after another\nwhen the view function is created.Note that you cannotuse the class\nbased decorators since those would decorate the view class and not the\ngenerated view function!classmethodas_view\n(\nname\n,*class_args\n,**class_kwargs\n)\n\u00b6Converts the class into an actual view function that can be used\nwith the routing system.Internally this generates a function on the\nfly which will instantiate theViewon each request and call\nthedispatch_request()method on it.The arguments passed toas_view()are forwarded to the\nconstructor of the class.decorators= ()\n\u00b6The canonical way to decorate class-based views is to decorate the\nreturn value of as_view().However since this moves parts of the\nlogic from the class declaration to the place where it\u2019s hooked\ninto the routing system.You can place one or more decorators in this list and whenever the\nview function is created the result is automatically decorated.ChangelogNew in version 0.8.dispatch_request\n(\n)\n\u00b6Subclasses have to override this method to implement the\nactual view function code.This method is called with all\nthe arguments from the URL rule.methods= None\n\u00b6A list of methods this view can handle.provide_automatic_options= None\n\u00b6Setting this disables or force-enables the automatic options handling.classflask.views.\nMethodView\n\u00b6A class-based view that dispatches request methods to the corresponding\nclass methods. For example, if you implement agetmethod, it will be\nused to handleGETrequests.classCounterAPI\n(\nMethodView\n):defget\n(\nself\n):returnsession\n.\nget\n(\n'counter'\n,0\n)defpost\n(\nself\n):session\n[\n'counter'\n]=session\n.\nget\n(\n'counter'\n,0\n)+1return'OK'app\n.\nadd_url_rule\n(\n'/counter'\n,view_func\n=\nCounterAPI\n.\nas_view\n(\n'counter'\n))dispatch_request\n(\n*args\n,**kwargs\n)\n\u00b6Subclasses have to override this method to implement the\nactual view function code.This method is called with all\nthe arguments from the URL rule.URL Route Registrations\n\u00b6Generally there are three ways to define rules for the routing system:You can use theflask.Flask.route()decorator.You can use theflask.Flask.add_url_rule()function.You can directly access the underlying Werkzeug routing system\nwhich is exposed asflask.Flask.url_map\n.Variable parts in the route can be specified with angular brackets\n(\n/user/<username>\n).By default a variable part in the URL accepts any\nstring without a slash however a different converter can be specified as\nwell by using<converter:name>\n.Variable parts are passed to the view function as keyword arguments.The following converters are available:stringaccepts any text without a slash (the default)intaccepts integersfloatlikeintbut for floating point valuespathlike the default but also accepts slashesanymatches one of the items provideduuidaccepts UUID stringsCustom converters can be defined usingflask.Flask.url_map\n.Here are some examples:@app\n.\nroute\n(\n'/'\n)defindex\n():pass@app\n.\nroute\n(\n'/<username>'\n)defshow_user\n(\nusername\n):pass@app\n.\nroute\n(\n'/post/<int:post_id>'\n)defshow_post\n(\npost_id\n):passAn important detail to keep in mind is how Flask deals with trailing\nslashes.The idea is to keep each URL unique so the following rules\napply:If a rule ends with a slash and is requested without a slash by the\nuser, the user is automatically redirected to the same page with a\ntrailing slash attached.If a rule does not end with a trailing slash and the user requests the\npage with a trailing slash, a 404 not found is raised.This is consistent with how web servers deal with static files.This\nalso makes it possible to use relative link targets safely.You can also define multiple rules for the same function.They have to be\nunique however.Defaults can also be specified.Here for example is a\ndefinition for a URL that accepts an optional page:@app\n.\nroute\n(\n'/users/'\n,defaults\n=\n{\n'page'\n:1\n})@app\n.\nroute\n(\n'/users/page/<int:page>'\n)defshow_users\n(\npage\n):passThis specifies that/users/will be the URL for page one and/users/page/Nwill be the URL for pageN\n.If a URL contains a default value, it will be redirected to its simpler\nform with a 301 redirect. In the above example,/users/page/1will\nbe redirected to/users/\n. If your route handlesGETandPOSTrequests, make sure the default route only handlesGET\n, as redirects\ncan\u2019t preserve form data.@app\n.\nroute\n(\n'/region/'\n,defaults\n=\n{\n'id'\n:1\n})@app\n.\nroute\n(\n'/region/<id>'\n,methods\n=\n[\n'GET'\n,'POST'\n])defregion\n(\nid\n):passHere are the parameters thatroute()andadd_url_rule()accept.The only difference is that\nwith the route parameter the view function is defined with the decorator\ninstead of theview_funcparameter.rulethe URL rule as stringendpointthe endpoint for the registered URL rule.Flask itself\nassumes that the name of the view function is the name\nof the endpoint if not explicitly stated.view_functhe function to call when serving a request to the\nprovided endpoint.If this is not provided one can\nspecify the function later by storing it in theview_functionsdictionary with the\nendpoint as key.defaultsA dictionary with defaults for this rule.See the\nexample above for how defaults work.subdomainspecifies the rule for the subdomain in case subdomain\nmatching is in use.If not specified the default\nsubdomain is assumed.**optionsthe options to be forwarded to the underlyingRuleobject.A change to\nWerkzeug is handling of method options.methods is a list\nof methods this rule should be limited to (\nGET\n,POSTetc.).By default a rule just listens forGET(and\nimplicitlyHEAD\n).Starting with Flask 0.6,OPTIONSis\nimplicitly added and handled by the standard request\nhandling.They have to be specified as keyword arguments.View Function Options\n\u00b6For internal usage the view functions can have some attributes attached to\ncustomize behavior the view function would normally not have control over.\nThe following attributes can be provided optionally to either override\nsome defaults toadd_url_rule()or general behavior:__name__\n: The name of a function is by default used as endpoint.If\nendpoint is provided explicitly this value is used.Additionally this\nwill be prefixed with the name of the blueprint by default which\ncannot be customized from the function itself.methods\n: If methods are not provided when the URL rule is added,\nFlask will look on the view function object itself if amethodsattribute exists.If it does, it will pull the information for the\nmethods from there.provide_automatic_options\n: if this attribute is set Flask will\neither force enable or disable the automatic implementation of the\nHTTPOPTIONSresponse.This can be useful when working with\ndecorators that want to customize theOPTIONSresponse on a per-view\nbasis.required_methods\n: if this attribute is set, Flask will always add\nthese methods when registering a URL rule even if the methods were\nexplicitly overridden in theroute()call.Full example:defindex\n():ifrequest\n.\nmethod=='OPTIONS'\n:# custom options handling here...return'Hello World!'index\n.\nprovide_automatic_options=Falseindex\n.\nmethods=[\n'GET'\n,'OPTIONS'\n]app\n.\nadd_url_rule\n(\n'/'\n,index\n)ChangelogNew in version 0.8:Theprovide_automatic_optionsfunctionality was added.Command Line Interface\n\u00b6classflask.cli.\nFlaskGroup\n(\nadd_default_commands=True\n,create_app=None\n,add_version_option=True\n,load_dotenv=True\n,**extra\n)\n\u00b6Special subclass of theAppGroupgroup that supports\nloading more commands from the configured Flask app.Normally a\ndeveloper does not have to interface with this class but there are\nsome very advanced use cases for which it makes sense to create an\ninstance of this.For information as of why this is useful seeCustom Scripts\n.Parameters:add_default_commands\u2013 if this is True then the default run and\nshell commands wil be added.add_version_option\u2013 adds the--versionoption.create_app\u2013 an optional callback that is passed the script info and\nreturns the loaded app.load_dotenv\u2013 Load the nearest.envand.flaskenvfiles to set environment variables. Will also change the working\ndirectory to the directory containing the first file found.Changed in version 1.0:If installed, python-dotenv will be used to load environment variables\nfrom.envand.flaskenvfiles.Changelogget_command\n(\nctx\n,name\n)\n\u00b6Given a context and a command name, this returns aCommandobject if it exists or returnsNone\n.list_commands\n(\nctx\n)\n\u00b6Returns a list of subcommand names in the order they should\nappear.main\n(\n*args\n,**kwargs\n)\n\u00b6This is the way to invoke a script with all the bells and\nwhistles as a command line application.This will always terminate\nthe application after a call.If this is not wanted,SystemExitneeds to be caught.This method is also available by directly calling the instance of\naCommand\n.New in version 3.0:Added thestandalone_modeflag to control the standalone mode.ChangelogParameters:args\u2013 the arguments that should be used for parsing.If not\nprovided,sys.argv[1:]is used.prog_name\u2013 the program name that should be used.By default\nthe program name is constructed by taking the file\nname fromsys.argv[0]\n.complete_var\u2013 the environment variable that controls the\nbash completion support.The default is\"_<prog_name>_COMPLETE\"with prog name in\nuppercase.standalone_mode\u2013 the default behavior is to invoke the script\nin standalone mode.Click will then\nhandle exceptions and convert them into\nerror messages and the function will never\nreturn but shut down the interpreter.If\nthis is set toFalsethey will be\npropagated to the caller and the return\nvalue of this function is the return value\nofinvoke()\n.extra\u2013 extra keyword arguments are forwarded to the context\nconstructor.SeeContextfor more information.classflask.cli.\nAppGroup\n(\nname=None\n,commands=None\n,**attrs\n)\n\u00b6This works similar to a regular clickGroupbut it\nchanges the behavior of thecommand()decorator so that it\nautomatically wraps the functions inwith_appcontext()\n.Not to be confused withFlaskGroup\n.command\n(\n*args\n,**kwargs\n)\n\u00b6This works exactly like the method of the same name on a regularclick.Groupbut it wraps callbacks inwith_appcontext()unless it\u2019s disabled by passingwith_appcontext=False\n.group\n(\n*args\n,**kwargs\n)\n\u00b6This works exactly like the method of the same name on a regularclick.Groupbut it defaults the group class toAppGroup\n.classflask.cli.\nScriptInfo\n(\napp_import_path=None\n,create_app=None\n)\n\u00b6Help object to deal with Flask applications.This is usually not\nnecessary to interface with as it\u2019s used internally in the dispatching\nto click.In future versions of Flask this object will most likely play\na bigger role.Typically it\u2019s created automatically by theFlaskGroupbut you can also manually create it and pass it\nonwards as click object.app_import_path= None\n\u00b6Optionally the import path for the Flask application.create_app= None\n\u00b6Optionally a function that is passed the script info to create\nthe instance of the application.data= None\n\u00b6A dictionary with arbitrary data that can be associated with\nthis script info.load_app\n(\n)\n\u00b6Loads the Flask app (if not yet loaded) and returns it.Calling\nthis multiple times will just result in the already loaded app to\nbe returned.flask.cli.\nload_dotenv\n(\npath=None\n)\n\u00b6Load \u201cdotenv\u201d files in order of precedence to set environment variables.If an env var is already set it is not overwritten, so earlier files in the\nlist are preferred over later files.Changes the current working directory to the location of the first file\nfound, with the assumption that it is in the top level project directory\nand will be where the Python path should import local packages from.This is a no-op ifpython-dotenvis not installed.Parameters:\npath\u2013 Load the file at this location instead of searching.Returns:\nTrueif a file was loaded.New in version 1.0.Changelogflask.cli.\nwith_appcontext\n(\nf\n)\n\u00b6Wraps a callback so that it\u2019s guaranteed to be executed with the\nscript\u2019s application context.If callbacks are registered directly\nto theapp.cliobject then they are wrapped with this function\nby default unless it\u2019s disabled.flask.cli.\npass_script_info\n(\nf\n)\n\u00b6Marks a function so that an instance ofScriptInfois passed\nas first argument to the click callback.flask.cli.\nrun_command= <click.core.Command object>\n\u00b6Run a local development server.This server is for development purposes only. It does not provide\nthe stability, security, or performance of production WSGI servers.The reloader and debugger are enabled by default if\nFLASK_ENV=development or FLASK_DEBUG=1.flask.cli.\nshell_command= <click.core.Command object>\n\u00b6Runs an interactive Python shell in the context of a given\nFlask application.The application will populate the default\nnamespace of this shell according to it\u2019s configuration.This is useful for executing small snippets of management code\nwithout having to manually configure the application.ContentsAPIApplication ObjectBlueprint ObjectsIncoming Request DataResponse ObjectsSessionsSession InterfaceTest ClientTest CLI RunnerApplication GlobalsUseful Functions and ClassesMessage FlashingJSON SupportTagged JSONTemplate RenderingConfigurationStream HelpersUseful InternalsSignalsClass-Based ViewsURL Route RegistrationsView Function OptionsCommand Line InterfaceNavigationOverviewPrevious:Becoming BigNext:Design Decisions in FlaskVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/api/"},
{"text": "Unicode in Flask \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbUnicode in Flask\n\u00b6Flask, like Jinja2 and Werkzeug, is totally Unicode based when it comes to\ntext.Not only these libraries, also the majority of web related Python\nlibraries that deal with text.If you don\u2019t know Unicode so far, you\nshould probably readThe Absolute Minimum Every Software Developer\nAbsolutely, Positively Must Know About Unicode and Character Sets\n.This part of the\ndocumentation just tries to cover the very basics so that you have a\npleasant experience with Unicode related things.Automatic Conversion\n\u00b6Flask has a few assumptions about your application (which you can change\nof course) that give you basic and painless Unicode support:the encoding for text on your website is UTF-8internally you will always use Unicode exclusively for text except\nfor literal strings with only ASCII character points.encoding and decoding happens whenever you are talking over a protocol\nthat requires bytes to be transmitted.So what does this mean to you?HTTP is based on bytes.Not only the protocol, also the system used to\naddress documents on servers (so called URIs or URLs).However HTML which\nis usually transmitted on top of HTTP supports a large variety of\ncharacter sets and which ones are used, are transmitted in an HTTP header.\nTo not make this too complex Flask just assumes that if you are sending\nUnicode out you want it to be UTF-8 encoded.Flask will do the encoding\nand setting of the appropriate headers for you.The same is true if you are talking to databases with the help of\nSQLAlchemy or a similar ORM system.Some databases have a protocol that\nalready transmits Unicode and if they do not, SQLAlchemy or your other ORM\nshould take care of that.The Golden Rule\n\u00b6So the rule of thumb: if you are not dealing with binary data, work with\nUnicode.What does working with Unicode in Python 2.x mean?as long as you are using ASCII charpoints only (basically numbers,\nsome special characters of latin letters without umlauts or anything\nfancy) you can use regular string literals (\n'HelloWorld'\n).if you need anything else than ASCII in a string you have to mark\nthis string as Unicode string by prefixing it with a lowercaseu\n.\n(likeu'H\u00e4nselundGretel'\n)if you are using non-Unicode characters in your Python files you have\nto tell Python which encoding your file uses.Again, I recommend\nUTF-8 for this purpose.To tell the interpreter your encoding you can\nput the#-*-coding:utf-8-*-into the first or second line of\nyour Python source file.Jinja is configured to decode the template files from UTF-8.So make\nsure to tell your editor to save the file as UTF-8 there as well.Encoding and Decoding Yourself\n\u00b6If you are talking with a filesystem or something that is not really based\non Unicode you will have to ensure that you decode properly when working\nwith Unicode interface.So for example if you want to load a file on the\nfilesystem and embed it into a Jinja2 template you will have to decode it\nfrom the encoding of that file.Here the old problem that text files do\nnot specify their encoding comes into play.So do yourself a favour and\nlimit yourself to UTF-8 for text files as well.Anyways.To load such a file with Unicode you can use the built-instr.decode()method:defread_file\n(\nfilename\n,charset\n=\n'utf-8'\n):withopen\n(\nfilename\n,'r'\n)asf\n:returnf\n.\nread\n()\n.\ndecode\n(\ncharset\n)To go from Unicode into a specific charset such as UTF-8 you can use theunicode.encode()method:defwrite_file\n(\nfilename\n,contents\n,charset\n=\n'utf-8'\n):withopen\n(\nfilename\n,'w'\n)asf\n:f\n.\nwrite\n(\ncontents\n.\nencode\n(\ncharset\n))Configuring Editors\n\u00b6Most editors save as UTF-8 by default nowadays but in case your editor is\nnot configured to do this you have to change it.Here some common ways to\nset your editor to store as UTF-8:Vim: putsetenc=utf-8to your.vimrcfile.Emacs: either use an encoding cookie or put this into your.emacsfile:(\nprefer\n-\ncoding\n-\nsystem'utf-8)(\nsetqdefault\n-\nbuffer\n-\nfile\n-\ncoding\n-\nsystem'utf-8)Notepad++:Go toSettings -> Preferences \u2026Select the \u201cNew Document/Default Directory\u201d tabSelect \u201cUTF-8 without BOM\u201d as encodingIt is also recommended to use the Unix newline format, you can select\nit in the same panel but this is not a requirement.ContentsUnicode in FlaskAutomatic ConversionThe Golden RuleEncoding and Decoding YourselfConfiguring EditorsNavigationOverviewPrevious:Security ConsiderationsNext:Flask Extension DevelopmentVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/unicode/"},
{"text": "Flask Changelog \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbFlask Changelog\n\u00b6Version 1.0.3\n\u00b6UnreleasedVersion 1.0.2\n\u00b6Released on May 2nd 2018Fix more backwards compatibility issues with merging slashes between\na blueprint prefix and route. (\n#2748\n)Fix error withflaskroutescommand when there are no routes.\n(\n#2751\n)Version 1.0.1\n\u00b6Released on April 29th 2018Fix registering partials (with no__name__\n) as view functions.\n(\n#2730\n)Don\u2019t treat lists returned from view functions the same as tuples.\nOnly tuples are interpreted as response data. (\n#2736\n)Extra slashes between a blueprint\u2019surl_prefixand a route URL\nare merged. This fixes some backwards compatibility issues with the\nchange in 1.0. (\n#2731\n,#2742\n)Only trapBadRequestKeyErrorerrors in debug mode, not allBadRequesterrors. This allowsabort(400)to continue\nworking as expected. (\n#2735\n)TheFLASK_SKIP_DOTENVenvironment variable can be set to1to skip automatically loading dotenv files. (\n#2722\n)Version 1.0\n\u00b6Released on April 26th 2018Python 2.6 and 3.3 are no longer supported.(\npallets/meta#24\n)Bump minimum dependency versions to the latest stable versions:\nWerkzeug >= 0.14, Jinja >= 2.10, itsdangerous >= 0.24, Click >= 5.1.\n(\n#2586\n)Skipapp.runwhen a Flask application is run\nfrom the command line. This avoids some behavior that was confusing\nto debug.Change the default forJSONIFY_PRETTYPRINT_REGULARtoFalse\n.jsonify()returns a compact format by\ndefault, and an indented format in debug mode. (\n#2193\n)Flask.__init__accepts thehost_matchingargument and sets it onurl_map\n. (\n#1559\n)Flask.__init__accepts thestatic_hostargument\nand passes it as thehostargument when defining the static\nroute. (\n#1559\n)send_file()supports Unicode inattachment_filename\n.\n(\n#2223\n)Pass_schemeargument fromurl_for()tohandle_url_build_error()\n. (\n#2017\n)add_url_rule()accepts theprovide_automatic_optionsargument to disable adding theOPTIONSmethod. (\n#1489\n)MethodViewsubclasses inherit method handlers from\nbase classes. (\n#1936\n)Errors caused while opening the session at the beginning of the\nrequest are handled by the app\u2019s error handlers. (\n#2254\n)Blueprints gainedjson_encoderandjson_decoderattributes to override the app\u2019s\nencoder and decoder. (\n#1898\n)Flask.make_response()raisesTypeErrorinstead ofValueErrorfor bad response types. The error messages have been\nimproved to describe why the type is invalid. (\n#2256\n)AddroutesCLI command to output routes registered on the\napplication. (\n#2259\n)Show warning when session cookie domain is a bare hostname or an IP\naddress, as these may not behave properly in some browsers, such as\nChrome. (\n#2282\n)Allow IP address as exact session cookie domain. (\n#2282\n)SESSION_COOKIE_DOMAINis set if it is detected throughSERVER_NAME\n. (\n#2282\n)Auto-detect zero-argument app factory calledcreate_appormake_appfromFLASK_APP\n. (\n#2297\n)Factory functions are not required to take ascript_infoparameter to work with theflaskcommand. If they take a single\nparameter or a parameter namedscript_info\n, theScriptInfoobject will be passed. (\n#2319\n)FLASK_APPcan be set to an app factory, with arguments if\nneeded, for exampleFLASK_APP=myproject.app:create_app('dev')\n.\n(\n#2326\n)FLASK_APPcan point to local packages that are not installed in\neditable mode, althoughpipinstall-eis still preferred.\n(\n#2414\n)TheViewclass attributeprovide_automatic_optionsis set inas_view()\n, to be detected byadd_url_rule()\n. (\n#2316\n)Error handling will try handlers registered forblueprint,code\n,app,code\n,blueprint,exception\n,app,exception\n.\n(\n#2314\n)Cookieis added to the response\u2019sVaryheader if the session\nis accessed at all during the request (and not deleted). (\n#2288\n)test_request_context()acceptssubdomainandurl_schemearguments for use when building the base URL.\n(\n#1621\n)SetAPPLICATION_ROOTto'/'by default. This was already\nthe implicit default when it was set toNone\n.TRAP_BAD_REQUEST_ERRORSis enabled by default in debug mode.BadRequestKeyErrorhas a message with the bad key in debug mode\ninstead of the generic bad request message. (\n#2348\n)Allow registering new tags withTaggedJSONSerializerto support storing other\ntypes in the session cookie. (\n#2352\n)Only open the session if the request has not been pushed onto the\ncontext stack yet. This allowsstream_with_context()generators to access the same session that the containing view uses.\n(\n#2354\n)Addjsonkeyword argument for the test client request methods.\nThis will dump the given object as JSON and set the appropriate\ncontent type. (\n#2358\n)Extract JSON handling to a mixin applied to both theRequestandResponseclasses. This adds theis_json()andget_json()methods to\nthe response to make testing JSON response much easier. (\n#2358\n)Removed error handler caching because it caused unexpected results\nfor some exception inheritance hierarchies. Register handlers\nexplicitly for each exception if you want to avoid traversing the\nMRO. (\n#2362\n)Fix incorrect JSON encoding of aware, non-UTC datetimes. (\n#2374\n)Template auto reloading will honor debug mode even even ifjinja_envwas already accessed. (\n#2373\n)The following old deprecated code was removed. (\n#2385\n)flask.ext- import extensions directly by their name instead\nof through theflask.extnamespace. For example,importflask.ext.sqlalchemybecomesimportflask_sqlalchemy\n.Flask.init_jinja_globals- extendFlask.create_jinja_environment()instead.Flask.error_handlers- tracked byFlask.error_handler_spec\n, useFlask.errorhandler()to register handlers.Flask.request_globals_class- useFlask.app_ctx_globals_classinstead.Flask.static_path- useFlask.static_url_pathinstead.Request.module- useRequest.blueprintinstead.TheRequest.jsonproperty is no longer deprecated.\n(\n#1421\n)Support passing aEnvironBuilderordicttotest_client.open\n.\n(\n#2412\n)Theflaskcommand andFlask.run()will load environment\nvariables from.envand.flaskenvfiles if python-dotenv is\ninstalled. (\n#2416\n)When passing a full URL to the test client, the scheme in the URL is\nused instead ofPREFERRED_URL_SCHEME\n. (\n#2430\n)Flask.loggerhas been simplified.LOGGER_NAMEandLOGGER_HANDLER_POLICYconfig was removed. The logger is always\nnamedflask.app\n. The level is only set on first access, it\ndoesn\u2019t checkFlask.debugeach time. Only one format is\nused, not different ones depending onFlask.debug\n. No\nhandlers are removed, and a handler is only added if no handlers are\nalready configured. (\n#2436\n)Blueprint view function names may not contain dots. (\n#2450\n)Fix aValueErrorcaused by invalidRangerequests in some\ncases. (\n#2526\n)The development server uses threads by default. (\n#2529\n)Loading config files withsilent=Truewill ignoreENOTDIRerrors. (\n#2581\n)Pass--certand--keyoptions toflaskrunto run the\ndevelopment server over HTTPS. (\n#2606\n)AddedSESSION_COOKIE_SAMESITEto control theSameSiteattribute on the session cookie. (\n#2607\n)Addedtest_cli_runner()to create a Click runner\nthat can invoke Flask CLI commands for testing. (\n#2636\n)Subdomain matching is disabled by default and settingSERVER_NAMEdoes not implicily enable it. It can be enabled\nby passingsubdomain_matching=Trueto theFlaskconstructor.\n(\n#2635\n)A single trailing slash is stripped from the blueprinturl_prefixwhen it is registered with the app. (\n#2629\n)Request.get_json()doesn\u2019t cache the\nresult if parsing fails whensilentis true. (\n#2651\n)Request.get_json()no longer accepts arbitrary encodings.\nIncoming JSON should be encoded using UTF-8 perRFC 8259\n, but\nFlask will autodetect UTF-8, -16, or -32. (\n#2691\n)AddedMAX_COOKIE_SIZEandResponse.max_cookie_sizeto control when Werkzeug warns about large cookies that browsers may\nignore. (\n#2693\n)Updated documentation theme to make docs look better in small\nwindows. (\n#2709\n)Rewrote the tutorial docs and example project to take a more\nstructured approach to help new users avoid common pitfalls.\n(\n#2676\n)Version 0.12.4\n\u00b6Released on April 29 2018Repackage 0.12.3 to fix package layout issue. (\n#2728\n)Version 0.12.3\n\u00b6Released on April 26th 2018Request.get_json()no longer accepts arbitrary encodings.\nIncoming JSON should be encoded using UTF-8 perRFC 8259\n, but\nFlask will autodetect UTF-8, -16, or -32. (\n#2692\n)Fix a Python warning about imports when usingpython-mflask\n.\n(\n#2666\n)Fix aValueErrorcaused by invalidRangerequests in some\ncases.Version 0.12.2\n\u00b6Released on May 16 2017Fix a bug insafe_joinon Windows.Version 0.12.1\n\u00b6Bugfix release, released on March 31st 2017Preventflask runfrom showing a NoAppException when an ImportError occurs\nwithin the imported application module.Fix encoding behavior ofapp.config.from_pyfilefor Python 3. Fix#2118\n.Use theSERVER_NAMEconfig if it is present as default values forapp.run\n.#2109\n,#2152Callctx.auto_popwith the exception object instead ofNone\n, in the\nevent that aBaseExceptionsuch asKeyboardInterruptis raised in a\nrequest handler.Version 0.12\n\u00b6Released on December 21st 2016, codename Punsch.the cli command now responds to\u2013version\n.Mimetype guessing and ETag generation for file-like objects insend_filehas been removed, as per issue#104\n.See pull request#1849\n.Mimetype guessing insend_filenow fails loudly and doesn\u2019t fall back toapplication/octet-stream\n. See pull request#1988\n.Makeflask.safe_joinable to join multiple paths likeos.path.join(pull request#1730\n).Revert a behavior change that made the dev server crash instead of returning\na Internal Server Error (pull request#2006\n).Correctly invoke response handlers for both regular request dispatching as\nwell as error handlers.Disable logger propagation by default for the app logger.Add support for range requests insend_file\n.app.test_clientincludes preset default environment, which can now be\ndirectly set, instead of perclient.get\n.Version 0.11.2\n\u00b6Bugfix release, unreleasedFix crash when running under PyPy3, see pull request#1814\n.Version 0.11.1\n\u00b6Bugfix release, released on June 7th 2016.Fixed a bug that preventedFLASK_APP=foobar/__init__.pyfrom working. See\npull request#1872\n.Version 0.11\n\u00b6Released on May 29th 2016, codename Absinthe.Added support to serializing top-level arrays toflask.jsonify()\n. This\nintroduces a security risk in ancient browsers. SeeJSON Securityfor details.Added before_render_template signal.Added**kwargstoflask.Test.test_client()to support passing\nadditional keyword arguments to the constructor offlask.Flask.test_client_class\n.AddedSESSION_REFRESH_EACH_REQUESTconfig key that controls the\nset-cookie behavior.If set toTruea permanent session will be\nrefreshed each request and get their lifetime extended, if set toFalseit will only be modified if the session actually modifies.\nNon permanent sessions are not affected by this and will always\nexpire if the browser window closes.Made Flask support custom JSON mimetypes for incoming data.Added support for returning tuples in the form(response,headers)from a view function.Addedflask.Config.from_json()\n.Addedflask.Flask.config_class\n.Addedflask.Config.get_namespace()\n.Templates are no longer automatically reloaded outside of debug mode. This\ncan be configured with the newTEMPLATES_AUTO_RELOADconfig key.Added a workaround for a limitation in Python 3.3\u2019s namespace loader.Added support for explicit root paths when using Python 3.3\u2019s namespace\npackages.Addedflaskand theflask.climodule to start the local\ndebug server through the click CLI system.This is recommended over the oldflask.run()method as it works faster and more reliable due to a\ndifferent design and also replacesFlask-Script\n.Error handlers that match specific classes are now checked first,\nthereby allowing catching exceptions that are subclasses of HTTP\nexceptions (inwerkzeug.exceptions\n).This makes it possible\nfor an extension author to create exceptions that will by default\nresult in the HTTP error of their choosing, but may be caught with\na custom error handler if desired.Addedflask.Config.from_mapping()\n.Flask will now log by default even if debug is disabled.The log format is\nnow hardcoded but the default log handling can be disabled through theLOGGER_HANDLER_POLICYconfiguration key.Removed deprecated module functionality.Added theEXPLAIN_TEMPLATE_LOADINGconfig flag which when enabled will\ninstruct Flask to explain how it locates templates.This should help\nusers debug when the wrong templates are loaded.Enforce blueprint handling in the order they were registered for template\nloading.Ported test suite to py.test.Deprecatedrequest.jsonin favour ofrequest.get_json()\n.Add \u201cpretty\u201d and \u201ccompressed\u201d separators definitions in jsonify() method.\nReduces JSON response size when JSONIFY_PRETTYPRINT_REGULAR=False by removing\nunnecessary white space included by default after separators.JSON responses are now terminated with a newline character, because it is a\nconvention that UNIX text files end with a newline and some clients don\u2019t\ndeal well when this newline is missing. Seehttps://github.com/pallets/flask/pull/1262\u2013 this came up originally as a\npart ofhttps://github.com/kennethreitz/httpbin/issues/168The automatically providedOPTIONSmethod is now correctly disabled if\nthe user registered an overriding rule with the lowercase-versionoptions(issue#1288\n).flask.json.jsonifynow supports thedatetime.datetype (pull request#1326\n).Don\u2019t leak exception info of already catched exceptions to context teardown\nhandlers (pull request#1393\n).Allow custom Jinja environment subclasses (pull request#1422\n).Updated extension dev guidelines.flask.gnow haspop()andsetdefaultmethods.Turn on autoescape forflask.templating.render_template_stringby default\n(pull request#1515\n).flask.extis now deprecated (pull request#1484\n).send_from_directorynow raises BadRequest if the filename is invalid on\nthe server OS (pull request#1763\n).Added theJSONIFY_MIMETYPEconfiguration variable (pull request#1728\n).Exceptions during teardown handling will no longer leave bad application\ncontexts lingering around.Version 0.10.2\n\u00b6(bugfix release, release date to be announced)Fixed brokentest_appcontext_signals()test case.Raise anAttributeErrorinflask.helpers.find_package()with a\nuseful message explaining why it is raised when a PEP 302 import hook is used\nwithout anis_package()method.Fixed an issue causing exceptions raised before entering a request or app\ncontext to be passed to teardown handlers.Fixed an issue with query parameters getting removed from requests in\nthe test client when absolute URLs were requested.Made@before_first_requestinto a decorator as intended.Fixed an etags bug when sending a file streams with a name.Fixedsend_from_directorynot expanding to the application root path\ncorrectly.Changed logic of before first request handlers to flip the flag after\ninvoking.This will allow some uses that are potentially dangerous but\nshould probably be permitted.Fixed Python 3 bug when a handler fromapp.url_build_error_handlersreraises theBuildError\n.Version 0.10.1\n\u00b6(bugfix release, released on June 14th 2013)Fixed an issue where|tojsonwas not quoting single quotes which\nmade the filter not work properly in HTML attributes.Now it\u2019s\npossible to use that filter in single quoted attributes.This should\nmake using that filter with angular.js easier.Added support for byte strings back to the session system.This broke\ncompatibility with the common case of people putting binary data for\ntoken verification into the session.Fixed an issue where registering the same method twice for the same endpoint\nwould trigger an exception incorrectly.Version 0.10\n\u00b6Released on June 13th 2013, codename Limoncello.Changed default cookie serialization format from pickle to JSON to\nlimit the impact an attacker can do if the secret key leaks.SeeVersion 0.10for more information.Addedtemplate_testmethods in addition to the already existingtemplate_filtermethod family.Addedtemplate_globalmethods in addition to the already existingtemplate_filtermethod family.Set the content-length header for x-sendfile.tojsonfilter now does not escape script blocks in HTML5 parsers.tojsonused in templates is now safe by default due.This was\nallowed due to the different escaping behavior.Flask will now raise an error if you attempt to register a new function\non an already used endpoint.Added wrapper module around simplejson and added default serialization\nof datetime objects.This allows much easier customization of how\nJSON is handled by Flask or any Flask extension.Removed deprecated internalflask.sessionmodule alias.Useflask.sessionsinstead to get the session module.This is not to\nbe confused withflask.sessionthe session proxy.Templates can now be rendered without request context.The behavior is\nslightly different as therequest\n,sessionandgobjects\nwill not be available and blueprint\u2019s context processors are not\ncalled.The config object is now available to the template as a real global and\nnot through a context processor which makes it available even in imported\ntemplates by default.Added an option to generate non-ascii encoded JSON which should result\nin less bytes being transmitted over the network.It\u2019s disabled by\ndefault to not cause confusion with existing libraries that might expectflask.json.dumpsto return bytestrings by default.flask.gis now stored on the app context instead of the request\ncontext.flask.gnow gained aget()method for not erroring out on non\nexisting items.flask.gnow can be used with theinoperator to see what\u2019s defined\nand it now is iterable and will yield all attributes stored.flask.Flask.request_globals_classgot renamed toflask.Flask.app_ctx_globals_classwhich is a better name to what it\ndoes since 0.10.request\n,sessionandgare now also added as proxies to the template\ncontext which makes them available in imported templates.One has to be\nvery careful with those though because usage outside of macros might\ncause caching.Flask will no longer invoke the wrong error handlers if a proxy\nexception is passed through.Added a workaround for chrome\u2019s cookies in localhost not working\nas intended with domain names.Changed logic for picking defaults for cookie values from sessions\nto work better with Google Chrome.Addedmessage_flashedsignal that simplifies flashing testing.Added support for copying of request contexts for better working with\ngreenlets.Removed custom JSON HTTP exception subclasses.If you were relying on them\nyou can reintroduce them again yourself trivially.Using them however is\nstrongly discouraged as the interface was flawed.Python requirements changed: requiring Python 2.6 or 2.7 now to prepare\nfor Python 3.3 port.Changed how the teardown system is informed about exceptions.This is now\nmore reliable in case something handles an exception halfway through\nthe error handling process.Request context preservation in debug mode now keeps the exception\ninformation around which means that teardown handlers are able to\ndistinguish error from success cases.Added theJSONIFY_PRETTYPRINT_REGULARconfiguration variable.Flask now orders JSON keys by default to not trash HTTP caches due to\ndifferent hash seeds between different workers.Addedappcontext_pushedandappcontext_poppedsignals.The builtin run method now takes theSERVER_NAMEinto account when\npicking the default port to run on.Addedflask.request.get_json()as a replacement for the oldflask.request.jsonproperty.Version 0.9\n\u00b6Released on July 1st 2012, codename Campari.Theflask.Request.on_json_loading_failed()now returns a JSON formatted\nresponse by default.Theflask.url_for()function now can generate anchors to the\ngenerated links.Theflask.url_for()function now can also explicitly generate\nURL rules specific to a given HTTP method.Logger now only returns the debug log setting if it was not set\nexplicitly.Unregister a circular dependency between the WSGI environment and\nthe request object when shutting down the request.This means that\nenvironwerkzeug.requestwill beNoneafter the response was\nreturned to the WSGI server but has the advantage that the garbage\ncollector is not needed on CPython to tear down the request unless\nthe user created circular dependencies themselves.Session is now stored after callbacks so that if the session payload\nis stored in the session you can still modify it in an after\nrequest callback.Theflask.Flaskclass will avoid importing the provided import name\nif it can (the required first parameter), to benefit tools which build Flask\ninstances programmatically.The Flask class will fall back to using import\non systems with custom module hooks, e.g. Google App Engine, or when the\nimport name is inside a zip archive (usually a .egg) prior to Python 2.7.Blueprints now have a decorator to add custom template filters application\nwide,flask.Blueprint.app_template_filter()\n.The Flask and Blueprint classes now have a non-decorator method for adding\ncustom template filters application wide,flask.Flask.add_template_filter()andflask.Blueprint.add_app_template_filter()\n.Theflask.get_flashed_messages()function now allows rendering flashed\nmessage categories in separate blocks, through acategory_filterargument.Theflask.Flask.run()method now acceptsNoneforhostandportarguments, using default values whenNone\n.This allows for calling run\nusing configuration values, e.g.app.run(app.config.get('MYHOST'),app.config.get('MYPORT'))\n, with proper behavior whether or not a config\nfile is provided.Theflask.render_template()method now accepts a either an iterable of\ntemplate names or a single template name.Previously, it only accepted a\nsingle template name.On an iterable, the first template found is rendered.Addedflask.Flask.app_context()which works very similar to the\nrequest context but only provides access to the current application.This\nalso adds support for URL generation without an active request context.View functions can now return a tuple with the first instance being an\ninstance offlask.Response\n.This allows for returningjsonify(error=\"errormsg\"),400from a view function.FlaskandBlueprintnow provide aget_send_file_max_age()hook for subclasses to override\nbehavior of serving static files from Flask when usingflask.Flask.send_static_file()(used for the default static file\nhandler) andsend_file()\n.This hook is provided a\nfilename, which for example allows changing cache controls by file extension.\nThe default max-age forsend_fileand static files can be configured\nthrough a newSEND_FILE_MAX_AGE_DEFAULTconfiguration variable, which is\nused in the defaultget_send_file_max_ageimplementation.Fixed an assumption in sessions implementation which could break message\nflashing on sessions implementations which use external storage.Changed the behavior of tuple return values from functions.They are no\nlonger arguments to the response object, they now have a defined meaning.Addedflask.Flask.request_globals_classto allow a specific class to\nbe used on creation of theginstance of each request.Addedrequired_methodsattribute to view functions to force-add methods\non registration.Addedflask.after_this_request()\n.Addedflask.stream_with_context()and the ability to push contexts\nmultiple times without producing unexpected behavior.Version 0.8.1\n\u00b6Bugfix release, released on July 1st 2012Fixed an issue with the undocumentedflask.sessionmodule to not\nwork properly on Python 2.5.It should not be used but did cause\nsome problems for package managers.Version 0.8\n\u00b6Released on September 29th 2011, codename RakijaRefactored session support into a session interface so that\nthe implementation of the sessions can be changed without\nhaving to override the Flask class.Empty session cookies are now deleted properly automatically.View functions can now opt out of getting the automatic\nOPTIONS implementation.HTTP exceptions and Bad Request errors can now be trapped so that they\nshow up normally in the traceback.Flask in debug mode is now detecting some common problems and tries to\nwarn you about them.Flask in debug mode will now complain with an assertion error if a view\nwas attached after the first request was handled.This gives earlier\nfeedback when users forget to import view code ahead of time.Added the ability to register callbacks that are only triggered once at\nthe beginning of the first request. (\nFlask.before_first_request()\n)Malformed JSON data will now trigger a bad request HTTP exception instead\nof a value error which usually would result in a 500 internal server\nerror if not handled.This is a backwards incompatible change.Applications now not only have a root path where the resources and modules\nare located but also an instance path which is the designated place to\ndrop files that are modified at runtime (uploads etc.).Also this is\nconceptually only instance depending and outside version control so it\u2019s\nthe perfect place to put configuration files etc.For more information\nseeInstance Folders\n.Added theAPPLICATION_ROOTconfiguration variable.Implementedsession_transaction()to\neasily modify sessions from the test environment.Refactored test client internally.TheAPPLICATION_ROOTconfiguration\nvariable as well asSERVER_NAMEare now properly used by the test client\nas defaults.Addedflask.views.View.decoratorsto support simpler decorating of\npluggable (class-based) views.Fixed an issue where the test client if used with the \u201cwith\u201d statement did not\ntrigger the execution of the teardown handlers.Added finer control over the session cookie parameters.HEAD requests to a method view now automatically dispatch to thegetmethod if no handler was implemented.Implemented the virtualflask.extpackage to import extensions from.The context preservation on exceptions is now an integral component of\nFlask itself and no longer of the test client.This cleaned up some\ninternal logic and lowers the odds of runaway request contexts in unittests.Version 0.7.3\n\u00b6Bugfix release, release date to be decidedFixed the Jinja2 environment\u2019s list_templates method not returning the\ncorrect names when blueprints or modules were involved.Version 0.7.2\n\u00b6Bugfix release, released on July 6th 2011Fixed an issue with URL processors not properly working on\nblueprints.Version 0.7.1\n\u00b6Bugfix release, released on June 29th 2011Added missing future import that broke 2.5 compatibility.Fixed an infinite redirect issue with blueprints.Version 0.7\n\u00b6Released on June 28th 2011, codename GrappaAddedmake_default_options_response()which can be used by subclasses to alter the default\nbehavior forOPTIONSresponses.Unbound locals now raise a properRuntimeErrorinstead\nof anAttributeError\n.Mimetype guessing and etag support based on file objects is now\ndeprecated forflask.send_file()because it was unreliable.\nPass filenames instead or attach your own etags and provide a\nproper mimetype by hand.Static file handling for modules now requires the name of the\nstatic folder to be supplied explicitly.The previous autodetection\nwas not reliable and caused issues on Google\u2019s App Engine.Until\n1.0 the old behavior will continue to work but issue dependency\nwarnings.fixed a problem for Flask to run on jython.added aPROPAGATE_EXCEPTIONSconfiguration variable that can be\nused to flip the setting of exception propagation which previously\nwas linked toDEBUGalone and is now linked to eitherDEBUGorTESTING\n.Flask no longer internally depends on rules being added through theadd_url_rulefunction and can now also accept regular werkzeug\nrules added to the url map.Added anendpointmethod to the flask application object which\nallows one to register a callback to an arbitrary endpoint with\na decorator.Use Last-Modified for static file sending instead of Date which\nwas incorrectly introduced in 0.6.Addedcreate_jinja_loaderto override the loader creation process.Implemented a silent flag forconfig.from_pyfile\n.Addedteardown_requestdecorator, for functions that should run at the end\nof a request regardless of whether an exception occurred.Also the behavior\nforafter_requestwas changed.It\u2019s now no longer executed when an exception\nis raised.SeeUpgrading to new Teardown HandlingImplementedflask.has_request_context()Deprecatedinit_jinja_globals\n.Override thecreate_jinja_environment()method instead to\nachieve the same functionality.Addedflask.safe_join()The automatic JSON request data unpacking now looks at the charset\nmimetype parameter.Don\u2019t modify the session onflask.get_flashed_messages()if there\nare no messages in the session.before_requesthandlers are now able to abort requests with errors.it is not possible to define user exception handlers.That way you can\nprovide custom error messages from a central hub for certain errors that\nmight occur during request processing (for instance database connection\nerrors, timeouts from remote resources etc.).Blueprints can provide blueprint specific error handlers.Implemented genericPluggable Views(class-based views).Version 0.6.1\n\u00b6Bugfix release, released on December 31st 2010Fixed an issue where the defaultOPTIONSresponse was\nnot exposing all valid methods in theAllowheader.Jinja2 template loading syntax now allows \u201c./\u201d in front of\na template load path.Previously this caused issues with\nmodule setups.Fixed an issue where the subdomain setting for modules was\nignored for the static folder.Fixed a security problem that allowed clients to download arbitrary files\nif the host server was a windows based operating system and the client\nuses backslashes to escape the directory the files where exposed from.Version 0.6\n\u00b6Released on July 27th 2010, codename Whiskyafter request functions are now called in reverse order of\nregistration.OPTIONS is now automatically implemented by Flask unless the\napplication explicitly adds \u2018OPTIONS\u2019 as method to the URL rule.\nIn this case no automatic OPTIONS handling kicks in.static rules are now even in place if there is no static folder\nfor the module.This was implemented to aid GAE which will\nremove the static folder if it\u2019s part of a mapping in the .yml\nfile.theconfigis now available in the templates\nasconfig\n.context processors will no longer override values passed directly\nto the render function.added the ability to limit the incoming request data with the\nnewMAX_CONTENT_LENGTHconfiguration value.the endpoint for theflask.Module.add_url_rule()method\nis now optional to be consistent with the function of the\nsame name on the application object.added aflask.make_response()function that simplifies\ncreating response object instances in views.added signalling support based on blinker.This feature is currently\noptional and supposed to be used by extensions and applications.If\nyou want to use it, make sure to haveblinkerinstalled.refactored the way URL adapters are created.This process is now\nfully customizable with thecreate_url_adapter()method.modules can now register for a subdomain instead of just an URL\nprefix.This makes it possible to bind a whole module to a\nconfigurable subdomain.Version 0.5.2\n\u00b6Bugfix Release, released on July 15th 2010fixed another issue with loading templates from directories when\nmodules were used.Version 0.5.1\n\u00b6Bugfix Release, released on July 6th 2010fixes an issue with template loading from directories when modules\nwhere used.Version 0.5\n\u00b6Released on July 6th 2010, codename Calvadosfixed a bug with subdomains that was caused by the inability to\nspecify the server name.The server name can now be set with\ntheSERVER_NAMEconfig key.This key is now also used to set\nthe session cookie cross-subdomain wide.autoescaping is no longer active for all templates.Instead it\nis only active for.html\n,.htm\n,.xmland.xhtml\n.\nInside templates this behavior can be changed with theautoescapetag.refactored Flask internally.It now consists of more than a\nsingle file.flask.send_file()now emits etags and has the ability to\ndo conditional responses builtin.(temporarily) dropped support for zipped applications.This was a\nrarely used feature and led to some confusing behavior.added support for per-package template and static-file directories.removed support forcreate_jinja_loaderwhich is no longer used\nin 0.5 due to the improved module support.added a helper function to expose files from any directory.Version 0.4\n\u00b6Released on June 18th 2010, codename Rakiaadded the ability to register application wide error handlers\nfrom modules.after_request()handlers are now also invoked\nif the request dies with an exception and an error handling page\nkicks in.test client has not the ability to preserve the request context\nfor a little longer.This can also be used to trigger custom\nrequests that do not pop the request stack for testing.because the Python standard library caches loggers, the name of\nthe logger is configurable now to better support unittests.addedTESTINGswitch that can activate unittesting helpers.the logger switches toDEBUGmode now if debug is enabled.Version 0.3.1\n\u00b6Bugfix release, released on May 28th 2010fixed a error reporting bug withflask.Config.from_envvar()removed some unused code from flaskrelease does no longer include development leftover files (.git\nfolder for themes, built documentation in zip and pdf file and\nsome .pyc files)Version 0.3\n\u00b6Released on May 28th 2010, codename Schnapsadded support for categories for flashed messages.the application now configures alogging.Handlerand will\nlog request handling exceptions to that logger when not in debug\nmode.This makes it possible to receive mails on server errors\nfor example.added support for context binding that does not require the use of\nthe with statement for playing in the console.the request context is now available within the with statement making\nit possible to further push the request context or pop it.added support for configurations.Version 0.2\n\u00b6Released on May 12th 2010, codename J\u00e4germeistervarious bugfixesintegrated JSON supportaddedget_template_attribute()helper function.add_url_rule()can now also register a\nview function.refactored internal request dispatching.server listens on 127.0.0.1 by default now to fix issues with chrome.added external URL support.added support forsend_file()module support and internal request handling refactoring\nto better support pluggable applications.sessions can be set to be permanent now on a per-session basis.better error reporting on missing secret keys.added support for Google Appengine.Version 0.1\n\u00b6First public preview release.ContentsFlask ChangelogVersion 1.0.3Version 1.0.2Version 1.0.1Version 1.0Version 0.12.4Version 0.12.3Version 0.12.2Version 0.12.1Version 0.12Version 0.11.2Version 0.11.1Version 0.11Version 0.10.2Version 0.10.1Version 0.10Version 0.9Version 0.8.1Version 0.8Version 0.7.3Version 0.7.2Version 0.7.1Version 0.7Version 0.6.1Version 0.6Version 0.5.2Version 0.5.1Version 0.5Version 0.4Version 0.3.1Version 0.3Version 0.2Version 0.1NavigationOverviewPrevious:Upgrading to Newer ReleasesNext:LicenseVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/changelog/"},
{"text": "Pocoo Styleguide \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPocoo Styleguide\n\u00b6The Pocoo styleguide is the styleguide for all Pocoo Projects, including\nFlask.This styleguide is a requirement for Patches to Flask and a\nrecommendation for Flask extensions.In general the Pocoo Styleguide closely followsPEP 8with some small\ndifferences and extensions.General Layout\n\u00b6Indentation:4 real spaces.No tabs, no exceptions.Maximum line length:79 characters with a soft limit for 84 if absolutely necessary.Try\nto avoid too nested code by cleverly placingbreak\n,continueandreturnstatements.Continuing long statements:To continue a statement you can use backslashes in which case you should\nalign the next line with the last dot or equal sign, or indent four\nspaces:this_is_a_very_long\n(\nfunction_call\n,'with many parameters'\n)\\.\nthat_returns_an_object_with_an_attributeMyModel\n.\nquery\n.\nfilter\n(\nMyModel\n.\nscalar>120\n)\\.\norder_by\n(\nMyModel\n.\nname\n.\ndesc\n())\\.\nlimit\n(\n10\n)If you break in a statement with parentheses or braces, align to the\nbraces:this_is_a_very_long\n(\nfunction_call\n,'with many parameters'\n,23\n,42\n,'and even more'\n)For lists or tuples with many items, break immediately after the\nopening brace:items=['this is the first'\n,'set of items'\n,'with more items'\n,'to come in this line'\n,'like this']Blank lines:Top level functions and classes are separated by two lines, everything\nelse by one.Do not use too many blank lines to separate logical\nsegments in code.Example:defhello\n(\nname\n):print'Hello%s\n!'%namedefgoodbye\n(\nname\n):print'See you%s\n.'%nameclassMyClass\n(\nobject\n):\"\"\"This is a simple docstring\"\"\"def__init__\n(\nself\n,name\n):self\n.\nname=namedefget_annoying_name\n(\nself\n):returnself\n.\nname\n.\nupper\n()+'!!!!111'Expressions and Statements\n\u00b6General whitespace rules:No whitespace for unary operators that are not words\n(e.g.:-\n,~etc.) as well on the inner side of parentheses.Whitespace is placed between binary operators.Good:exp=-\n1.05value=(\nitem_value/item_count\n)*offset/expvalue=my_list\n[\nindex\n]value=my_dict\n[\n'key'\n]Bad:exp=-1.05value=(item_value/item_count)*offset/expvalue=(\nitem_value\n/\nitem_count\n)\n*\noffset\n/\nexpvalue\n=\n(item_value\n/\nitem_count)*offset\n/\nexpvalue=my_list\n[index]value=my_dict[\n'key'\n]Yoda statements are a no-go:Never compare constant with variable, always variable with constant:Good:ifmethod=='md5'\n:passBad:if'md5'==method\n:passComparisons:against arbitrary types:==and!=against singletons withisandisnot(eg:fooisnotNone\n)never compare something withTrueorFalse(for example never\ndofoo==False\n, donotfooinstead)Negated containment checks:usefoonotinbarinstead ofnotfooinbarInstance checks:isinstance(a,C)instead oftype(A)isC\n, but try to avoid\ninstance checks in general.Check for features.Naming Conventions\n\u00b6Class names:CamelCase\n, with acronyms kept uppercase (\nHTTPWriterand notHttpWriter\n)Variable names:lowercase_with_underscoresMethod and function names:lowercase_with_underscoresConstants:UPPERCASE_WITH_UNDERSCORESprecompiled regular expressions:name_reProtected members are prefixed with a single underscore.Double\nunderscores are reserved for mixin classes.On classes with keywords, trailing underscores are appended.Clashes with\nbuiltins are allowed andmust notbe resolved by appending an\nunderline to the variable name.If the function needs to access a\nshadowed builtin, rebind the builtin to a different name instead.Function and method arguments:class methods:clsas first parameterinstance methods:selfas first parameterlambdas for properties might have the first parameter replaced\nwithxlike indisplay_name=property(lambdax:x.real_nameorx.username)Docstrings\n\u00b6Docstring conventions:All docstrings are formatted with reStructuredText as understood by\nSphinx.Depending on the number of lines in the docstring, they are\nlaid out differently.If it\u2019s just one line, the closing triple\nquote is on the same line as the opening, otherwise the text is on\nthe same line as the opening quote and the triple quote that closes\nthe string on its own line:deffoo\n():\"\"\"This is a simple docstring\"\"\"defbar\n():\"\"\"This is a longer docstring with so much information in therethat it spans three lines.In this case the closing triple quoteis on its own line.\"\"\"Module header:The module header consists of a utf-8 encoding declaration (if non\nASCII letters are used, but it is recommended all the time) and a\nstandard docstring:# -*- coding: utf-8 -*-\"\"\"package.module~~~~~~~~~~~~~~A brief description goes here.:copyright: (c) YEAR by AUTHOR.:license: LICENSE_NAME, see LICENSE_FILE for more details.\"\"\"Please keep in mind that proper copyrights and license files are a\nrequirement for approved Flask extensions.Comments\n\u00b6Rules for comments are similar to docstrings.Both are formatted with\nreStructuredText.If a comment is used to document an attribute, put a\ncolon after the opening pound sign (\n#\n):classUser\n(\nobject\n):#: the name of the user as unicode stringname=Column\n(\nString\n)#: the sha1 hash of the password + inline saltpw_hash=Column\n(\nString\n)ContentsPocoo StyleguideGeneral LayoutExpressions and StatementsNaming ConventionsDocstringsCommentsNavigationOverviewPrevious:Flask Extension DevelopmentNext:Upgrading to Newer ReleasesVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/styleguide/"},
{"text": "Flask Extension Development \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbFlask Extension Development\n\u00b6Flask, being a microframework, often requires some repetitive steps to get\na third party library working.Because very often these steps could be\nabstracted to support multiple projects theFlask Extension Registrywas created.If you want to create your own Flask extension for something that does not\nexist yet, this guide to extension development will help you get your\nextension running in no time and to feel like users would expect your\nextension to behave.Anatomy of an Extension\n\u00b6Extensions are all located in a package calledflask_somethingwhere \u201csomething\u201d is the name of the library you want to bridge.So for\nexample if you plan to add support for a library namedsimplexmlto\nFlask, you would name your extension\u2019s packageflask_simplexml\n.The name of the actual extension (the human readable name) however would\nbe something like \u201cFlask-SimpleXML\u201d.Make sure to include the name\n\u201cFlask\u201d somewhere in that name and that you check the capitalization.\nThis is how users can then register dependencies to your extension in\ntheirsetup.pyfiles.But what do extensions look like themselves?An extension has to ensure\nthat it works with multiple Flask application instances at once.This is\na requirement because many people will use patterns like theApplication Factoriespattern to create their application as needed to aid\nunittests and to support multiple configurations.Because of that it is\ncrucial that your application supports that kind of behavior.Most importantly the extension must be shipped with asetup.pyfile and\nregistered on PyPI.Also the development checkout link should work so\nthat people can easily install the development version into their\nvirtualenv without having to download the library by hand.Flask extensions must be licensed under a BSD, MIT or more liberal license\nin order to be listed in the Flask Extension Registry.Keep in mind\nthat the Flask Extension Registry is a moderated place and libraries will\nbe reviewed upfront if they behave as required.\u201cHello Flaskext!\u201d\n\u00b6So let\u2019s get started with creating such a Flask extension.The extension\nwe want to create here will provide very basic support for SQLite3.First we create the following folder structure:flask\n-\nsqlite3\n/flask_sqlite3\n.\npyLICENSEREADMEHere\u2019s the contents of the most important files:setup.py\n\u00b6The next file that is absolutely required is thesetup.pyfile which is\nused to install your Flask extension.The following contents are\nsomething you can work with:\"\"\"Flask-SQLite3-------------This is the description for that library\"\"\"fromsetuptoolsimportsetupsetup\n(name\n=\n'Flask-SQLite3'\n,version\n=\n'1.0'\n,url\n=\n'http://example.com/flask-sqlite3/'\n,license\n=\n'BSD'\n,author\n=\n'Your Name'\n,author_email\n=\n'your-email@example.com'\n,description\n=\n'Very short description'\n,long_description\n=\n__doc__\n,py_modules\n=\n[\n'flask_sqlite3'\n],# if you would be using a package instead use packages instead# of py_modules:# packages=['flask_sqlite3'],zip_safe\n=\nFalse\n,include_package_data\n=\nTrue\n,platforms\n=\n'any'\n,install_requires\n=\n['Flask'],classifiers\n=\n['Environment :: Web Environment'\n,'Intended Audience :: Developers'\n,'License :: OSI Approved :: BSD License'\n,'Operating System :: OS Independent'\n,'Programming Language :: Python'\n,'Topic :: Internet :: WWW/HTTP :: Dynamic Content'\n,'Topic :: Software Development :: Libraries :: Python Modules'])That\u2019s a lot of code but you can really just copy/paste that from existing\nextensions and adapt.flask_sqlite3.py\n\u00b6Now this is where your extension code goes.But how exactly should such\nan extension look like?What are the best practices?Continue reading\nfor some insight.Initializing Extensions\n\u00b6Many extensions will need some kind of initialization step.For example,\nconsider an application that\u2019s currently connecting to SQLite like the\ndocumentation suggests (\nUsing SQLite 3 with Flask\n).So how does the extension\nknow the name of the application object?Quite simple: you pass it to it.There are two recommended ways for an extension to initialize:initialization functions:If your extension is calledhelloworldyou might have a function\ncalledinit_helloworld(app[,extra_args])that initializes the\nextension for that application.It could attach before / after\nhandlers etc.classes:Classes work mostly like initialization functions but can later be\nused to further change the behavior.For an example look at how theOAuth extensionworks: there is anOAuthobject that provides\nsome helper functions likeOAuth.remote_appto create a reference to\na remote application that uses OAuth.What to use depends on what you have in mind.For the SQLite 3 extension\nwe will use the class-based approach because it will provide users with an\nobject that handles opening and closing database connections.When designing your classes, it\u2019s important to make them easily reusable\nat the module level. This means the object itself must not under any\ncircumstances store any application specific state and must be shareable\nbetween different applications.The Extension Code\n\u00b6Here\u2019s the contents of theflask_sqlite3.pyfor copy/paste:importsqlite3fromflaskimportcurrent_app\n,_app_ctx_stackclassSQLite3\n(\nobject\n):def__init__\n(\nself\n,app\n=\nNone\n):self\n.\napp=appifappisnotNone\n:self\n.\ninit_app\n(\napp\n)definit_app\n(\nself\n,app\n):app\n.\nconfig\n.\nsetdefault\n(\n'SQLITE3_DATABASE'\n,':memory:'\n)app\n.\nteardown_appcontext\n(\nself\n.\nteardown\n)defconnect\n(\nself\n):returnsqlite3\n.\nconnect\n(\ncurrent_app\n.\nconfig\n[\n'SQLITE3_DATABASE'\n])defteardown\n(\nself\n,exception\n):ctx=_app_ctx_stack\n.\ntopifhasattr\n(\nctx\n,'sqlite3_db'\n):ctx\n.\nsqlite3_db\n.\nclose\n()@propertydefconnection\n(\nself\n):ctx=_app_ctx_stack\n.\ntopifctxisnotNone\n:ifnothasattr\n(\nctx\n,'sqlite3_db'\n):ctx\n.\nsqlite3_db=self\n.\nconnect\n()returnctx\n.\nsqlite3_dbSo here\u2019s what these lines of code do:The__init__method takes an optional app object and, if supplied, will\ncallinit_app\n.Theinit_appmethod exists so that theSQLite3object can be\ninstantiated without requiring an app object.This method supports the\nfactory pattern for creating applications.Theinit_appwill set the\nconfiguration for the database, defaulting to an in memory database if\nno configuration is supplied.In addition, theinit_appmethod attaches\ntheteardownhandler.Next, we define aconnectmethod that opens a database connection.Finally, we add aconnectionproperty that on first access opens\nthe database connection and stores it on the context.This is also\nthe recommended way to handling resources: fetch resources lazily the\nfirst time they are used.Note here that we\u2019re attaching our database connection to the top\napplication context via_app_ctx_stack.top\n. Extensions should use\nthe top context for storing their own information with a sufficiently\ncomplex name.So why did we decide on a class-based approach here?Because using our\nextension looks something like this:fromflaskimportFlaskfromflask_sqlite3importSQLite3app=Flask\n(\n__name__\n)app\n.\nconfig\n.\nfrom_pyfile\n(\n'the-config.cfg'\n)db=SQLite3\n(\napp\n)You can then use the database from views like this:@app\n.\nroute\n(\n'/'\n)defshow_all\n():cur=db\n.\nconnection\n.\ncursor\n()cur\n.\nexecute\n(\n...\n)Likewise if you are outside of a request you can use the database by\npushing an app context:withapp\n.\napp_context\n():cur=db\n.\nconnection\n.\ncursor\n()cur\n.\nexecute\n(\n...\n)At the end of thewithblock the teardown handles will be executed\nautomatically.Additionally, theinit_appmethod is used to support the factory pattern\nfor creating apps:db=Sqlite3\n()# Then later on.app=create_app\n(\n'the-config.cfg'\n)db\n.\ninit_app\n(\napp\n)Keep in mind that supporting this factory pattern for creating apps is required\nfor approved flask extensions (described below).Note oninit_appAs you noticed,init_appdoes not assignapptoself\n.This\nis intentional!Class based Flask extensions must only store the\napplication on the object when the application was passed to the\nconstructor.This tells the extension: I am not interested in using\nmultiple applications.When the extension needs to find the current application and it does\nnot have a reference to it, it must either use thecurrent_appcontext local or change the API in a way\nthat you can pass the application explicitly.Using _app_ctx_stack\n\u00b6In the example above, before every request, asqlite3_dbvariable is\nassigned to_app_ctx_stack.top\n.In a view function, this variable is\naccessible using theconnectionproperty ofSQLite3\n.During the\nteardown of a request, thesqlite3_dbconnection is closed.By using\nthis pattern, thesameconnection to the sqlite3 database is accessible\nto anything that needs it for the duration of the request.Learn from Others\n\u00b6This documentation only touches the bare minimum for extension\ndevelopment.If you want to learn more, it\u2019s a very good idea to check\nout existing extensions on theFlask Extension Registry\n.If you feel\nlost there is still themailinglistand theIRC channelto get some\nideas for nice looking APIs.Especially if you do something nobody before\nyou did, it might be a very good idea to get some more input.This not only\ngenerates useful feedback on what people might want from an extension, but\nalso avoids having multiple developers working in isolation on pretty much the\nsame problem.Remember: good API design is hard, so introduce your project on the\nmailinglist, and let other developers give you a helping hand with\ndesigning the API.The best Flask extensions are extensions that share common idioms for the\nAPI.And this can only work if collaboration happens early.Approved Extensions\n\u00b6Flask also has the concept of approved extensions.Approved extensions\nare tested as part of Flask itself to ensure extensions do not break on\nnew releases.These approved extensions are listed on theFlask\nExtension Registryand marked appropriately.If you want your own\nextension to be approved you have to follow these guidelines:An approved Flask extension requires a maintainer. In the event an\nextension author would like to move beyond the project, the project should\nfind a new maintainer including full source hosting transition and PyPI\naccess.If no maintainer is available, give access to the Flask core team.An approved Flask extension must provide exactly one package or module\nnamedflask_extensionname\n.It must ship a testing suite that can either be invoked withmaketestorpythonsetup.pytest\n.For test suites invoked withmaketestthe extension has to ensure that all dependencies for the test\nare installed automatically.If tests are invoked withpythonsetup.pytest\n, test dependencies can be specified in thesetup.pyfile.The\ntest suite also has to be part of the distribution.APIs of approved extensions will be checked for the following\ncharacteristics:an approved extension has to support multiple applications\nrunning in the same Python process.it must be possible to use the factory pattern for creating\napplications.The license must be BSD/MIT/WTFPL licensed.The naming scheme for official extensions isFlask-ExtensionNameorExtensionName-Flask\n.Approved extensions must define all their dependencies in thesetup.pyfile unless a dependency cannot be met because it is not\navailable on PyPI.The documentation must use theflasktheme from theOfficial\nPallets Themes\n.The setup.py description (and thus the PyPI description) has to\nlink to the documentation, website (if there is one) and there\nmust be a link to automatically install the development version\n(\nPackageName==dev\n).Thezip_safeflag in the setup script must be set toFalse\n,\neven if the extension would be safe for zipping.An extension currently has to support Python 3.4 and newer and 2.7.ContentsFlask Extension DevelopmentAnatomy of an Extension\u201cHello Flaskext!\u201dsetup.pyflask_sqlite3.pyInitializing ExtensionsThe Extension CodeUsing _app_ctx_stackLearn from OthersApproved ExtensionsNavigationOverviewPrevious:Unicode in FlaskNext:Pocoo StyleguideVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/extensiondev/"},
{"text": "Test Coverage \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTutorial\u00bbTest Coverage\n\u00b6Writing unit tests for your application lets you check that the code\nyou wrote works the way you expect. Flask provides a test client that\nsimulates requests to the application and returns the response data.You should test as much of your code as possible. Code in functions only\nruns when the function is called, and code in branches, such asifblocks, only runs when the condition is met. You want to make sure that\neach function is tested with data that covers each branch.The closer you get to 100% coverage, the more comfortable you can be\nthat making a change won\u2019t unexpectedly change other behavior. However,\n100% coverage doesn\u2019t guarantee that your application doesn\u2019t have bugs.\nIn particular, it doesn\u2019t test how the user interacts with the\napplication in the browser. Despite this, test coverage is an important\ntool to use during development.NoteThis is being introduced late in the tutorial, but in your future\nprojects you should test as you develop.You\u2019ll usepytestandcoverageto test and measure your code.\nInstall them both:pip install pytest coverageSetup and Fixtures\n\u00b6The test code is located in thetestsdirectory. This directory isnext totheflaskrpackage, not inside it. Thetests/conftest.pyfile contains setup functions calledfixturesthat each test will use. Tests are in Python modules that start withtest_\n, and each test function in those modules also starts withtest_\n.Each test will create a new temporary database file and populate some\ndata that will be used in the tests. Write a SQL file to insert that\ndata.tests/data.sql\n\u00b6INSERTINTOuser(\nusername\n,password\n)VALUES(\n'test'\n,'pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f'\n),(\n'other'\n,'pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79'\n);INSERTINTOpost(\ntitle\n,body\n,author_id\n,created\n)VALUES(\n'test title'\n,'test'||x\n'0a'||'body'\n,1\n,'2018-01-01 00:00:00'\n);Theappfixture will call the factory and passtest_configto\nconfigure the application and database for testing instead of using your\nlocal development configuration.tests/conftest.py\n\u00b6importosimporttempfileimportpytestfromflaskrimportcreate_appfromflaskr.dbimportget_db\n,init_dbwithopen\n(\nos\n.\npath\n.\njoin\n(\nos\n.\npath\n.\ndirname\n(\n__file__\n),'data.sql'\n),'rb'\n)asf\n:_data_sql=f\n.\nread\n()\n.\ndecode\n(\n'utf8'\n)@pytest.fixturedefapp\n():db_fd\n,db_path=tempfile\n.\nmkstemp\n()app=create_app\n({'TESTING'\n:True\n,'DATABASE'\n:db_path\n,})withapp\n.\napp_context\n():init_db\n()get_db\n()\n.\nexecutescript\n(\n_data_sql\n)yieldappos\n.\nclose\n(\ndb_fd\n)os\n.\nunlink\n(\ndb_path\n)@pytest.fixturedefclient\n(\napp\n):returnapp\n.\ntest_client\n()@pytest.fixturedefrunner\n(\napp\n):returnapp\n.\ntest_cli_runner\n()tempfile.mkstemp()creates and opens a temporary file, returning\nthe file object and the path to it. TheDATABASEpath is\noverridden so it points to this temporary path instead of the instance\nfolder. After setting the path, the database tables are created and the\ntest data is inserted. After the test is over, the temporary file is\nclosed and removed.TESTINGtells Flask that the app is in test mode. Flask changes\nsome internal behavior so it\u2019s easier to test, and other extensions can\nalso use the flag to make testing them easier.Theclientfixture callsapp.test_client()with the application\nobject created by theappfixture. Tests will use the client to make\nrequests to the application without running the server.Therunnerfixture is similar toclient\n.app.test_cli_runner()creates a runner\nthat can call the Click commands registered with the application.Pytest uses fixtures by matching their function names with the names\nof arguments in the test functions. For example, thetest_hellofunction you\u2019ll write next takes aclientargument. Pytest matches\nthat with theclientfixture function, calls it, and passes the\nreturned value to the test function.Factory\n\u00b6There\u2019s not much to test about the factory itself. Most of the code will\nbe executed for each test already, so if something fails the other tests\nwill notice.The only behavior that can change is passing test config. If config is\nnot passed, there should be some default configuration, otherwise the\nconfiguration should be overridden.tests/test_factory.py\n\u00b6fromflaskrimportcreate_appdeftest_config\n():assertnotcreate_app\n()\n.\ntestingassertcreate_app\n({\n'TESTING'\n:True\n})\n.\ntestingdeftest_hello\n(\nclient\n):response=client\n.\nget\n(\n'/hello'\n)assertresponse\n.\ndata==b\n'Hello, World!'You added thehelloroute as an example when writing the factory at\nthe beginning of the tutorial. It returns \u201cHello, World!\u201d, so the test\nchecks that the response data matches.Database\n\u00b6Within an application context,get_dbshould return the same\nconnection each time it\u2019s called. After the context, the connection\nshould be closed.tests/test_db.py\n\u00b6importsqlite3importpytestfromflaskr.dbimportget_dbdeftest_get_close_db\n(\napp\n):withapp\n.\napp_context\n():db=get_db\n()assertdbisget_db\n()withpytest\n.\nraises\n(\nsqlite3\n.\nProgrammingError\n)ase\n:db\n.\nexecute\n(\n'SELECT 1'\n)assert'closed'instr\n(\ne\n)Theinit-dbcommand should call theinit_dbfunction and output\na message.tests/test_db.py\n\u00b6deftest_init_db_command\n(\nrunner\n,monkeypatch\n):classRecorder\n(\nobject\n):called=Falsedeffake_init_db\n():Recorder\n.\ncalled=Truemonkeypatch\n.\nsetattr\n(\n'flaskr.db.init_db'\n,fake_init_db\n)result=runner\n.\ninvoke\n(\nargs\n=\n[\n'init-db'\n])assert'Initialized'inresult\n.\noutputassertRecorder\n.\ncalledThis test uses Pytest\u2019smonkeypatchfixture to replace theinit_dbfunction with one that records that it\u2019s been called. Therunnerfixture you wrote above is used to call theinit-dbcommand by name.Authentication\n\u00b6For most of the views, a user needs to be logged in. The easiest way to\ndo this in tests is to make aPOSTrequest to theloginview\nwith the client. Rather than writing that out every time, you can write\na class with methods to do that, and use a fixture to pass it the client\nfor each test.tests/conftest.py\n\u00b6classAuthActions\n(\nobject\n):def__init__\n(\nself\n,client\n):self\n.\n_client=clientdeflogin\n(\nself\n,username\n=\n'test'\n,password\n=\n'test'\n):returnself\n.\n_client\n.\npost\n('/auth/login'\n,data\n=\n{\n'username'\n:username\n,'password'\n:password\n})deflogout\n(\nself\n):returnself\n.\n_client\n.\nget\n(\n'/auth/logout'\n)@pytest.fixturedefauth\n(\nclient\n):returnAuthActions\n(\nclient\n)With theauthfixture, you can callauth.login()in a test to\nlog in as thetestuser, which was inserted as part of the test\ndata in theappfixture.Theregisterview should render successfully onGET\n. OnPOSTwith valid form data, it should redirect to the login URL and the user\u2019s\ndata should be in the database. Invalid data should display error\nmessages.tests/test_auth.py\n\u00b6importpytestfromflaskimportg\n,sessionfromflaskr.dbimportget_dbdeftest_register\n(\nclient\n,app\n):assertclient\n.\nget\n(\n'/auth/register'\n)\n.\nstatus_code==200response=client\n.\npost\n('/auth/register'\n,data\n=\n{\n'username'\n:'a'\n,'password'\n:'a'\n})assert'http://localhost/auth/login'==response\n.\nheaders\n[\n'Location'\n]withapp\n.\napp_context\n():assertget_db\n()\n.\nexecute\n(\"select * from user where username = 'a'\"\n,)\n.\nfetchone\n()isnotNone@pytest.mark.parametrize\n((\n'username'\n,'password'\n,'message'\n),((\n''\n,''\n,b\n'Username is required.'\n),(\n'a'\n,''\n,b\n'Password is required.'\n),(\n'test'\n,'test'\n,b\n'already registered'\n),))deftest_register_validate_input\n(\nclient\n,username\n,password\n,message\n):response=client\n.\npost\n('/auth/register'\n,data\n=\n{\n'username'\n:username\n,'password'\n:password\n})assertmessageinresponse\n.\ndataclient.get()makes aGETrequest\nand returns theResponseobject returned by Flask. Similarly,client.post()makes aPOSTrequest, converting thedatadict into form data.To test that the page renders successfully, a simple request is made and\nchecked for a200OKstatus_code\n. If\nrendering failed, Flask would return a500InternalServerErrorcode.headerswill have aLocationheader with the login\nURL when the register view redirects to the login view.datacontains the body of the response as bytes. If\nyou expect a certain value to render on the page, check that it\u2019s indata\n. Bytes must be compared to bytes. If you want to compare\nUnicode text, useget_data(as_text=True)instead.pytest.mark.parametrizetells Pytest to run the same test function\nwith different arguments. You use it here to test different invalid\ninput and error messages without writing the same code three times.The tests for theloginview are very similar to those forregister\n. Rather than testing the data in the database,sessionshould haveuser_idset after logging in.tests/test_auth.py\n\u00b6deftest_login\n(\nclient\n,auth\n):assertclient\n.\nget\n(\n'/auth/login'\n)\n.\nstatus_code==200response=auth\n.\nlogin\n()assertresponse\n.\nheaders\n[\n'Location'\n]=='http://localhost/'withclient\n:client\n.\nget\n(\n'/'\n)assertsession\n[\n'user_id'\n]==1assertg\n.\nuser\n[\n'username'\n]=='test'@pytest.mark.parametrize\n((\n'username'\n,'password'\n,'message'\n),((\n'a'\n,'test'\n,b\n'Incorrect username.'\n),(\n'test'\n,'a'\n,b\n'Incorrect password.'\n),))deftest_login_validate_input\n(\nauth\n,username\n,password\n,message\n):response=auth\n.\nlogin\n(\nusername\n,password\n)assertmessageinresponse\n.\ndataUsingclientin awithblock allows accessing context variables\nsuch assessionafter the response is returned. Normally,\naccessingsessionoutside of a request would raise an error.Testinglogoutis the opposite oflogin\n.sessionshould\nnot containuser_idafter logging out.tests/test_auth.py\n\u00b6deftest_logout\n(\nclient\n,auth\n):auth\n.\nlogin\n()withclient\n:auth\n.\nlogout\n()assert'user_id'notinsessionBlog\n\u00b6All the blog views use theauthfixture you wrote earlier. Callauth.login()and subsequent requests from the client will be logged\nin as thetestuser.Theindexview should display information about the post that was\nadded with the test data. When logged in as the author, there should be\na link to edit the post.You can also test some more authentication behavior while testing theindexview. When not logged in, each page shows links to log in or\nregister. When logged in, there\u2019s a link to log out.tests/test_blog.py\n\u00b6importpytestfromflaskr.dbimportget_dbdeftest_index\n(\nclient\n,auth\n):response=client\n.\nget\n(\n'/'\n)assertb\n\"Log In\"inresponse\n.\ndataassertb\n\"Register\"inresponse\n.\ndataauth\n.\nlogin\n()response=client\n.\nget\n(\n'/'\n)assertb\n'Log Out'inresponse\n.\ndataassertb\n'test title'inresponse\n.\ndataassertb\n'by test on 2018-01-01'inresponse\n.\ndataassertb\n'test\n\\n\nbody'inresponse\n.\ndataassertb\n'href=\"/1/update\"'inresponse\n.\ndataA user must be logged in to access thecreate\n,update\n, anddeleteviews. The logged in user must be the author of the post to\naccessupdateanddelete\n, otherwise a403Forbiddenstatus\nis returned. If apostwith the giveniddoesn\u2019t exist,updateanddeleteshould return404NotFound\n.tests/test_blog.py\n\u00b6@pytest.mark.parametrize\n(\n'path'\n,('/create'\n,'/1/update'\n,'/1/delete'\n,))deftest_login_required\n(\nclient\n,path\n):response=client\n.\npost\n(\npath\n)assertresponse\n.\nheaders\n[\n'Location'\n]=='http://localhost/auth/login'deftest_author_required\n(\napp\n,client\n,auth\n):# change the post author to another userwithapp\n.\napp_context\n():db=get_db\n()db\n.\nexecute\n(\n'UPDATE post SET author_id = 2 WHERE id = 1'\n)db\n.\ncommit\n()auth\n.\nlogin\n()# current user can't modify other user's postassertclient\n.\npost\n(\n'/1/update'\n)\n.\nstatus_code==403assertclient\n.\npost\n(\n'/1/delete'\n)\n.\nstatus_code==403# current user doesn't see edit linkassertb\n'href=\"/1/update\"'notinclient\n.\nget\n(\n'/'\n)\n.\ndata@pytest.mark.parametrize\n(\n'path'\n,('/2/update'\n,'/2/delete'\n,))deftest_exists_required\n(\nclient\n,auth\n,path\n):auth\n.\nlogin\n()assertclient\n.\npost\n(\npath\n)\n.\nstatus_code==404Thecreateandupdateviews should render and return a200OKstatus for aGETrequest. When valid data is sent in aPOSTrequest,createshould insert the new post data into the\ndatabase, andupdateshould modify the existing data. Both pages\nshould show an error message on invalid data.tests/test_blog.py\n\u00b6deftest_create\n(\nclient\n,auth\n,app\n):auth\n.\nlogin\n()assertclient\n.\nget\n(\n'/create'\n)\n.\nstatus_code==200client\n.\npost\n(\n'/create'\n,data\n=\n{\n'title'\n:'created'\n,'body'\n:''\n})withapp\n.\napp_context\n():db=get_db\n()count=db\n.\nexecute\n(\n'SELECT COUNT(id) FROM post'\n)\n.\nfetchone\n()[\n0\n]assertcount==2deftest_update\n(\nclient\n,auth\n,app\n):auth\n.\nlogin\n()assertclient\n.\nget\n(\n'/1/update'\n)\n.\nstatus_code==200client\n.\npost\n(\n'/1/update'\n,data\n=\n{\n'title'\n:'updated'\n,'body'\n:''\n})withapp\n.\napp_context\n():db=get_db\n()post=db\n.\nexecute\n(\n'SELECT * FROM post WHERE id = 1'\n)\n.\nfetchone\n()assertpost\n[\n'title'\n]=='updated'@pytest.mark.parametrize\n(\n'path'\n,('/create'\n,'/1/update'\n,))deftest_create_update_validate\n(\nclient\n,auth\n,path\n):auth\n.\nlogin\n()response=client\n.\npost\n(\npath\n,data\n=\n{\n'title'\n:''\n,'body'\n:''\n})assertb\n'Title is required.'inresponse\n.\ndataThedeleteview should redirect to the index URL and the post should\nno longer exist in the database.tests/test_blog.py\n\u00b6deftest_delete\n(\nclient\n,auth\n,app\n):auth\n.\nlogin\n()response=client\n.\npost\n(\n'/1/delete'\n)assertresponse\n.\nheaders\n[\n'Location'\n]=='http://localhost/'withapp\n.\napp_context\n():db=get_db\n()post=db\n.\nexecute\n(\n'SELECT * FROM post WHERE id = 1'\n)\n.\nfetchone\n()assertpostisNoneRunning the Tests\n\u00b6Some extra configuration, which is not required but makes running\ntests with coverage less verbose, can be added to the project\u2019ssetup.cfgfile.setup.cfg\n\u00b6[tool:pytest]\ntestpaths = tests[coverage:run]\nbranch = True\nsource =flaskrTo run the tests, use thepytestcommand. It will find and run all\nthe test functions you\u2019ve written.pytest========================= test session starts ==========================\nplatform linux -- Python 3.6.4, pytest-3.5.0, py-1.5.3, pluggy-0.6.0\nrootdir: /home/user/Projects/flask-tutorial, inifile: setup.cfg\ncollected 23 itemstests/test_auth.py ........[ 34%]\ntests/test_blog.py ............[ 86%]\ntests/test_db.py ..[ 95%]\ntests/test_factory.py ..[100%]====================== 24 passed in 0.64 seconds =======================If any tests fail, pytest will show the error that was raised. You can\nrunpytest-vto get a list of each test function rather than dots.To measure the code coverage of your tests, use thecoveragecommand\nto run pytest instead of running it directly.coverage run -m pytestYou can either view a simple coverage report in the terminal:coverage reportNameStmtsMiss Branch BrPartCover\n------------------------------------------------------\nflaskr/__init__.py21020100%\nflaskr/auth.py540220100%\nflaskr/blog.py540160100%\nflaskr/db.py24040100%\n------------------------------------------------------\nTOTAL1530440100%An HTML report allows you to see which lines were covered in each file:coverage htmlThis generates files in thehtmlcovdirectory. Openhtmlcov/index.htmlin your browser to see the report.Continue toDeploy to Production\n.ContentsTest CoverageSetup and FixturesFactoryDatabaseAuthenticationBlogRunning the TestsNavigationOverviewTutorialPrevious:Make the Project InstallableNext:Deploy to ProductionVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/tutorial/tests/"},
{"text": "HTML/XHTML FAQ \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbHTML/XHTML FAQ\n\u00b6The Flask documentation and example applications are using HTML5.You\nmay notice that in many situations, when end tags are optional they are\nnot used, so that the HTML is cleaner and faster to load.Because there\nis much confusion about HTML and XHTML among developers, this document tries\nto answer some of the major questions.History of XHTML\n\u00b6For a while, it appeared that HTML was about to be replaced by XHTML.\nHowever, barely any websites on the Internet are actual XHTML (which is\nHTML processed using XML rules).There are a couple of major reasons\nwhy this is the case.One of them is Internet Explorer\u2019s lack of proper\nXHTML support. The XHTML spec states that XHTML must be served with the MIME\ntypeapplication/xhtml+xml\n, but Internet Explorer refuses to read files\nwith that MIME type.\nWhile it is relatively easy to configure Web servers to serve XHTML properly,\nfew people do.This is likely because properly using XHTML can be quite\npainful.One of the most important causes of pain is XML\u2019s draconian (strict and\nruthless) error handling.When an XML parsing error is encountered,\nthe browser is supposed to show the user an ugly error message, instead\nof attempting to recover from the error and display what it can.Most of\nthe (X)HTML generation on the web is based on non-XML template engines\n(such as Jinja, the one used in Flask) which do not protect you from\naccidentally creating invalid XHTML.There are XML based template engines,\nsuch as Kid and the popular Genshi, but they often come with a larger\nruntime overhead and are not as straightforward to use because they have\nto obey XML rules.The majority of users, however, assumed they were properly using XHTML.\nThey wrote an XHTML doctype at the top of the document and self-closed all\nthe necessary tags (\n<br>becomes<br/>or<br></br>in XHTML).\nHowever, even if the document properly validates as XHTML, what really\ndetermines XHTML/HTML processing in browsers is the MIME type, which as\nsaid before is often not set properly. So the valid XHTML was being treated\nas invalid HTML.XHTML also changed the way JavaScript is used. To properly work with XHTML,\nprogrammers have to use the namespaced DOM interface with the XHTML\nnamespace to query for HTML elements.History of HTML5\n\u00b6Development of the HTML5 specification was started in 2004 under the name\n\u201cWeb Applications 1.0\u201d by the Web Hypertext Application Technology Working\nGroup, or WHATWG (which was formed by the major browser vendors Apple,\nMozilla, and Opera) with the goal of writing a new and improved HTML\nspecification, based on existing browser behavior instead of unrealistic\nand backwards-incompatible specifications.For example, in HTML4<title/Hello/theoretically parses exactly the\nsame as<title>Hello</title>\n.However, since people were using\nXHTML-like tags along the lines of<link/>\n, browser vendors implemented\nthe XHTML syntax over the syntax defined by the specification.In 2007, the specification was adopted as the basis of a new HTML\nspecification under the umbrella of the W3C, known as HTML5.Currently,\nit appears that XHTML is losing traction, as the XHTML 2 working group has\nbeen disbanded and HTML5 is being implemented by all major browser vendors.HTML versus XHTML\n\u00b6The following table gives you a quick overview of features available in\nHTML 4.01, XHTML 1.1 and HTML5. (XHTML 1.0 is not included, as it was\nsuperseded by XHTML 1.1 and the barely-used XHTML5.)HTML4.01XHTML1.1HTML5<tag/value/==<tag>value</tag>[1]<br/>supported[2]<script/>supportedshould be served astext/html[3]should be served asapplication/xhtml+xmlstrict error handlinginline SVGinline MathML<video>tag<audio>tagNew semantic tags like<article>[1]\nThis is an obscure feature inherited from SGML. It is usually not\nsupported by browsers, for reasons detailed above.[2]\nThis is for compatibility with server code that generates XHTML for\ntags such as<br>\n.It should not be used in new code.[3]\nXHTML 1.0 is the last XHTML standard that allows to be served\nastext/htmlfor backwards compatibility reasons.What does \u201cstrict\u201d mean?\n\u00b6HTML5 has strictly defined parsing rules, but it also specifies exactly\nhow a browser should react to parsing errors - unlike XHTML, which simply\nstates parsing should abort. Some people are confused by apparently\ninvalid syntax that still generates the expected results (for example,\nmissing end tags or unquoted attribute values).Some of these work because of the lenient error handling most browsers use\nwhen they encounter a markup error, others are actually specified.The\nfollowing constructs are optional in HTML5 by standard, but have to be\nsupported by browsers:Wrapping the document in an<html>tagWrapping header elements in<head>or the body elements in<body>Closing the<p>\n,<li>\n,<dt>\n,<dd>\n,<tr>\n,<td>\n,<th>\n,<tbody>\n,<thead>\n, or<tfoot>tags.Quoting attributes, so long as they contain no whitespace or\nspecial characters (like<\n,>\n,'\n, or\"\n).Requiring boolean attributes to have a value.This means the following page in HTML5 is perfectly valid:<!doctype html><\ntitle\n>\nHello HTML5\n</\ntitle\n><\ndivclass\n=\nheader\n><\nh1\n>\nHello HTML5\n</\nh1\n><\npclass\n=\ntagline\n>\nHTML5 is awesome</\ndiv\n><\nulclass\n=\nnav\n><\nli\n><\nahref\n=\n/index\n>\nIndex\n</\na\n><\nli\n><\nahref\n=\n/downloads\n>\nDownloads\n</\na\n><\nli\n><\nahref\n=\n/about\n>\nAbout\n</\na\n></\nul\n><\ndivclass\n=\nbody\n><\nh2\n>\nHTML5 is probably the future\n</\nh2\n><\np\n>There might be some other things around but in terms ofbrowser vendor support, HTML5 is hard to beat.<\ndl\n><\ndt\n>\nKey 1<\ndd\n>\nValue 1<\ndt\n>\nKey 2<\ndd\n>\nValue 2</\ndl\n></\ndiv\n>New technologies in HTML5\n\u00b6HTML5 adds many new features that make Web applications easier to write\nand to use.The<audio>and<video>tags provide a way to embed audio and\nvideo without complicated add-ons like QuickTime or Flash.Semantic elements like<article>\n,<header>\n,<nav>\n, and<time>that make content easier to understand.The<canvas>tag, which supports a powerful drawing API, reducing\nthe need for server-generated images to present data graphically.New form control types like<inputtype=\"date\">that allow user\nagents to make entering and validating values easier.Advanced JavaScript APIs like Web Storage, Web Workers, Web Sockets,\ngeolocation, and offline applications.Many other features have been added, as well. A good guide to new features\nin HTML5 is Mark Pilgrim\u2019s soon-to-be-published book,Dive Into HTML5\n.\nNot all of them are supported in browsers yet, however, so use caution.What should be used?\n\u00b6Currently, the answer is HTML5.There are very few reasons to use XHTML\nconsidering the latest developments in Web browsers.To summarize the\nreasons given above:Internet Explorer (which, sadly, currently leads in market share)\nhas poor support for XHTML.Many JavaScript libraries also do not support XHTML, due to the more\ncomplicated namespacing API it requires.HTML5 adds several new features, including semantic tags and the\nlong-awaited<audio>and<video>tags.It has the support of most browser vendors behind it.It is much easier to write, and more compact.For most applications, it is undoubtedly better to use HTML5 than XHTML.ContentsHTML/XHTML FAQHistory of XHTMLHistory of HTML5HTML versus XHTMLWhat does \u201cstrict\u201d mean?New technologies in HTML5What should be used?NavigationOverviewPrevious:Design Decisions in FlaskNext:Security ConsiderationsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/htmlfaq/"},
{"text": "Security Considerations \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbSecurity Considerations\n\u00b6Web applications usually face all kinds of security problems and it\u2019s very\nhard to get everything right.Flask tries to solve a few of these things\nfor you, but there are a couple more you have to take care of yourself.Cross-Site Scripting (XSS)\n\u00b6Cross site scripting is the concept of injecting arbitrary HTML (and with\nit JavaScript) into the context of a website.To remedy this, developers\nhave to properly escape text so that it cannot include arbitrary HTML\ntags.For more information on that have a look at the Wikipedia article\nonCross-Site Scripting\n.Flask configures Jinja2 to automatically escape all values unless\nexplicitly told otherwise.This should rule out all XSS problems caused\nin templates, but there are still other places where you have to be\ncareful:generating HTML without the help of Jinja2callingMarkupon data submitted by userssending out HTML from uploaded files, never do that, use theContent-Disposition:attachmentheader to prevent that problem.sending out textfiles from uploaded files.Some browsers are using\ncontent-type guessing based on the first few bytes so users could\ntrick a browser to execute HTML.Another thing that is very important are unquoted attributes.While\nJinja2 can protect you from XSS issues by escaping HTML, there is one\nthing it cannot protect you from: XSS by attribute injection.To counter\nthis possible attack vector, be sure to always quote your attributes with\neither double or single quotes when using Jinja expressions in them:<\ninputvalue\n=\n\"\n{{value}}\n\"\n>Why is this necessary?Because if you would not be doing that, an\nattacker could easily inject custom JavaScript handlers.For example an\nattacker could inject this piece of HTML+JavaScript:onmouseover=alert(document.cookie)When the user would then move with the mouse over the input, the cookie\nwould be presented to the user in an alert window.But instead of showing\nthe cookie to the user, a good attacker might also execute any other\nJavaScript code.In combination with CSS injections the attacker might\neven make the element fill out the entire page so that the user would\njust have to have the mouse anywhere on the page to trigger the attack.There is one class of XSS issues that Jinja\u2019s escaping does not protect\nagainst. Theatag\u2019shrefattribute can contain ajavascript:URI,\nwhich the browser will execute when clicked if not secured properly.<\nahref\n=\n\"{{ value }}\"\n>\nclick here\n</\na\n><\nahref\n=\n\"javascript:alert('unsafe');\"\n>\nclick here\n</\na\n>To prevent this, you\u2019ll need to set theContent Security Policy (CSP)response header.Cross-Site Request Forgery (CSRF)\n\u00b6Another big problem is CSRF.This is a very complex topic and I won\u2019t\noutline it here in detail just mention what it is and how to theoretically\nprevent it.If your authentication information is stored in cookies, you have implicit\nstate management.The state of \u201cbeing logged in\u201d is controlled by a\ncookie, and that cookie is sent with each request to a page.\nUnfortunately that includes requests triggered by 3rd party sites.If you\ndon\u2019t keep that in mind, some people might be able to trick your\napplication\u2019s users with social engineering to do stupid things without\nthem knowing.Say you have a specific URL that, when you sentPOSTrequests to will\ndelete a user\u2019s profile (sayhttp://example.com/user/delete\n).If an\nattacker now creates a page that sends a post request to that page with\nsome JavaScript they just have to trick some users to load that page and\ntheir profiles will end up being deleted.Imagine you were to run Facebook with millions of concurrent users and\nsomeone would send out links to images of little kittens.When users\nwould go to that page, their profiles would get deleted while they are\nlooking at images of fluffy cats.How can you prevent that?Basically for each request that modifies\ncontent on the server you would have to either use a one-time token and\nstore that in the cookieandalso transmit it with the form data.\nAfter receiving the data on the server again, you would then have to\ncompare the two tokens and ensure they are equal.Why does Flask not do that for you?The ideal place for this to happen is\nthe form validation framework, which does not exist in Flask.JSON Security\n\u00b6In Flask 0.10 and lower,jsonify()did not serialize top-level\narrays to JSON. This was because of a security vulnerability in ECMAScript 4.ECMAScript 5 closed this vulnerability, so only extremely old browsers are\nstill vulnerable. All of these browsers haveother more serious\nvulnerabilities\n, so\nthis behavior was changed andjsonify()now supports serializing\narrays.Security Headers\n\u00b6Browsers recognize various response headers in order to control security. We\nrecommend reviewing each of the headers below for use in your application.\nTheFlask-Talismanextension can be used to manage HTTPS and the security\nheaders for you.HTTP Strict Transport Security (HSTS)\n\u00b6Tells the browser to convert all HTTP requests to HTTPS, preventing\nman-in-the-middle (MITM) attacks.response\n.\nheaders\n[\n'Strict-Transport-Security'\n]='max-age=31536000; includeSubDomains'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-SecurityContent Security Policy (CSP)\n\u00b6Tell the browser where it can load various types of resource from. This header\nshould be used whenever possible, but requires some work to define the correct\npolicy for your site. A very strict policy would be:response\n.\nheaders\n[\n'Content-Security-Policy'\n]=\"default-src 'self'\"https://csp.withgoogle.com/docs/index.htmlhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-PolicyX-Content-Type-Options\n\u00b6Forces the browser to honor the response content type instead of trying to\ndetect it, which can be abused to generate a cross-site scripting (XSS)\nattack.response\n.\nheaders\n[\n'X-Content-Type-Options'\n]='nosniff'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-OptionsX-Frame-Options\n\u00b6Prevents external sites from embedding your site in aniframe\n. This\nprevents a class of attacks where clicks in the outer frame can be translated\ninvisibly to clicks on your page\u2019s elements. This is also known as\n\u201cclickjacking\u201d.response\n.\nheaders\n[\n'X-Frame-Options'\n]='SAMEORIGIN'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-OptionsX-XSS-Protection\n\u00b6The browser will try to prevent reflected XSS attacks by not loading the page\nif the request contains something that looks like JavaScript and the response\ncontains the same data.response\n.\nheaders\n[\n'X-XSS-Protection'\n]='1; mode=block'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-ProtectionSet-Cookie options\n\u00b6These options can be added to aSet-Cookieheader to improve their\nsecurity. Flask has configuration options to set these on the session cookie.\nThey can be set on other cookies too.Securelimits cookies to HTTPS traffic only.HttpOnlyprotects the contents of cookies from being read with\nJavaScript.SameSiterestricts how cookies are sent with requests from\nexternal sites. Can be set to'Lax'(recommended) or'Strict'\n.Laxprevents sending cookies with CSRF-prone requests from\nexternal sites, such as submitting a form.Strictprevents sending\ncookies with all external requests, including following regular links.app\n.\nconfig\n.\nupdate\n(SESSION_COOKIE_SECURE\n=\nTrue\n,SESSION_COOKIE_HTTPONLY\n=\nTrue\n,SESSION_COOKIE_SAMESITE\n=\n'Lax'\n,)response\n.\nset_cookie\n(\n'username'\n,'flask'\n,secure\n=\nTrue\n,httponly\n=\nTrue\n,samesite\n=\n'Lax'\n)SpecifyingExpiresorMax-Ageoptions, will remove the cookie after\nthe given time, or the current time plus the age, respectively. If neither\noption is set, the cookie will be removed when the browser is closed.# cookie expires after 10 minutesresponse\n.\nset_cookie\n(\n'snakes'\n,'3'\n,max_age\n=\n600\n)For the session cookie, ifsession.permanentis set, thenPERMANENT_SESSION_LIFETIMEis used to set the expiration.\nFlask\u2019s default cookie implementation validates that the cryptographic\nsignature is not older than this value. Lowering this value may help mitigate\nreplay attacks, where intercepted cookies can be sent at a later time.app\n.\nconfig\n.\nupdate\n(PERMANENT_SESSION_LIFETIME\n=\n600)@app\n.\nroute\n(\n'/login'\n,methods\n=\n[\n'POST'\n])deflogin\n():...session\n.\nclear\n()session\n[\n'user_id'\n]=user\n.\nidsession\n.\npermanent=True...Useitsdangerous.TimedSerializerto sign and validate other cookie\nvalues (or any values that need secure signatures).https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookieshttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-CookieHTTP Public Key Pinning (HPKP)\n\u00b6This tells the browser to authenticate with the server using only the specific\ncertificate key to prevent MITM attacks.WarningBe careful when enabling this, as it is very difficult to undo if you set up\nor upgrade your key incorrectly.https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_PinningContentsSecurity ConsiderationsCross-Site Scripting (XSS)Cross-Site Request Forgery (CSRF)JSON SecuritySecurity HeadersHTTP Strict Transport Security (HSTS)Content Security Policy (CSP)X-Content-Type-OptionsX-Frame-OptionsX-XSS-ProtectionSet-Cookie optionsHTTP Public Key Pinning (HPKP)NavigationOverviewPrevious:HTML/XHTML FAQNext:Unicode in FlaskVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/security/"},
{"text": "Becoming Big \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbBecoming Big\n\u00b6Here are your options when growing your codebase or scaling your application.Read the Source.\n\u00b6Flask started in part to demonstrate how to build your own framework on top of\nexisting well-used tools Werkzeug (WSGI) and Jinja (templating), and as it\ndeveloped, it became useful to a wide audience.As you grow your codebase,\ndon\u2019t just use Flask \u2013 understand it.Read the source.Flask\u2019s code is\nwritten to be read; its documentation is published so you can use its internal\nAPIs.Flask sticks to documented APIs in upstream libraries, and documents its\ninternal utilities so that you can find the hook points needed for your\nproject.Hook. Extend.\n\u00b6TheAPIdocs are full of available overrides, hook points, andSignals\n. You can provide custom classes for things like the request and\nresponse objects.Dig deeper on the APIs you use, and look for the\ncustomizations which are available out of the box in a Flask release.Look for\nways in which your project can be refactored into a collection of utilities and\nFlask extensions.Explore the manyextensionsin the community, and look for patterns to\nbuild your own extensions if you do not find the tools you need.Subclass.\n\u00b6TheFlaskclass has many methods designed for subclassing. You\ncan quickly add or customize behavior by subclassingFlask(see\nthe linked method docs) and using that subclass wherever you instantiate an\napplication class. This works well withApplication Factories\n. SeeSubclassing Flaskfor an example.Wrap with middleware.\n\u00b6TheApplication Dispatchingchapter shows in detail how to apply middleware. You\ncan introduce WSGI middleware to wrap your Flask instances and introduce fixes\nand changes at the layer between your Flask application and your HTTP\nserver. Werkzeug includes severalmiddlewares\n.Fork.\n\u00b6If none of the above options work, fork Flask.The majority of code of Flask\nis within Werkzeug and Jinja2.These libraries do the majority of the work.\nFlask is just the paste that glues those together.For every project there is\nthe point where the underlying framework gets in the way (due to assumptions\nthe original developers had).This is natural because if this would not be the\ncase, the framework would be a very complex system to begin with which causes a\nsteep learning curve and a lot of user frustration.This is not unique to Flask.Many people use patched and modified\nversions of their framework to counter shortcomings.This idea is also\nreflected in the license of Flask.You don\u2019t have to contribute any\nchanges back if you decide to modify the framework.The downside of forking is of course that Flask extensions will most\nlikely break because the new framework has a different import name.\nFurthermore integrating upstream changes can be a complex process,\ndepending on the number of changes.Because of that, forking should be\nthe very last resort.Scale like a pro.\n\u00b6For many web applications the complexity of the code is less an issue than\nthe scaling for the number of users or data entries expected.Flask by\nitself is only limited in terms of scaling by your application code, the\ndata store you want to use and the Python implementation and webserver you\nare running on.Scaling well means for example that if you double the amount of servers\nyou get about twice the performance.Scaling bad means that if you add a\nnew server the application won\u2019t perform any better or would not even\nsupport a second server.There is only one limiting factor regarding scaling in Flask which are\nthe context local proxies.They depend on context which in Flask is\ndefined as being either a thread, process or greenlet.If your server\nuses some kind of concurrency that is not based on threads or greenlets,\nFlask will no longer be able to support these global proxies.However the\nmajority of servers are using either threads, greenlets or separate\nprocesses to achieve concurrency which are all methods well supported by\nthe underlying Werkzeug library.Discuss with the community.\n\u00b6The Flask developers keep the framework accessible to users with codebases big\nand small. If you find an obstacle in your way, caused by Flask, don\u2019t hesitate\nto contact the developers on the mailinglist or IRC channel.The best way for\nthe Flask and Flask extension developers to improve the tools for larger\napplications is getting feedback from users.ContentsBecoming BigRead the Source.Hook. Extend.Subclass.Wrap with middleware.Fork.Scale like a pro.Discuss with the community.NavigationOverviewPrevious:CGINext:APIVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/becomingbig/"},
{"text": "Deployment Options \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbDeployment Options\n\u00b6While lightweight and easy to use,Flask\u2019s built-in server is not suitable\nfor productionas it doesn\u2019t scale well.Some of the options available for\nproperly running Flask in production are documented here.If you want to deploy your Flask application to a WSGI server not listed here,\nlook up the server documentation about how to use a WSGI app with it.Just\nremember that yourFlaskapplication object is the actual WSGI\napplication.Hosted options\n\u00b6Deploying Flask on HerokuDeploying Flask on OpenShiftDeploying Flask on WebfactionDeploying Flask on Google App EngineDeploying Flask on AWS Elastic BeanstalkSharing your Localhost Server with LocaltunnelDeploying on Azure (IIS)Deploying on PythonAnywhereSelf-hosted options\n\u00b6Standalone WSGI ContainersGunicornuWSGIGeventTwisted WebProxy SetupsuWSGIStarting your app with uwsgiConfiguring nginxmod_wsgi (Apache)Installingmod_wsgiCreating a.wsgifileConfiguring ApacheTroubleshootingSupport for Automatic ReloadingWorking with Virtual EnvironmentsFastCGICreating a.fcgifileConfiguring ApacheConfiguring lighttpdConfiguring nginxRunning FastCGI ProcessesDebuggingCGICreating a.cgifileServer SetupContentsDeployment OptionsHosted optionsSelf-hosted optionsNavigationOverviewPrevious:Subclassing FlaskNext:Standalone WSGI ContainersVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/deploying/"},
{"text": "Subclassing Flask \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbSubclassing Flask\n\u00b6TheFlaskclass is designed for subclassing.For example, you may want to override how request parameters are handled to preserve their order:fromflaskimportFlask\n,Requestfromwerkzeug.datastructuresimportImmutableOrderedMultiDictclassMyRequest\n(\nRequest\n):\"\"\"Request subclass to override request parameter storage\"\"\"parameter_storage_class=ImmutableOrderedMultiDictclassMyFlask\n(\nFlask\n):\"\"\"Flask subclass using the custom request class\"\"\"request_class=MyRequestThis is the recommended approach for overriding or augmenting Flask\u2019s internal functionality.NavigationOverviewPatterns for FlaskPrevious:Celery Background TasksNext:Deployment OptionsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/subclassing/"},
{"text": "Celery Background Tasks \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbCelery Background Tasks\n\u00b6If your application has a long running task, such as processing some uploaded\ndata or sending email, you don\u2019t want to wait for it to finish during a\nrequest. Instead, use a task queue to send the necessary data to another\nprocess that will run the task in the background while the request returns\nimmediately.Celery is a powerful task queue that can be used for simple background tasks\nas well as complex multi-stage programs and schedules. This guide will show you\nhow to configure Celery using Flask, but assumes you\u2019ve already read theFirst Steps with Celeryguide in the Celery documentation.Install\n\u00b6Celery is a separate Python package. Install it from PyPI using pip:$ pip install celeryConfigure\n\u00b6The first thing you need is a Celery instance, this is called the celery\napplication.It serves the same purpose as theFlaskobject in Flask, just for Celery.Since this instance is used as the\nentry-point for everything you want to do in Celery, like creating tasks\nand managing workers, it must be possible for other modules to import it.For instance you can place this in atasksmodule.While you can use\nCelery without any reconfiguration with Flask, it becomes a bit nicer by\nsubclassing tasks and adding support for Flask\u2019s application contexts and\nhooking it up with the Flask configuration.This is all that is necessary to properly integrate Celery with Flask:fromceleryimportCelerydefmake_celery\n(\napp\n):celery=Celery\n(app\n.\nimport_name\n,backend\n=\napp\n.\nconfig\n[\n'CELERY_RESULT_BACKEND'\n],broker\n=\napp\n.\nconfig\n[\n'CELERY_BROKER_URL'\n])celery\n.\nconf\n.\nupdate\n(\napp\n.\nconfig\n)classContextTask\n(\ncelery\n.\nTask\n):def__call__\n(\nself\n,*\nargs\n,**\nkwargs\n):withapp\n.\napp_context\n():returnself\n.\nrun\n(\n*\nargs\n,**\nkwargs\n)celery\n.\nTask=ContextTaskreturnceleryThe function creates a new Celery object, configures it with the broker\nfrom the application config, updates the rest of the Celery config from\nthe Flask config and then creates a subclass of the task that wraps the\ntask execution in an application context.An example task\n\u00b6Let\u2019s write a task that adds two numbers together and returns the result. We\nconfigure Celery\u2019s broker and backend to use Redis, create aceleryapplication using the factor from above, and then use it to define the task.fromflaskimportFlaskflask_app=Flask\n(\n__name__\n)flask_app\n.\nconfig\n.\nupdate\n(CELERY_BROKER_URL\n=\n'redis://localhost:6379'\n,CELERY_RESULT_BACKEND\n=\n'redis://localhost:6379')celery=make_celery\n(\nflask_app\n)@celery\n.\ntask\n()defadd_together\n(\na\n,b\n):returna+bThis task can now be called in the background:result=add_together\n.\ndelay\n(\n23\n,42\n)result\n.\nwait\n()# 65Run a worker\n\u00b6If you jumped in and already executed the above code you will be\ndisappointed to learn that.wait()will never actually return.\nThat\u2019s because you also need to run a Celery worker to receive and execute the\ntask.$ celery -A your_application.celery workerTheyour_applicationstring has to point to your application\u2019s package\nor module that creates theceleryobject.Now that the worker is running,waitwill return the result once the task\nis finished.ContentsCelery Background TasksInstallConfigureAn example taskRun a workerNavigationOverviewPatterns for FlaskPrevious:Request Content ChecksumsNext:Subclassing FlaskVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/celery/"},
{"text": "Design Decisions in Flask \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbDesign Decisions in Flask\n\u00b6If you are curious why Flask does certain things the way it does and not\ndifferently, this section is for you.This should give you an idea about\nsome of the design decisions that may appear arbitrary and surprising at\nfirst, especially in direct comparison with other frameworks.The Explicit Application Object\n\u00b6A Python web application based on WSGI has to have one central callable\nobject that implements the actual application.In Flask this is an\ninstance of theFlaskclass.Each Flask application has\nto create an instance of this class itself and pass it the name of the\nmodule, but why can\u2019t Flask do that itself?Without such an explicit application object the following code:fromflaskimportFlaskapp=Flask\n(\n__name__\n)@app\n.\nroute\n(\n'/'\n)defindex\n():return'Hello World!'Would look like this instead:fromhypothetical_flaskimportroute@route\n(\n'/'\n)defindex\n():return'Hello World!'There are three major reasons for this.The most important one is that\nimplicit application objects require that there may only be one instance at\nthe time.There are ways to fake multiple applications with a single\napplication object, like maintaining a stack of applications, but this\ncauses some problems I won\u2019t outline here in detail.Now the question is:\nwhen does a microframework need more than one application at the same\ntime?A good example for this is unittesting.When you want to test\nsomething it can be very helpful to create a minimal application to test\nspecific behavior.When the application object is deleted everything it\nallocated will be freed again.Another thing that becomes possible when you have an explicit object lying\naround in your code is that you can subclass the base class\n(\nFlask\n) to alter specific behavior.This would not be\npossible without hacks if the object were created ahead of time for you\nbased on a class that is not exposed to you.But there is another very important reason why Flask depends on an\nexplicit instantiation of that class: the package name.Whenever you\ncreate a Flask instance you usually pass it__name__as package name.\nFlask depends on that information to properly load resources relative\nto your module.With Python\u2019s outstanding support for reflection it can\nthen access the package to figure out where the templates and static files\nare stored (seeopen_resource()\n).Now obviously there\nare frameworks around that do not need any configuration and will still be\nable to load templates relative to your application module.But they have\nto use the current working directory for that, which is a very unreliable\nway to determine where the application is.The current working directory\nis process-wide and if you are running multiple applications in one\nprocess (which could happen in a webserver without you knowing) the paths\nwill be off.Worse: many webservers do not set the working directory to\nthe directory of your application but to the document root which does not\nhave to be the same folder.The third reason is \u201cexplicit is better than implicit\u201d.That object is\nyour WSGI application, you don\u2019t have to remember anything else.If you\nwant to apply a WSGI middleware, just wrap it and you\u2019re done (though\nthere are better ways to do that so that you do not lose the reference\nto the application objectwsgi_app()\n).Furthermore this design makes it possible to use a factory function to\ncreate the application which is very helpful for unittesting and similar\nthings (\nApplication Factories\n).The Routing System\n\u00b6Flask uses the Werkzeug routing system which was designed to\nautomatically order routes by complexity.This means that you can declare\nroutes in arbitrary order and they will still work as expected.This is a\nrequirement if you want to properly implement decorator based routing\nsince decorators could be fired in undefined order when the application is\nsplit into multiple modules.Another design decision with the Werkzeug routing system is that routes\nin Werkzeug try to ensure that URLs are unique.Werkzeug will go quite far\nwith that in that it will automatically redirect to a canonical URL if a route\nis ambiguous.One Template Engine\n\u00b6Flask decides on one template engine: Jinja2.Why doesn\u2019t Flask have a\npluggable template engine interface?You can obviously use a different\ntemplate engine, but Flask will still configure Jinja2 for you.While\nthat limitation that Jinja2 isalwaysconfigured will probably go away,\nthe decision to bundle one template engine and use that will not.Template engines are like programming languages and each of those engines\nhas a certain understanding about how things work.On the surface they\nall work the same: you tell the engine to evaluate a template with a set\nof variables and take the return value as string.But that\u2019s about where similarities end.Jinja2 for example has an\nextensive filter system, a certain way to do template inheritance, support\nfor reusable blocks (macros) that can be used from inside templates and\nalso from Python code, uses Unicode for all operations, supports\niterative template rendering, configurable syntax and more.On the other\nhand an engine like Genshi is based on XML stream evaluation, template\ninheritance by taking the availability of XPath into account and more.\nMako on the other hand treats templates similar to Python modules.When it comes to connecting a template engine with an application or\nframework there is more than just rendering templates.For instance,\nFlask uses Jinja2\u2019s extensive autoescaping support.Also it provides\nways to access macros from Jinja2 templates.A template abstraction layer that would not take the unique features of\nthe template engines away is a science on its own and a too large\nundertaking for a microframework like Flask.Furthermore extensions can then easily depend on one template language\nbeing present.You can easily use your own templating language, but an\nextension could still depend on Jinja itself.Micro with Dependencies\n\u00b6Why does Flask call itself a microframework and yet it depends on two\nlibraries (namely Werkzeug and Jinja2).Why shouldn\u2019t it?If we look\nover to the Ruby side of web development there we have a protocol very\nsimilar to WSGI.Just that it\u2019s called Rack there, but besides that it\nlooks very much like a WSGI rendition for Ruby.But nearly all\napplications in Ruby land do not work with Rack directly, but on top of a\nlibrary with the same name.This Rack library has two equivalents in\nPython: WebOb (formerly Paste) and Werkzeug.Paste is still around but\nfrom my understanding it\u2019s sort of deprecated in favour of WebOb.The\ndevelopment of WebOb and Werkzeug started side by side with similar ideas\nin mind: be a good implementation of WSGI for other applications to take\nadvantage.Flask is a framework that takes advantage of the work already done by\nWerkzeug to properly interface WSGI (which can be a complex task at\ntimes).Thanks to recent developments in the Python package\ninfrastructure, packages with dependencies are no longer an issue and\nthere are very few reasons against having libraries that depend on others.Thread Locals\n\u00b6Flask uses thread local objects (context local objects in fact, they\nsupport greenlet contexts as well) for request, session and an extra\nobject you can put your own things on (\ng\n).Why is that and\nisn\u2019t that a bad idea?Yes it is usually not such a bright idea to use thread locals.They cause\ntroubles for servers that are not based on the concept of threads and make\nlarge applications harder to maintain.However Flask is just not designed\nfor large applications or asynchronous servers.Flask wants to make it\nquick and easy to write a traditional web application.Also see theBecoming Bigsection of the documentation for some\ninspiration for larger applications based on Flask.What Flask is, What Flask is Not\n\u00b6Flask will never have a database layer.It will not have a form library\nor anything else in that direction.Flask itself just bridges to Werkzeug\nto implement a proper WSGI application and to Jinja2 to handle templating.\nIt also binds to a few common standard library packages such as logging.\nEverything else is up for extensions.Why is this the case?Because people have different preferences and\nrequirements and Flask could not meet those if it would force any of this\ninto the core.The majority of web applications will need a template\nengine in some sort.However not every application needs a SQL database.The idea of Flask is to build a good foundation for all applications.\nEverything else is up to you or extensions.ContentsDesign Decisions in FlaskThe Explicit Application ObjectThe Routing SystemOne Template EngineMicro with DependenciesThread LocalsWhat Flask is, What Flask is NotNavigationOverviewPrevious:APINext:HTML/XHTML FAQVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/design/"},
{"text": "How to contribute to Flask \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|previous|Flask 1.0.2 documentation\u00bbHow to contribute to Flask\n\u00b6Thank you for considering contributing to Flask!Support questions\n\u00b6Please, don\u2019t use the issue tracker for this. Use one of the following\nresources for questions about your own code:The IRC channel#pocooon FreeNode.The IRC channel#pythonon FreeNode for more general questions.The mailing listflask\n@\npython\n.\norgfor long term discussion or larger issues.Ask onStack Overflow\n. Search with Google first using:site:stackoverflow.comflask{searchterm,exceptionmessage,etc.}Reporting issues\n\u00b6Describe what you expected to happen.If possible, include aminimal, complete, and verifiable exampleto help\nus identify the issue. This also helps check that the issue is not with your\nown code.Describe what actually happened. Include the full traceback if there was an\nexception.List your Python, Flask, and Werkzeug versions. If possible, check if this\nissue is already fixed in the repository.Submitting patches\n\u00b6Include tests if your patch is supposed to solve a bug, and explain\nclearly under which circumstances the bug happens. Make sure the test fails\nwithout your patch.Try to followPEP8\n, but you may ignore the line length limit if following\nit would make the code uglier.First time setup\n\u00b6Download and install thelatest version of git\n.Configure git with yourusernameandemail\n:gitconfig--\nglobaluser\n.\nname'your name'gitconfig--\nglobaluser\n.\nemail'your email'Make sure you have aGitHub account\n.Fork Flask to your GitHub account by clicking theForkbutton.Cloneyour GitHub fork locally:gitclonehttps\n:\n//\ngithub\n.\ncom\n/\n{\nusername\n}\n/\nflaskcdflaskAdd the main repository as a remote to update later:gitremoteaddpalletshttps\n:\n//\ngithub\n.\ncom\n/\npallets\n/\nflaskgitfetchpalletsCreate a virtualenv:python3-\nmvenvenv.env\n/\nbin\n/\nactivate# or \"env\\Scripts\\activate\" on WindowsInstall Flask in editable mode with development dependencies:pipinstall-\ne\".[dev]\"Start coding\n\u00b6Create a branch to identify the issue you would like to work on (e.g.2287-dry-test-suite\n)Using your favorite editor, make your changes,committing as you go\n.Try to followPEP8\n, but you may ignore the line length limit if following\nit would make the code uglier.Include tests that cover any code changes you make. Make sure the test fails\nwithout your patch.Run the tests.\n.Push your commits to GitHub andcreate a pull request\n.Celebrate \ud83c\udf89Running the tests\n\u00b6Run the basic test suite with:pytestThis only runs the tests for the current environment. Whether this is relevant\ndepends on which part of Flask you\u2019re working on. Travis-CI will run the full\nsuite when you submit your pull request.The full test suite takes a long time to run because it tests multiple\ncombinations of Python and dependencies. You need to have Python 2.7, 3.4,\n3.5 3.6, and PyPy 2.7 installed to run all of the environments. Then run:toxRunning test coverage\n\u00b6Generating a report of lines that do not have test coverage can indicate\nwhere to start contributing. Runpytestusingcoverageand generate a\nreport on the terminal and as an interactive HTML document:coveragerun-\nmpytestcoveragereportcoveragehtml# then open htmlcov/index.htmlRead more aboutcoverage\n.Running the full test suite withtoxwill combine the coverage reports\nfrom all runs.Building the docs\n\u00b6Build the docs in thedocsdirectory using Sphinx:cddocsmakehtmlOpen_build/html/index.htmlin your browser to view the docs.Read more aboutSphinx\n.make targets\n\u00b6Flask provides aMakefilewith various shortcuts. They will ensure that\nall dependencies are installed.maketestruns the basic test suite withpytestmakecovruns the basic test suite withcoveragemaketest-allruns the full test suite withtoxmakedocsbuilds the HTML documentationCaution: zero-padded file modes\n\u00b6This repository contains several zero-padded file modes that may cause issues\nwhen pushing this repository to git hosts other than GitHub. Fixing this is\ndestructive to the commit history, so we suggest ignoring these warnings. If it\nfails to push and you\u2019re using a self-hosted git service like GitLab, you can\nturn off repository checks in the admin panel.These files can also cause issues while cloning. If you have[\nfetch\n]fsckobjects=trueor[\nreceive\n]fsckObjects=trueset in your git configuration file, cloning this repository will fail. The only\nsolution is to set both of the above settings to false while cloning, and then\nsetting them back to true after the cloning is finished.ContentsHow to contribute to FlaskSupport questionsReporting issuesSubmitting patchesFirst time setupStart codingRunning the testsRunning test coverageBuilding the docsmake targetsCaution: zero-padded file modesNavigationOverviewPrevious:LicenseVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/contributing/"},
{"text": "Request Content Checksums \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbRequest Content Checksums\n\u00b6Various pieces of code can consume the request data and preprocess it.\nFor instance JSON data ends up on the request object already read and\nprocessed, form data ends up there as well but goes through a different\ncode path.This seems inconvenient when you want to calculate the\nchecksum of the incoming request data.This is necessary sometimes for\nsome APIs.Fortunately this is however very simple to change by wrapping the input\nstream.The following example calculates the SHA1 checksum of the incoming data as\nit gets read and stores it in the WSGI environment:importhashlibclassChecksumCalcStream\n(\nobject\n):def__init__\n(\nself\n,stream\n):self\n.\n_stream=streamself\n.\n_hash=hashlib\n.\nsha1\n()defread\n(\nself\n,bytes\n):rv=self\n.\n_stream\n.\nread\n(\nbytes\n)self\n.\n_hash\n.\nupdate\n(\nrv\n)returnrvdefreadline\n(\nself\n,size_hint\n):rv=self\n.\n_stream\n.\nreadline\n(\nsize_hint\n)self\n.\n_hash\n.\nupdate\n(\nrv\n)returnrvdefgenerate_checksum\n(\nrequest\n):env=request\n.\nenvironstream=ChecksumCalcStream\n(\nenv\n[\n'wsgi.input'\n])env\n[\n'wsgi.input'\n]=streamreturnstream\n.\n_hashTo use this, all you need to do is to hook the calculating stream in\nbefore the request starts consuming data.(Eg: be careful accessingrequest.formor anything of that nature.before_request_handlersfor instance should be careful not to access it).Example usage:@app\n.\nroute\n(\n'/special-api'\n,methods\n=\n[\n'POST'\n])defspecial_api\n():hash=generate_checksum\n(\nrequest\n)# Accessing this parses the input streamfiles=request\n.\nfiles# At this point the hash is fully constructed.checksum=hash\n.\nhexdigest\n()return'Hash was:%s\n'%checksumNavigationOverviewPatterns for FlaskPrevious:Adding HTTP Method OverridesNext:Celery Background TasksVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/requestchecksum/"},
{"text": "Adding HTTP Method Overrides \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbAdding HTTP Method Overrides\n\u00b6Some HTTP proxies do not support arbitrary HTTP methods or newer HTTP\nmethods (such as PATCH).In that case it\u2019s possible to \u201cproxy\u201d HTTP\nmethods through another HTTP method in total violation of the protocol.The way this works is by letting the client do an HTTP POST request and\nset theX-HTTP-Method-Overrideheader and set the value to the\nintended HTTP method (such asPATCH\n).This can easily be accomplished with an HTTP middleware:classHTTPMethodOverrideMiddleware\n(\nobject\n):allowed_methods=frozenset\n(['GET'\n,'HEAD'\n,'POST'\n,'DELETE'\n,'PUT'\n,'PATCH'\n,'OPTIONS'])bodyless_methods=frozenset\n([\n'GET'\n,'HEAD'\n,'OPTIONS'\n,'DELETE'\n])def__init__\n(\nself\n,app\n):self\n.\napp=appdef__call__\n(\nself\n,environ\n,start_response\n):method=environ\n.\nget\n(\n'HTTP_X_HTTP_METHOD_OVERRIDE'\n,''\n)\n.\nupper\n()ifmethodinself\n.\nallowed_methods\n:method=method\n.\nencode\n(\n'ascii'\n,'replace'\n)environ\n[\n'REQUEST_METHOD'\n]=methodifmethodinself\n.\nbodyless_methods\n:environ\n[\n'CONTENT_LENGTH'\n]='0'returnself\n.\napp\n(\nenviron\n,start_response\n)To use this with Flask this is all that is necessary:fromflaskimportFlaskapp=Flask\n(\n__name__\n)app\n.\nwsgi_app=HTTPMethodOverrideMiddleware\n(\napp\n.\nwsgi_app\n)NavigationOverviewPatterns for FlaskPrevious:Deferred Request CallbacksNext:Request Content ChecksumsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/methodoverrides/"},
{"text": "Deferred Request Callbacks \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbDeferred Request Callbacks\n\u00b6One of the design principles of Flask is that response objects are created and\npassed down a chain of potential callbacks that can modify them or replace\nthem. When the request handling starts, there is no response object yet. It is\ncreated as necessary either by a view function or by some other component in\nthe system.What happens if you want to modify the response at a point where the response\ndoes not exist yet?A common example for that would be abefore_request()callback that wants to set a cookie on the\nresponse object.One way is to avoid the situation. Very often that is possible. For instance\nyou can try to move that logic into aafter_request()callback instead. However, sometimes moving code there makes it more\nmore complicated or awkward to reason about.As an alternative, you can useafter_this_request()to register\ncallbacks that will execute after only the current request. This way you can\ndefer code execution from anywhere in the application, based on the current\nrequest.At any time during a request, we can register a function to be called at the\nend of the request. For example you can remember the current language of the\nuser in a cookie in abefore_request()callback:fromflaskimportrequest\n,after_this_request@app\n.\nbefore_requestdefdetect_user_language\n():language=request\n.\ncookies\n.\nget\n(\n'user_lang'\n)iflanguageisNone\n:language=guess_language_from_request\n()# when the response exists, set a cookie with the language@after_this_requestdefremember_language\n(\nresponse\n):response\n.\nset_cookie\n(\n'user_lang'\n,language\n)g\n.\nlanguage=languageNavigationOverviewPatterns for FlaskPrevious:Streaming ContentsNext:Adding HTTP Method OverridesVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/deferredcallbacks/"},
{"text": "Streaming Contents \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbStreaming Contents\n\u00b6Sometimes you want to send an enormous amount of data to the client, much\nmore than you want to keep in memory.When you are generating the data on\nthe fly though, how do you send that back to the client without the\nroundtrip to the filesystem?The answer is by using generators and direct responses.Basic Usage\n\u00b6This is a basic view function that generates a lot of CSV data on the fly.\nThe trick is to have an inner function that uses a generator to generate\ndata and to then invoke that function and pass it to a response object:fromflaskimportResponse@app\n.\nroute\n(\n'/large.csv'\n)defgenerate_large_csv\n():defgenerate\n():forrowiniter_all_rows\n():yield','\n.\njoin\n(\nrow\n)+'\n\\n\n'returnResponse\n(\ngenerate\n(),mimetype\n=\n'text/csv'\n)Eachyieldexpression is directly sent to the browser.Note though\nthat some WSGI middlewares might break streaming, so be careful there in\ndebug environments with profilers and other things you might have enabled.Streaming from Templates\n\u00b6The Jinja2 template engine also supports rendering templates piece by\npiece.This functionality is not directly exposed by Flask because it is\nquite uncommon, but you can easily do it yourself:fromflaskimportResponsedefstream_template\n(\ntemplate_name\n,**\ncontext\n):app\n.\nupdate_template_context\n(\ncontext\n)t=app\n.\njinja_env\n.\nget_template\n(\ntemplate_name\n)rv=t\n.\nstream\n(\ncontext\n)rv\n.\nenable_buffering\n(\n5\n)returnrv@app\n.\nroute\n(\n'/my-large-page.html'\n)defrender_large_template\n():rows=iter_all_rows\n()returnResponse\n(\nstream_template\n(\n'the_template.html'\n,rows\n=\nrows\n))The trick here is to get the template object from the Jinja2 environment\non the application and to callstream()instead ofrender()which returns a stream object instead of a\nstring.Since we\u2019re bypassing the Flask template render functions and\nusing the template object itself we have to make sure to update the render\ncontext ourselves by callingupdate_template_context()\n.\nThe template is then evaluated as the stream is iterated over.Since each\ntime you do a yield the server will flush the content to the client you\nmight want to buffer up a few items in the template which you can do withrv.enable_buffering(size)\n.5is a sane default.Streaming with Context\n\u00b6ChangelogNew in version 0.9.Note that when you stream data, the request context is already gone the\nmoment the function executes.Flask 0.9 provides you with a helper that\ncan keep the request context around during the execution of the\ngenerator:fromflaskimportstream_with_context\n,request\n,Response@app\n.\nroute\n(\n'/stream'\n)defstreamed_response\n():defgenerate\n():yield'Hello 'yieldrequest\n.\nargs\n[\n'name'\n]yield'!'returnResponse\n(\nstream_with_context\n(\ngenerate\n()))Without thestream_with_context()function you would get aRuntimeErrorat that point.ContentsStreaming ContentsBasic UsageStreaming from TemplatesStreaming with ContextNavigationOverviewPatterns for FlaskPrevious:Adding a faviconNext:Deferred Request CallbacksVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/streaming/"},
{"text": "Adding a favicon \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbAdding a favicon\n\u00b6A \u201cfavicon\u201d is an icon used by browsers for tabs and bookmarks. This helps\nto distinguish your website and to give it a unique brand.A common question is how to add a favicon to a Flask application. First, of\ncourse, you need an icon. It should be 16 \u00d7 16 pixels and in the ICO file\nformat. This is not a requirement but a de-facto standard supported by all\nrelevant browsers. Put the icon in your static directory asfavicon.ico\n.Now, to get browsers to find your icon, the correct way is to add a link\ntag in your HTML. So, for example:<\nlinkrel\n=\n\"shortcut icon\"href\n=\n\"\n{{url_for\n(\n'static'\n,filename\n=\n'favicon.ico'\n)}}\n\"\n>That\u2019s all you need for most browsers, however some really old ones do not\nsupport this standard. The old de-facto standard is to serve this file,\nwith this name, at the website root. If your application is not mounted at\nthe root path of the domain you either need to configure the web server to\nserve the icon at the root or if you can\u2019t do that you\u2019re out of luck. If\nhowever your application is the root you can simply route a redirect:app\n.\nadd_url_rule\n(\n'/favicon.ico'\n,redirect_to\n=\nurl_for\n(\n'static'\n,filename\n=\n'favicon.ico'\n))If you want to save the extra redirect request you can also write a view\nusingsend_from_directory()\n:importosfromflaskimportsend_from_directory@app\n.\nroute\n(\n'/favicon.ico'\n)deffavicon\n():returnsend_from_directory\n(\nos\n.\npath\n.\njoin\n(\napp\n.\nroot_path\n,'static'\n),'favicon.ico'\n,mimetype\n=\n'image/vnd.microsoft.icon'\n)We can leave out the explicit mimetype and it will be guessed, but we may\nas well specify it to avoid the extra guessing, as it will always be the\nsame.The above will serve the icon via your application and if possible it\u2019s\nbetter to configure your dedicated web server to serve it; refer to the\nweb server\u2019s documentation.See also\n\u00b6TheFaviconarticle on\nWikipediaContentsAdding a faviconSee alsoNavigationOverviewPatterns for FlaskPrevious:MongoKit in FlaskNext:Streaming ContentsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/favicon/"},
{"text": "MongoKit in Flask \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbMongoKit in Flask\n\u00b6Using a document database rather than a full DBMS gets more common these days.\nThis pattern shows how to use MongoKit, a document mapper library, to\nintegrate with MongoDB.This pattern requires a running MongoDB server and the MongoKit library\ninstalled.There are two very common ways to use MongoKit.I will outline each of them\nhere:Declarative\n\u00b6The default behavior of MongoKit is the declarative one that is based on\ncommon ideas from Django or the SQLAlchemy declarative extension.Here an exampleapp.pymodule for your application:fromflaskimportFlaskfrommongokitimportConnection\n,Document# configurationMONGODB_HOST='localhost'MONGODB_PORT=27017# create the little application objectapp=Flask\n(\n__name__\n)app\n.\nconfig\n.\nfrom_object\n(\n__name__\n)# connect to the databaseconnection=Connection\n(\napp\n.\nconfig\n[\n'MONGODB_HOST'\n],app\n.\nconfig\n[\n'MONGODB_PORT'\n])To define your models, just subclass theDocumentclass that is imported\nfrom MongoKit.If you\u2019ve seen the SQLAlchemy pattern you may wonder why we do\nnot have a session and even do not define ainit_dbfunction here.On the\none hand, MongoKit does not have something like a session.This sometimes\nmakes it more to type but also makes it blazingly fast.On the other hand,\nMongoDB is schemaless.This means you can modify the data structure from one\ninsert query to the next without any problem.MongoKit is just schemaless\ntoo, but implements some validation to ensure data integrity.Here is an example document (put this also intoapp.py\n, e.g.):frommongokitimportValidationErrordefmax_length\n(\nlength\n):defvalidate\n(\nvalue\n):iflen\n(\nvalue\n)<=length\n:returnTrue# must have %s in error format string to have mongokit place key in thereraiseValidationError\n(\n'\n%smust be at most{}characters long'\n.\nformat\n(\nlength\n))returnvalidateclassUser\n(\nDocument\n):structure={'name'\n:unicode\n,'email'\n:unicode\n,}validators={'name'\n:max_length\n(\n50\n),'email'\n:max_length\n(\n120\n)}use_dot_notation=Truedef__repr__\n(\nself\n):return'<User%r\n>'%(\nself\n.\nname\n)# register the User document with our current connectionconnection\n.\nregister\n([\nUser\n])This example shows you how to define your schema (named structure), a\nvalidator for the maximum character length and uses a special MongoKit feature\ncalleduse_dot_notation\n.Per default MongoKit behaves like a python\ndictionary but withuse_dot_notationset toTrueyou can use your\ndocuments like you use models in nearly any other ORM by using dots to\nseparate between attributes.You can insert entries into the database like this:>>>fromyourapplication.databaseimportconnection>>>fromyourapplication.modelsimportUser>>>collection=connection\n[\n'test'\n]\n.\nusers>>>user=collection\n.\nUser\n()>>>user\n[\n'name'\n]=u\n'admin'>>>user\n[\n'email'\n]=u\n'admin@localhost'>>>user\n.\nsave\n()Note that MongoKit is kinda strict with used column types, you must not use a\ncommonstrtype for eithernameoremailbut unicode.Querying is simple as well:>>>list\n(\ncollection\n.\nUser\n.\nfind\n())[<User u'admin'>]>>>collection\n.\nUser\n.\nfind_one\n({\n'name'\n:u\n'admin'\n})<User u'admin'>PyMongo Compatibility Layer\n\u00b6If you just want to use PyMongo, you can do that with MongoKit as well.You\nmay use this process if you need the best performance to get.Note that this\nexample does not show how to couple it with Flask, see the above MongoKit code\nfor examples:fromMongoKitimportConnectionconnection=Connection\n()To insert data you can use theinsertmethod.We have to get a\ncollection first, this is somewhat the same as a table in the SQL world.>>>collection=connection\n[\n'test'\n]\n.\nusers>>>user={\n'name'\n:u\n'admin'\n,'email'\n:u\n'admin@localhost'\n}>>>collection\n.\ninsert\n(\nuser\n)MongoKit will automatically commit for us.To query your database, you use the collection directly:>>>list\n(\ncollection\n.\nfind\n())[{u'_id': ObjectId('4c271729e13823182f000000'), u'name': u'admin', u'email': u'admin@localhost'}]>>>collection\n.\nfind_one\n({\n'name'\n:u\n'admin'\n}){u'_id': ObjectId('4c271729e13823182f000000'), u'name': u'admin', u'email': u'admin@localhost'}These results are also dict-like objects:>>>r=collection\n.\nfind_one\n({\n'name'\n:u\n'admin'\n})>>>r\n[\n'email'\n]u'admin@localhost'For more information about MongoKit, head over to thewebsite\n.ContentsMongoKit in FlaskDeclarativePyMongo Compatibility LayerNavigationOverviewPatterns for FlaskPrevious:Lazily Loading ViewsNext:Adding a faviconVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/mongokit/"},
{"text": "Lazily Loading Views \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbLazily Loading Views\n\u00b6Flask is usually used with the decorators.Decorators are simple and you\nhave the URL right next to the function that is called for that specific\nURL.However there is a downside to this approach: it means all your code\nthat uses decorators has to be imported upfront or Flask will never\nactually find your function.This can be a problem if your application has to import quick.It might\nhave to do that on systems like Google\u2019s App Engine or other systems.So\nif you suddenly notice that your application outgrows this approach you\ncan fall back to a centralized URL mapping.The system that enables having a central URL map is theadd_url_rule()function.Instead of using decorators,\nyou have a file that sets up the application with all URLs.Converting to Centralized URL Map\n\u00b6Imagine the current application looks somewhat like this:fromflaskimportFlaskapp=Flask\n(\n__name__\n)@app\n.\nroute\n(\n'/'\n)defindex\n():pass@app\n.\nroute\n(\n'/user/<username>'\n)defuser\n(\nusername\n):passThen, with the centralized approach you would have one file with the views\n(\nviews.py\n) but without any decorator:defindex\n():passdefuser\n(\nusername\n):passAnd then a file that sets up an application which maps the functions to\nURLs:fromflaskimportFlaskfromyourapplicationimportviewsapp=Flask\n(\n__name__\n)app\n.\nadd_url_rule\n(\n'/'\n,view_func\n=\nviews\n.\nindex\n)app\n.\nadd_url_rule\n(\n'/user/<username>'\n,view_func\n=\nviews\n.\nuser\n)Loading Late\n\u00b6So far we only split up the views and the routing, but the module is still\nloaded upfront.The trick is to actually load the view function as needed.\nThis can be accomplished with a helper class that behaves just like a\nfunction but internally imports the real function on first use:fromwerkzeugimportimport_string\n,cached_propertyclassLazyView\n(\nobject\n):def__init__\n(\nself\n,import_name\n):self\n.\n__module__\n,self\n.\n__name__=import_name\n.\nrsplit\n(\n'.'\n,1\n)self\n.\nimport_name=import_name@cached_propertydefview\n(\nself\n):returnimport_string\n(\nself\n.\nimport_name\n)def__call__\n(\nself\n,*\nargs\n,**\nkwargs\n):returnself\n.\nview\n(\n*\nargs\n,**\nkwargs\n)What\u2019s important here is is that__module__and__name__are properly\nset.This is used by Flask internally to figure out how to name the\nURL rules in case you don\u2019t provide a name for the rule yourself.Then you can define your central place to combine the views like this:fromflaskimportFlaskfromyourapplication.helpersimportLazyViewapp=Flask\n(\n__name__\n)app\n.\nadd_url_rule\n(\n'/'\n,view_func\n=\nLazyView\n(\n'yourapplication.views.index'\n))app\n.\nadd_url_rule\n(\n'/user/<username>'\n,view_func\n=\nLazyView\n(\n'yourapplication.views.user'\n))You can further optimize this in terms of amount of keystrokes needed to\nwrite this by having a function that calls intoadd_url_rule()by prefixing a string with the project\nname and a dot, and by wrappingview_funcin aLazyViewas needed.defurl\n(\nimport_name\n,url_rules\n=\n[],**\noptions\n):view=LazyView\n(\n'yourapplication.'+import_name\n)forurl_ruleinurl_rules\n:app\n.\nadd_url_rule\n(\nurl_rule\n,view_func\n=\nview\n,**\noptions\n)# add a single route to the index viewurl\n(\n'views.index'\n,[\n'/'\n])# add two routes to a single function endpointurl_rules=[\n'/user/'\n,\n'/user/<username>'\n]url\n(\n'views.user'\n,url_rules\n)One thing to keep in mind is that before and after request handlers have\nto be in a file that is imported upfront to work properly on the first\nrequest.The same goes for any kind of remaining decorator.ContentsLazily Loading ViewsConverting to Centralized URL MapLoading LateNavigationOverviewPatterns for FlaskPrevious:Custom Error PagesNext:MongoKit in FlaskVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/lazyloading/"},
{"text": "AJAX with jQuery \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbAJAX with jQuery\n\u00b6jQueryis a small JavaScript library commonly used to simplify working\nwith the DOM and JavaScript in general.It is the perfect tool to make\nweb applications more dynamic by exchanging JSON between server and\nclient.JSON itself is a very lightweight transport format, very similar to how\nPython primitives (numbers, strings, dicts and lists) look like which is\nwidely supported and very easy to parse.It became popular a few years\nago and quickly replaced XML as transport format in web applications.Loading jQuery\n\u00b6In order to use jQuery, you have to download it first and place it in the\nstatic folder of your application and then ensure it\u2019s loaded.Ideally\nyou have a layout template that is used for all pages where you just have\nto add a script statement to the bottom of your<body>to load jQuery:<\nscripttype\n=\ntext/javascriptsrc\n=\n\"{{url_for('static', filename='jquery.js') }}\"\n></\nscript\n>Another method is using Google\u2019sAJAX Libraries APIto load jQuery:<\nscriptsrc\n=\n\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"\n></\nscript\n><\nscript\n>\nwindow\n.\njQuery||document\n.\nwrite\n(\n'<script src=\"{{url_for('\nstatic\n', filename='\njquery\n.\njs\n') }}\">\\x3C/script>'\n)</\nscript\n>In this case you have to put jQuery into your static folder as a fallback, but it will\nfirst try to load it directly from Google. This has the advantage that your\nwebsite will probably load faster for users if they went to at least one\nother website before using the same jQuery version from Google because it\nwill already be in the browser cache.Where is My Site?\n\u00b6Do you know where your application is?If you are developing the answer\nis quite simple: it\u2019s on localhost port something and directly on the root\nof that server.But what if you later decide to move your application to\na different location?For example tohttp://example.com/myapp\n?On\nthe server side this never was a problem because we were using the handyurl_for()function that could answer that question for\nus, but if we are using jQuery we should not hardcode the path to\nthe application but make that dynamic, so how can we do that?A simple method would be to add a script tag to our page that sets a\nglobal variable to the prefix to the root of the application.Something\nlike this:<\nscripttype\n=\ntext/javascript\n>$SCRIPT_ROOT={{request.script_root\n|\ntojson\n|\nsafe}}\n;</\nscript\n>The|safeis necessary in Flask before 0.10 so that Jinja does not\nescape the JSON encoded string with HTML rules.Usually this would be\nnecessary, but we are inside ascriptblock here where different rules\napply.Information for ProsIn HTML thescripttag is declaredCDATAwhich means that entities\nwill not be parsed.Everything until</script>is handled as script.\nThis also means that there must never be any</between the script\ntags.|tojsonis kind enough to do the right thing here and\nescape slashes for you (\n{{\"</script>\"|tojson|safe}}is rendered as\"<\\/script>\"\n).In Flask 0.10 it goes a step further and escapes all HTML tags with\nunicode escapes.This makes it possible for Flask to automatically\nmark the result as HTML safe.JSON View Functions\n\u00b6Now let\u2019s create a server side function that accepts two URL arguments of\nnumbers which should be added together and then sent back to the\napplication in a JSON object.This is a really ridiculous example and is\nsomething you usually would do on the client side alone, but a simple\nexample that shows how you would use jQuery and Flask nonetheless:fromflaskimportFlask\n,jsonify\n,render_template\n,requestapp=Flask\n(\n__name__\n)@app\n.\nroute\n(\n'/_add_numbers'\n)defadd_numbers\n():a=request\n.\nargs\n.\nget\n(\n'a'\n,0\n,type\n=\nint\n)b=request\n.\nargs\n.\nget\n(\n'b'\n,0\n,type\n=\nint\n)returnjsonify\n(\nresult\n=\na+b\n)@app\n.\nroute\n(\n'/'\n)defindex\n():returnrender_template\n(\n'index.html'\n)As you can see I also added anindexmethod here that renders a\ntemplate.This template will load jQuery as above and have a little form\nwe can add two numbers and a link to trigger the function on the server\nside.Note that we are using theget()method here\nwhich will never fail.If the key is missing a default value (here0\n)\nis returned.Furthermore it can convert values to a specific type (like\nin our caseint\n).This is especially handy for code that is\ntriggered by a script (APIs, JavaScript etc.) because you don\u2019t need\nspecial error reporting in that case.The HTML\n\u00b6Your index.html template either has to extend alayout.htmltemplate with\njQuery loaded and the$SCRIPT_ROOTvariable set, or do that on the top.\nHere\u2019s the HTML code needed for our little application (\nindex.html\n).\nNotice that we also drop the script directly into the HTML here.It is\nusually a better idea to have that in a separate script file:<\nscripttype\n=\ntext/javascript\n>$\n(\nfunction\n(){$\n(\n'a#calculate'\n).\nbind\n(\n'click'\n,function\n(){$\n.\ngetJSON\n(\n$SCRIPT_ROOT+'/_add_numbers'\n,{a\n:$\n(\n'input[name=\"a\"]'\n).\nval\n(),b\n:$\n(\n'input[name=\"b\"]'\n).\nval\n()},function\n(\ndata\n){$\n(\n\"#result\"\n).\ntext\n(\ndata\n.\nresult\n);});returnfalse\n;});});</\nscript\n><\nh1\n>\njQuery Example\n</\nh1\n><\np\n><\ninputtype\n=\ntextsize\n=\n5name\n=\na\n>+<\ninputtype\n=\ntextsize\n=\n5name\n=\nb\n>=<\nspanid\n=\nresult\n>\n?\n</\nspan\n><\np\n><\nahref\n=\n#id\n=\ncalculate\n>\ncalculate server side\n</\na\n>I won\u2019t go into detail here about how jQuery works, just a very quick\nexplanation of the little bit of code above:$(function(){...})specifies code that should run once the\nbrowser is done loading the basic parts of the page.$('selector')selects an element and lets you operate on it.element.bind('event',func)specifies a function that should run\nwhen the user clicked on the element.If that function returnsfalse\n, the default behavior will not kick in (in this case, navigate\nto the#URL).$.getJSON(url,data,func)sends aGETrequest tourland will\nsend the contents of thedataobject as query parameters.Once the\ndata arrived, it will call the given function with the return value as\nargument.Note that we can use the$SCRIPT_ROOTvariable here that\nwe set earlier.Check out theexample sourcefor a full\napplication demonstrating the code on this page, as well as the same\nthing usingXMLHttpRequestandfetch\n.ContentsAJAX with jQueryLoading jQueryWhere is My Site?JSON View FunctionsThe HTMLNavigationOverviewPatterns for FlaskPrevious:Message FlashingNext:Custom Error PagesVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/jquery/"},
{"text": "Custom Error Pages \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbCustom Error Pages\n\u00b6Flask comes with a handyabort()function that aborts a\nrequest with an HTTP error code early.It will also provide a plain black\nand white error page for you with a basic description, but nothing fancy.Depending on the error code it is less or more likely for the user to\nactually see such an error.Common Error Codes\n\u00b6The following error codes are some that are often displayed to the user,\neven if the application behaves correctly:404 Not FoundThe good old \u201cchap, you made a mistake typing that URL\u201d message.So\ncommon that even novices to the internet know that 404 means: damn,\nthe thing I was looking for is not there.It\u2019s a very good idea to\nmake sure there is actually something useful on a 404 page, at least a\nlink back to the index.403 ForbiddenIf you have some kind of access control on your website, you will have\nto send a 403 code for disallowed resources.So make sure the user\nis not lost when they try to access a forbidden resource.410 GoneDid you know that there the \u201c404 Not Found\u201d has a brother named \u201c410\nGone\u201d?Few people actually implement that, but the idea is that\nresources that previously existed and got deleted answer with 410\ninstead of 404.If you are not deleting documents permanently from\nthe database but just mark them as deleted, do the user a favour and\nuse the 410 code instead and display a message that what they were\nlooking for was deleted for all eternity.500 Internal Server ErrorUsually happens on programming errors or if the server is overloaded.\nA terribly good idea is to have a nice page there, because your\napplicationwillfail sooner or later (see also:Application Errors\n).Error Handlers\n\u00b6An error handler is a function that returns a response when a type of error is\nraised, similar to how a view is a function that returns a response when a\nrequest URL is matched. It is passed the instance of the error being handled,\nwhich is most likely aHTTPException\n. An error\nhandler for \u201c500 Internal Server Error\u201d will be passed uncaught exceptions in\naddition to explicit 500 errors.An error handler is registered with theerrorhandler()decorator or theregister_error_handler()method. A handler\ncan be registered for a status code, like 404, or for an exception class.The status code of the response will not be set to the handler\u2019s code. Make\nsure to provide the appropriate HTTP status code when returning a response from\na handler.A handler for \u201c500 Internal Server Error\u201d will not be used when running in\ndebug mode. Instead, the interactive debugger will be shown.Here is an example implementation for a \u201c404 Page Not Found\u201d exception:fromflaskimportrender_template@app\n.\nerrorhandler\n(\n404\n)defpage_not_found\n(\ne\n):# note that we set the 404 status explicitlyreturnrender_template\n(\n'404.html'\n),404When using theapplication factory pattern\n:fromflaskimportFlask\n,render_templatedefpage_not_found\n(\ne\n):returnrender_template\n(\n'404.html'\n),404defcreate_app\n(\nconfig_filename\n):app=Flask\n(\n__name__\n)app\n.\nregister_error_handler\n(\n404\n,page_not_found\n)returnappAn example template might be this:{%extends\"layout.html\"%}{%blocktitle%}\nPage Not Found\n{%endblock%}{%blockbody%}<\nh1\n>\nPage Not Found\n</\nh1\n><\np\n>\nWhat you were looking for is just not there.<\np\n><\nahref\n=\n\"\n{{url_for\n(\n'index'\n)}}\n\"\n>\ngo somewhere nice\n</\na\n>{%endblock%}ContentsCustom Error PagesCommon Error CodesError HandlersNavigationOverviewPatterns for FlaskPrevious:AJAX with jQueryNext:Lazily Loading ViewsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/errorpages/"},
{"text": "Form Validation with WTForms \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbForm Validation with WTForms\n\u00b6When you have to work with form data submitted by a browser view, code\nquickly becomes very hard to read.There are libraries out there designed\nto make this process easier to manage.One of them isWTFormswhich we\nwill handle here.If you find yourself in the situation of having many\nforms, you might want to give it a try.When you are working with WTForms you have to define your forms as classes\nfirst.I recommend breaking up the application into multiple modules\n(\nLarger Applications\n) for that and adding a separate module for the\nforms.Getting the most out of WTForms with an ExtensionTheFlask-WTFextension expands on this pattern and adds a\nfew little helpers that make working with forms and Flask more\nfun.You can get it fromPyPI\n.The Forms\n\u00b6This is an example form for a typical registration page:fromwtformsimportForm\n,BooleanField\n,StringField\n,PasswordField\n,validatorsclassRegistrationForm\n(\nForm\n):username=StringField\n(\n'Username'\n,[\nvalidators\n.\nLength\n(\nmin\n=\n4\n,max\n=\n25\n)])email=StringField\n(\n'Email Address'\n,[\nvalidators\n.\nLength\n(\nmin\n=\n6\n,max\n=\n35\n)])password=PasswordField\n(\n'New Password'\n,[validators\n.\nDataRequired\n(),validators\n.\nEqualTo\n(\n'confirm'\n,message\n=\n'Passwords must match'\n)])confirm=PasswordField\n(\n'Repeat Password'\n)accept_tos=BooleanField\n(\n'I accept the TOS'\n,[\nvalidators\n.\nDataRequired\n()])In the View\n\u00b6In the view function, the usage of this form looks like this:@app\n.\nroute\n(\n'/register'\n,methods\n=\n[\n'GET'\n,'POST'\n])defregister\n():form=RegistrationForm\n(\nrequest\n.\nform\n)ifrequest\n.\nmethod=='POST'andform\n.\nvalidate\n():user=User\n(\nform\n.\nusername\n.\ndata\n,form\n.\nemail\n.\ndata\n,form\n.\npassword\n.\ndata\n)db_session\n.\nadd\n(\nuser\n)flash\n(\n'Thanks for registering'\n)returnredirect\n(\nurl_for\n(\n'login'\n))returnrender_template\n(\n'register.html'\n,form\n=\nform\n)Notice we\u2019re implying that the view is using SQLAlchemy here\n(\nSQLAlchemy in Flask\n), but that\u2019s not a requirement, of course.Adapt\nthe code as necessary.Things to remember:create the form from the requestformvalue if\nthe data is submitted via the HTTPPOSTmethod andargsif the data is submitted asGET\n.to validate the data, call thevalidate()method, which will returnTrueif the data validates,Falseotherwise.to access individual values from the form, accessform.<NAME>.data\n.Forms in Templates\n\u00b6Now to the template side.When you pass the form to the templates, you can\neasily render them there.Look at the following example template to see\nhow easy this is.WTForms does half the form generation for us already.\nTo make it even nicer, we can write a macro that renders a field with\nlabel and a list of errors if there are any.Here\u2019s an example_formhelpers.htmltemplate with such a macro:{%macrorender_field\n(\nfield\n)%}<\ndt\n>\n{{field.label}}<\ndd\n>\n{{field\n(**\nkwargs\n)|\nsafe}}{%iffield.errors%}<\nulclass\n=\nerrors\n>{%forerrorinfield.errors%}<\nli\n>\n{{error}}\n</\nli\n>{%endfor%}</\nul\n>{%endif%}</\ndd\n>{%endmacro%}This macro accepts a couple of keyword arguments that are forwarded to\nWTForm\u2019s field function, which renders the field for us.The keyword\narguments will be inserted as HTML attributes.So, for example, you can\ncallrender_field(form.username,class='username')to add a class to\nthe input element.Note that WTForms returns standard Python unicode\nstrings, so we have to tell Jinja2 that this data is already HTML-escaped\nwith the|safefilter.Here is theregister.htmltemplate for the function we used above, which\ntakes advantage of the_formhelpers.htmltemplate:{%from\"_formhelpers.html\"importrender_field%}<\nformmethod\n=\npost\n><\ndl\n>{{render_field\n(\nform.username\n)}}{{render_field\n(\nform.email\n)}}{{render_field\n(\nform.password\n)}}{{render_field\n(\nform.confirm\n)}}{{render_field\n(\nform.accept_tos\n)}}</\ndl\n><\np\n><\ninputtype\n=\nsubmitvalue\n=\nRegister\n></\nform\n>For more information about WTForms, head over to theWTForms\nwebsite\n.ContentsForm Validation with WTFormsThe FormsIn the ViewForms in TemplatesNavigationOverviewPatterns for FlaskPrevious:View DecoratorsNext:Template InheritanceVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/wtforms/"},
{"text": "Caching \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbCaching\n\u00b6When your application runs slow, throw some caches in.Well, at least\nit\u2019s the easiest way to speed up things.What does a cache do?Say you\nhave a function that takes some time to complete but the results would\nstill be good enough if they were 5 minutes old.So then the idea is that\nyou actually put the result of that calculation into a cache for some\ntime.Flask itself does not provide caching for you, but Werkzeug, one of the\nlibraries it is based on, has some very basic cache support.It supports\nmultiple cache backends, normally you want to use a memcached server.Setting up a Cache\n\u00b6You create a cache object once and keep it around, similar to howFlaskobjects are created.If you are using the\ndevelopment server you can create aSimpleCacheobject, that one is a simple\ncache that keeps the item stored in the memory of the Python interpreter:fromwerkzeug.contrib.cacheimportSimpleCachecache=SimpleCache\n()If you want to use memcached, make sure to have one of the memcache modules\nsupported (you get them fromPyPI\n) and a\nmemcached server running somewhere.This is how you connect to such an\nmemcached server then:fromwerkzeug.contrib.cacheimportMemcachedCachecache=MemcachedCache\n([\n'127.0.0.1:11211'\n])If you are using App Engine, you can connect to the App Engine memcache\nserver easily:fromwerkzeug.contrib.cacheimportGAEMemcachedCachecache=GAEMemcachedCache\n()Using a Cache\n\u00b6Now how can one use such a cache?There are two very important\noperations:get()andset()\n.This is how to use them:To get an item from the cache callget()with a string as key name.\nIf something is in the cache, it is returned.Otherwise that function\nwill returnNone\n:rv=cache\n.\nget\n(\n'my-item'\n)To add items to the cache, use theset()method instead.The first argument is the key and the second the value\nthat should be set.Also a timeout can be provided after which the cache\nwill automatically remove item.Here a full example how this looks like normally:defget_my_item\n():rv=cache\n.\nget\n(\n'my-item'\n)ifrvisNone\n:rv=calculate_value\n()cache\n.\nset\n(\n'my-item'\n,rv\n,timeout\n=\n5*60\n)returnrvContentsCachingSetting up a CacheUsing a CacheNavigationOverviewPatterns for FlaskPrevious:Uploading FilesNext:View DecoratorsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/caching/"},
{"text": "Uploading Files \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbUploading Files\n\u00b6Ah yes, the good old problem of file uploads.The basic idea of file\nuploads is actually quite simple.It basically works like this:A<form>tag is marked withenctype=multipart/form-dataand an<inputtype=file>is placed in that form.The application accesses the file from thefilesdictionary on the request object.use thesave()method of the file to save\nthe file permanently somewhere on the filesystem.A Gentle Introduction\n\u00b6Let\u2019s start with a very basic application that uploads a file to a\nspecific upload folder and displays a file to the user.Let\u2019s look at the\nbootstrapping code for our application:importosfromflaskimportFlask\n,flash\n,request\n,redirect\n,url_forfromwerkzeug.utilsimportsecure_filenameUPLOAD_FOLDER='/path/to/the/uploads'ALLOWED_EXTENSIONS=set\n([\n'txt'\n,'pdf'\n,'png'\n,'jpg'\n,'jpeg'\n,'gif'\n])app=Flask\n(\n__name__\n)app\n.\nconfig\n[\n'UPLOAD_FOLDER'\n]=UPLOAD_FOLDERSo first we need a couple of imports.Most should be straightforward, thewerkzeug.secure_filename()is explained a little bit later.TheUPLOAD_FOLDERis where we will store the uploaded files and theALLOWED_EXTENSIONSis the set of allowed file extensions.Why do we limit the extensions that are allowed?You probably don\u2019t want\nyour users to be able to upload everything there if the server is directly\nsending out the data to the client.That way you can make sure that users\nare not able to upload HTML files that would cause XSS problems (seeCross-Site Scripting (XSS)\n).Also make sure to disallow.phpfiles if the server\nexecutes them, but who has PHP installed on their server, right?:)Next the functions that check if an extension is valid and that uploads\nthe file and redirects the user to the URL for the uploaded file:defallowed_file\n(\nfilename\n):return'.'infilenameand\\filename\n.\nrsplit\n(\n'.'\n,1\n)[\n1\n]\n.\nlower\n()inALLOWED_EXTENSIONS@app\n.\nroute\n(\n'/'\n,methods\n=\n[\n'GET'\n,'POST'\n])defupload_file\n():ifrequest\n.\nmethod=='POST'\n:# check if the post request has the file partif'file'notinrequest\n.\nfiles\n:flash\n(\n'No file part'\n)returnredirect\n(\nrequest\n.\nurl\n)file=request\n.\nfiles\n[\n'file'\n]# if user does not select file, browser also# submit an empty part without filenameiffile\n.\nfilename==''\n:flash\n(\n'No selected file'\n)returnredirect\n(\nrequest\n.\nurl\n)iffileandallowed_file\n(\nfile\n.\nfilename\n):filename=secure_filename\n(\nfile\n.\nfilename\n)file\n.\nsave\n(\nos\n.\npath\n.\njoin\n(\napp\n.\nconfig\n[\n'UPLOAD_FOLDER'\n],filename\n))returnredirect\n(\nurl_for\n(\n'uploaded_file'\n,filename\n=\nfilename\n))return'''<!doctype html><title>Upload new File</title><h1>Upload new File</h1><form method=post enctype=multipart/form-data><input type=file name=file><input type=submit value=Upload></form>'''So what does thatsecure_filename()function actually do?\nNow the problem is that there is that principle called \u201cnever trust user\ninput\u201d.This is also true for the filename of an uploaded file.All\nsubmitted form data can be forged, and filenames can be dangerous.For\nthe moment just remember: always use that function to secure a filename\nbefore storing it directly on the filesystem.Information for the ProsSo you\u2019re interested in what thatsecure_filename()function does and what the problem is if you\u2019re not using it?So just\nimagine someone would send the following information asfilenameto\nyour application:filename=\"../../../../home/username/.bashrc\"Assuming the number of../is correct and you would join this with\ntheUPLOAD_FOLDERthe user might have the ability to modify a file on\nthe server\u2019s filesystem he or she should not modify.This does require some\nknowledge about how the application looks like, but trust me, hackers\nare patient :)Now let\u2019s look how that function works:>>>secure_filename\n(\n'../../../../home/username/.bashrc'\n)'home_username_.bashrc'Now one last thing is missing: the serving of the uploaded files. In theupload_file()we redirect the user tourl_for('uploaded_file',filename=filename)\n, that is,/uploads/filename\n.\nSo we write theuploaded_file()function to return the file of that name. As\nof Flask 0.5 we can use a function that does that for us:fromflaskimportsend_from_directory@app\n.\nroute\n(\n'/uploads/<filename>'\n)defuploaded_file\n(\nfilename\n):returnsend_from_directory\n(\napp\n.\nconfig\n[\n'UPLOAD_FOLDER'\n],filename\n)Alternatively you can registeruploaded_fileasbuild_onlyrule and\nuse theSharedDataMiddleware\n.This also works with\nolder versions of Flask:fromwerkzeugimportSharedDataMiddlewareapp\n.\nadd_url_rule\n(\n'/uploads/<filename>'\n,'uploaded_file'\n,build_only\n=\nTrue\n)app\n.\nwsgi_app=SharedDataMiddleware\n(\napp\n.\nwsgi_app\n,{'/uploads'\n:app\n.\nconfig\n[\n'UPLOAD_FOLDER'\n]})If you now run the application everything should work as expected.Improving Uploads\n\u00b6ChangelogNew in version 0.6.So how exactly does Flask handle uploads?Well it will store them in the\nwebserver\u2019s memory if the files are reasonable small otherwise in a\ntemporary location (as returned bytempfile.gettempdir()\n).But how\ndo you specify the maximum file size after which an upload is aborted?By\ndefault Flask will happily accept file uploads to an unlimited amount of\nmemory, but you can limit that by setting theMAX_CONTENT_LENGTHconfig key:fromflaskimportFlask\n,Requestapp=Flask\n(\n__name__\n)app\n.\nconfig\n[\n'MAX_CONTENT_LENGTH'\n]=16*1024*1024The code above will limit the maximum allowed payload to 16 megabytes.\nIf a larger file is transmitted, Flask will raise aRequestEntityTooLargeexception.Connection Reset IssueWhen using the local development server, you may get a connection\nreset error instead of a 413 response. You will get the correct\nstatus response when running the app with a production WSGI server.This feature was added in Flask 0.6 but can be achieved in older versions\nas well by subclassing the request object.For more information on that\nconsult the Werkzeug documentation on file handling.Upload Progress Bars\n\u00b6A while ago many developers had the idea to read the incoming file in\nsmall chunks and store the upload progress in the database to be able to\npoll the progress with JavaScript from the client.Long story short: the\nclient asks the server every 5 seconds how much it has transmitted\nalready.Do you realize the irony?The client is asking for something it\nshould already know.An Easier Solution\n\u00b6Now there are better solutions that work faster and are more reliable. There\nare JavaScript libraries likejQuerythat have form plugins to ease the\nconstruction of progress bar.Because the common pattern for file uploads exists almost unchanged in all\napplications dealing with uploads, there is also a Flask extension calledFlask-Uploadsthat implements a full fledged upload mechanism with white and\nblacklisting of extensions and more.ContentsUploading FilesA Gentle IntroductionImproving UploadsUpload Progress BarsAn Easier SolutionNavigationOverviewPatterns for FlaskPrevious:SQLAlchemy in FlaskNext:CachingVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/fileuploads/"},
{"text": "Using SQLite 3 with Flask \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbUsing SQLite 3 with Flask\n\u00b6In Flask you can easily implement the opening of database connections on\ndemand and closing them when the context dies (usually at the end of the\nrequest).Here is a simple example of how you can use SQLite 3 with Flask:importsqlite3fromflaskimportgDATABASE='/path/to/database.db'defget_db\n():db=getattr\n(\ng\n,'_database'\n,None\n)ifdbisNone\n:db=g\n.\n_database=sqlite3\n.\nconnect\n(\nDATABASE\n)returndb@app\n.\nteardown_appcontextdefclose_connection\n(\nexception\n):db=getattr\n(\ng\n,'_database'\n,None\n)ifdbisnotNone\n:db\n.\nclose\n()Now, to use the database, the application must either have an active\napplication context (which is always true if there is a request in flight)\nor create an application context itself.At that point theget_dbfunction can be used to get the current database connection.Whenever the\ncontext is destroyed the database connection will be terminated.Note: if you use Flask 0.9 or older you need to useflask._app_ctx_stack.topinstead ofgas theflask.gobject was bound to the request and not application context.Example:@app\n.\nroute\n(\n'/'\n)defindex\n():cur=get_db\n()\n.\ncursor\n()...NotePlease keep in mind that the teardown request and appcontext functions\nare always executed, even if a before-request handler failed or was\nnever executed.Because of this we have to make sure here that the\ndatabase is there before we close it.Connect on Demand\n\u00b6The upside of this approach (connecting on first use) is that this will\nonly open the connection if truly necessary.If you want to use this\ncode outside a request context you can use it in a Python shell by opening\nthe application context by hand:withapp\n.\napp_context\n():# now you can use get_db()Easy Querying\n\u00b6Now in each request handling function you can accessget_db()to get the\ncurrent open database connection.To simplify working with SQLite, a\nrow factory function is useful.It is executed for every result returned\nfrom the database to convert the result.For instance, in order to get\ndictionaries instead of tuples, this could be inserted into theget_dbfunction we created above:defmake_dicts\n(\ncursor\n,row\n):returndict\n((\ncursor\n.\ndescription\n[\nidx\n][\n0\n],value\n)foridx\n,valueinenumerate\n(\nrow\n))db\n.\nrow_factory=make_dictsThis will make the sqlite3 module return dicts for this database connection, which are much nicer to deal with. Even more simply, we could place this inget_dbinstead:db\n.\nrow_factory=sqlite3\n.\nRowThis would use Row objects rather than dicts to return the results of queries. These arenamedtuples, so we can access them either by index or by key. For example, assuming we have asqlite3.Rowcalledrfor the rowsid\n,FirstName\n,LastName\n, andMiddleInitial\n:>>># You can get values based on the row's name>>>r\n[\n'FirstName'\n]John>>># Or, you can get them based on index>>>r\n[\n1\n]John# Row objects are also iterable:>>>forvalueinr\n:...print\n(\nvalue\n)1JohnDoeMAdditionally, it is a good idea to provide a query function that combines\ngetting the cursor, executing and fetching the results:defquery_db\n(\nquery\n,args\n=\n(),one\n=\nFalse\n):cur=get_db\n()\n.\nexecute\n(\nquery\n,args\n)rv=cur\n.\nfetchall\n()cur\n.\nclose\n()return(\nrv\n[\n0\n]ifrvelseNone\n)ifoneelservThis handy little function, in combination with a row factory, makes\nworking with the database much more pleasant than it is by just using the\nraw cursor and connection objects.Here is how you can use it:foruserinquery_db\n(\n'select * from users'\n):printuser\n[\n'username'\n],'has the id'\n,user\n[\n'user_id'\n]Or if you just want a single result:user=query_db\n(\n'select * from users where username = ?'\n,[\nthe_username\n],one\n=\nTrue\n)ifuserisNone\n:print'No such user'else\n:printthe_username\n,'has the id'\n,user\n[\n'user_id'\n]To pass variable parts to the SQL statement, use a question mark in the\nstatement and pass in the arguments as a list.Never directly add them to\nthe SQL statement with string formatting because this makes it possible\nto attack the application usingSQL Injections\n.Initial Schemas\n\u00b6Relational databases need schemas, so applications often ship aschema.sqlfile that creates the database.It\u2019s a good idea to provide\na function that creates the database based on that schema.This function\ncan do that for you:definit_db\n():withapp\n.\napp_context\n():db=get_db\n()withapp\n.\nopen_resource\n(\n'schema.sql'\n,mode\n=\n'r'\n)asf\n:db\n.\ncursor\n()\n.\nexecutescript\n(\nf\n.\nread\n())db\n.\ncommit\n()You can then create such a database from the Python shell:>>>fromyourapplicationimportinit_db>>>init_db\n()ContentsUsing SQLite 3 with FlaskConnect on DemandEasy QueryingInitial SchemasNavigationOverviewPatterns for FlaskPrevious:Deploying with FabricNext:SQLAlchemy in FlaskVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/sqlite3/"},
{"text": "SQLAlchemy in Flask \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbSQLAlchemy in Flask\n\u00b6Many people preferSQLAlchemyfor database access.In this case it\u2019s\nencouraged to use a package instead of a module for your flask application\nand drop the models into a separate module (\nLarger Applications\n).\nWhile that is not necessary, it makes a lot of sense.There are four very common ways to use SQLAlchemy.I will outline each\nof them here:Flask-SQLAlchemy Extension\n\u00b6Because SQLAlchemy is a common database abstraction layer and object\nrelational mapper that requires a little bit of configuration effort,\nthere is a Flask extension that handles that for you.This is recommended\nif you want to get started quickly.You can downloadFlask-SQLAlchemyfromPyPI\n.Declarative\n\u00b6The declarative extension in SQLAlchemy is the most recent method of using\nSQLAlchemy.It allows you to define tables and models in one go, similar\nto how Django works.In addition to the following text I recommend the\nofficial documentation on thedeclarativeextension.Here\u2019s the exampledatabase.pymodule for your application:fromsqlalchemyimportcreate_enginefromsqlalchemy.ormimportscoped_session\n,sessionmakerfromsqlalchemy.ext.declarativeimportdeclarative_baseengine=create_engine\n(\n'sqlite:////tmp/test.db'\n,convert_unicode\n=\nTrue\n)db_session=scoped_session\n(\nsessionmaker\n(\nautocommit\n=\nFalse\n,autoflush\n=\nFalse\n,bind\n=\nengine\n))Base=declarative_base\n()Base\n.\nquery=db_session\n.\nquery_property\n()definit_db\n():# import all modules here that might define models so that# they will be registered properly on the metadata.Otherwise# you will have to import them first before calling init_db()importyourapplication.modelsBase\n.\nmetadata\n.\ncreate_all\n(\nbind\n=\nengine\n)To define your models, just subclass theBaseclass that was created by\nthe code above.If you are wondering why we don\u2019t have to care about\nthreads here (like we did in the SQLite3 example above with thegobject): that\u2019s because SQLAlchemy does that for us\nalready with thescoped_session\n.To use SQLAlchemy in a declarative way with your application, you just\nhave to put the following code into your application module.Flask will\nautomatically remove database sessions at the end of the request or\nwhen the application shuts down:fromyourapplication.databaseimportdb_session@app\n.\nteardown_appcontextdefshutdown_session\n(\nexception\n=\nNone\n):db_session\n.\nremove\n()Here is an example model (put this intomodels.py\n, e.g.):fromsqlalchemyimportColumn\n,Integer\n,Stringfromyourapplication.databaseimportBaseclassUser\n(\nBase\n):__tablename__='users'id=Column\n(\nInteger\n,primary_key\n=\nTrue\n)name=Column\n(\nString\n(\n50\n),unique\n=\nTrue\n)email=Column\n(\nString\n(\n120\n),unique\n=\nTrue\n)def__init__\n(\nself\n,name\n=\nNone\n,email\n=\nNone\n):self\n.\nname=nameself\n.\nemail=emaildef__repr__\n(\nself\n):return'<User%r\n>'%(\nself\n.\nname\n)To create the database you can use theinit_dbfunction:>>>fromyourapplication.databaseimportinit_db>>>init_db\n()You can insert entries into the database like this:>>>fromyourapplication.databaseimportdb_session>>>fromyourapplication.modelsimportUser>>>u=User\n(\n'admin'\n,'admin@localhost'\n)>>>db_session\n.\nadd\n(\nu\n)>>>db_session\n.\ncommit\n()Querying is simple as well:>>>User\n.\nquery\n.\nall\n()[<User u'admin'>]>>>User\n.\nquery\n.\nfilter\n(\nUser\n.\nname=='admin'\n)\n.\nfirst\n()<User u'admin'>Manual Object Relational Mapping\n\u00b6Manual object relational mapping has a few upsides and a few downsides\nversus the declarative approach from above.The main difference is that\nyou define tables and classes separately and map them together.It\u2019s more\nflexible but a little more to type.In general it works like the\ndeclarative approach, so make sure to also split up your application into\nmultiple modules in a package.Here is an exampledatabase.pymodule for your application:fromsqlalchemyimportcreate_engine\n,MetaDatafromsqlalchemy.ormimportscoped_session\n,sessionmakerengine=create_engine\n(\n'sqlite:////tmp/test.db'\n,convert_unicode\n=\nTrue\n)metadata=MetaData\n()db_session=scoped_session\n(\nsessionmaker\n(\nautocommit\n=\nFalse\n,autoflush\n=\nFalse\n,bind\n=\nengine\n))definit_db\n():metadata\n.\ncreate_all\n(\nbind\n=\nengine\n)As in the declarative approach, you need to close the session after\neach request or application context shutdown.Put this into your\napplication module:fromyourapplication.databaseimportdb_session@app\n.\nteardown_appcontextdefshutdown_session\n(\nexception\n=\nNone\n):db_session\n.\nremove\n()Here is an example table and model (put this intomodels.py\n):fromsqlalchemyimportTable\n,Column\n,Integer\n,Stringfromsqlalchemy.ormimportmapperfromyourapplication.databaseimportmetadata\n,db_sessionclassUser\n(\nobject\n):query=db_session\n.\nquery_property\n()def__init__\n(\nself\n,name\n=\nNone\n,email\n=\nNone\n):self\n.\nname=nameself\n.\nemail=emaildef__repr__\n(\nself\n):return'<User%r\n>'%(\nself\n.\nname\n)users=Table\n(\n'users'\n,metadata\n,Column\n(\n'id'\n,Integer\n,primary_key\n=\nTrue\n),Column\n(\n'name'\n,String\n(\n50\n),unique\n=\nTrue\n),Column\n(\n'email'\n,String\n(\n120\n),unique\n=\nTrue\n))mapper\n(\nUser\n,users\n)Querying and inserting works exactly the same as in the example above.SQL Abstraction Layer\n\u00b6If you just want to use the database system (and SQL) abstraction layer\nyou basically only need the engine:fromsqlalchemyimportcreate_engine\n,MetaData\n,Tableengine=create_engine\n(\n'sqlite:////tmp/test.db'\n,convert_unicode\n=\nTrue\n)metadata=MetaData\n(\nbind\n=\nengine\n)Then you can either declare the tables in your code like in the examples\nabove, or automatically load them:fromsqlalchemyimportTableusers=Table\n(\n'users'\n,metadata\n,autoload\n=\nTrue\n)To insert data you can use theinsertmethod.We have to get a\nconnection first so that we can use a transaction:>>>con=engine\n.\nconnect\n()>>>con\n.\nexecute\n(\nusers\n.\ninsert\n(),name\n=\n'admin'\n,email\n=\n'admin@localhost'\n)SQLAlchemy will automatically commit for us.To query your database, you use the engine directly or use a connection:>>>users\n.\nselect\n(\nusers\n.\nc\n.\nid==1\n)\n.\nexecute\n()\n.\nfirst\n()(1, u'admin', u'admin@localhost')These results are also dict-like tuples:>>>r=users\n.\nselect\n(\nusers\n.\nc\n.\nid==1\n)\n.\nexecute\n()\n.\nfirst\n()>>>r\n[\n'name'\n]u'admin'You can also pass strings of SQL statements to theexecute()method:>>>engine\n.\nexecute\n(\n'select * from users where id = :1'\n,[\n1\n])\n.\nfirst\n()(1, u'admin', u'admin@localhost')For more information about SQLAlchemy, head over to thewebsite\n.ContentsSQLAlchemy in FlaskFlask-SQLAlchemy ExtensionDeclarativeManual Object Relational MappingSQL Abstraction LayerNavigationOverviewPatterns for FlaskPrevious:Using SQLite 3 with FlaskNext:Uploading FilesVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/sqlalchemy/"},
{"text": "Template Inheritance \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbTemplate Inheritance\n\u00b6The most powerful part of Jinja is template inheritance. Template inheritance\nallows you to build a base \u201cskeleton\u201d template that contains all the common\nelements of your site and definesblocksthat child templates can override.Sounds complicated but is very basic. It\u2019s easiest to understand it by starting\nwith an example.Base Template\n\u00b6This template, which we\u2019ll calllayout.html\n, defines a simple HTML skeleton\ndocument that you might use for a simple two-column page. It\u2019s the job of\n\u201cchild\u201d templates to fill the empty blocks with content:<!doctype html><\nhtml\n><\nhead\n>{%blockhead%}<\nlinkrel\n=\n\"stylesheet\"href\n=\n\"\n{{url_for\n(\n'static'\n,filename\n=\n'style.css'\n)}}\n\"\n><\ntitle\n>\n{%blocktitle%}{%endblock%}- My Webpage\n</\ntitle\n>{%endblock%}</\nhead\n><\nbody\n><\ndivid\n=\n\"content\"\n>\n{%blockcontent%}{%endblock%}\n</\ndiv\n><\ndivid\n=\n\"footer\"\n>{%blockfooter%}&copy;Copyright 2010 by<\nahref\n=\n\"http://domain.invalid/\"\n>\nyou\n</\na\n>\n.{%endblock%}</\ndiv\n></\nbody\n></\nhtml\n>In this example, the{%block%}tags define four blocks that child templates\ncan fill in. All theblocktag does is tell the template engine that a\nchild template may override those portions of the template.Child Template\n\u00b6A child template might look like this:{%extends\"layout.html\"%}{%blocktitle%}\nIndex\n{%endblock%}{%blockhead%}{{super\n()}}<\nstyletype\n=\n\"text/css\"\n>.\nimportant{color\n:#336699\n;}</\nstyle\n>{%endblock%}{%blockcontent%}<\nh1\n>\nIndex\n</\nh1\n><\npclass\n=\n\"important\"\n>Welcome on my awesome homepage.{%endblock%}The{%extends%}tag is the key here. It tells the template engine that\nthis template \u201cextends\u201d another template.When the template system evaluates\nthis template, first it locates the parent.The extends tag must be the\nfirst tag in the template.To render the contents of a block defined in\nthe parent template, use{{super()}}\n.ContentsTemplate InheritanceBase TemplateChild TemplateNavigationOverviewPatterns for FlaskPrevious:Form Validation with WTFormsNext:Message FlashingVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/templateinheritance/"},
{"text": "Message Flashing \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbMessage Flashing\n\u00b6Good applications and user interfaces are all about feedback.If the user\ndoes not get enough feedback they will probably end up hating the\napplication.Flask provides a really simple way to give feedback to a\nuser with the flashing system.The flashing system basically makes it\npossible to record a message at the end of a request and access it next\nrequest and only next request.This is usually combined with a layout\ntemplate that does this. Note that browsers and sometimes web servers enforce\na limit on cookie sizes. This means that flashing messages that are too\nlarge for session cookies causes message flashing to fail silently.Simple Flashing\n\u00b6So here is a full example:fromflaskimportFlask\n,flash\n,redirect\n,render_template\n,\\request\n,url_forapp=Flask\n(\n__name__\n)app\n.\nsecret_key=b\n'_5#y2L\"F4Q8z\n\\n\\xec\n]/'@app\n.\nroute\n(\n'/'\n)defindex\n():returnrender_template\n(\n'index.html'\n)@app\n.\nroute\n(\n'/login'\n,methods\n=\n[\n'GET'\n,'POST'\n])deflogin\n():error=Noneifrequest\n.\nmethod=='POST'\n:ifrequest\n.\nform\n[\n'username'\n]!='admin'or\\request\n.\nform\n[\n'password'\n]!='secret'\n:error='Invalid credentials'else\n:flash\n(\n'You were successfully logged in'\n)returnredirect\n(\nurl_for\n(\n'index'\n))returnrender_template\n(\n'login.html'\n,error\n=\nerror\n)And here is thelayout.htmltemplate which does the magic:<!doctype html><\ntitle\n>\nMy Application\n</\ntitle\n>{%withmessages=get_flashed_messages\n()%}{%ifmessages%}<\nulclass\n=\nflashes\n>{%formessageinmessages%}<\nli\n>\n{{message}}\n</\nli\n>{%endfor%}</\nul\n>{%endif%}{%endwith%}{%blockbody%}{%endblock%}Here is theindex.htmltemplate which inherits fromlayout.html\n:{%extends\"layout.html\"%}{%blockbody%}<\nh1\n>\nOverview\n</\nh1\n><\np\n>\nDo you want to<\nahref\n=\n\"\n{{url_for\n(\n'login'\n)}}\n\"\n>\nlog in?\n</\na\n>{%endblock%}And here is thelogin.htmltemplate which also inherits fromlayout.html\n:{%extends\"layout.html\"%}{%blockbody%}<\nh1\n>\nLogin\n</\nh1\n>{%iferror%}<\npclass\n=\nerror\n><\nstrong\n>\nError:\n</\nstrong\n>{{error}}{%endif%}<\nformmethod\n=\npost\n><\ndl\n><\ndt\n>\nUsername:<\ndd\n><\ninputtype\n=\ntextname\n=\nusernamevalue\n=\n\"\n{{request.form.username}}\n\"\n><\ndt\n>\nPassword:<\ndd\n><\ninputtype\n=\npasswordname\n=\npassword\n></\ndl\n><\np\n><\ninputtype\n=\nsubmitvalue\n=\nLogin\n></\nform\n>{%endblock%}Flashing With Categories\n\u00b6ChangelogNew in version 0.3.It is also possible to provide categories when flashing a message.The\ndefault category if nothing is provided is'message'\n.Alternative\ncategories can be used to give the user better feedback.For example\nerror messages could be displayed with a red background.To flash a message with a different category, just use the second argument\nto theflash()function:flash\n(\nu\n'Invalid password provided'\n,'error'\n)Inside the template you then have to tell theget_flashed_messages()function to also return the\ncategories.The loop looks slightly different in that situation then:{%withmessages=get_flashed_messages\n(\nwith_categories\n=\ntrue\n)%}{%ifmessages%}<\nulclass\n=\nflashes\n>{%forcategory\n,messageinmessages%}<\nliclass\n=\n\"\n{{category}}\n\"\n>\n{{message}}\n</\nli\n>{%endfor%}</\nul\n>{%endif%}{%endwith%}This is just one example of how to render these flashed messages.One\nmight also use the category to add a prefix such as<strong>Error:</strong>to the message.Filtering Flash Messages\n\u00b6ChangelogNew in version 0.9.Optionally you can pass a list of categories which filters the results ofget_flashed_messages()\n.This is useful if you wish to\nrender each category in a separate block.{%witherrors=get_flashed_messages\n(\ncategory_filter\n=[\n\"error\"\n])%}{%iferrors%}<\ndivclass\n=\n\"alert-message block-message error\"\n><\naclass\n=\n\"close\"href\n=\n\"#\"\n>\n\u00d7\n</\na\n><\nul\n>{%\n-formsginerrors%}<\nli\n>\n{{msg}}\n</\nli\n>{%endfor-\n%}</\nul\n></\ndiv\n>{%endif%}{%endwith%}ContentsMessage FlashingSimple FlashingFlashing With CategoriesFiltering Flash MessagesNavigationOverviewPatterns for FlaskPrevious:Template InheritanceNext:AJAX with jQueryVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/flashing/"},
{"text": "Application Factories \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbApplication Factories\n\u00b6If you are already using packages and blueprints for your application\n(\nModular Applications with Blueprints\n) there are a couple of really nice ways to further improve\nthe experience.A common pattern is creating the application object when\nthe blueprint is imported.But if you move the creation of this object\ninto a function, you can then create multiple instances of this app later.So why would you want to do this?Testing.You can have instances of the application with different\nsettings to test every case.Multiple instances.Imagine you want to run different versions of the\nsame application.Of course you could have multiple instances with\ndifferent configs set up in your webserver, but if you use factories,\nyou can have multiple instances of the same application running in the\nsame application process which can be handy.So how would you then actually implement that?Basic Factories\n\u00b6The idea is to set up the application in a function.Like this:defcreate_app\n(\nconfig_filename\n):app=Flask\n(\n__name__\n)app\n.\nconfig\n.\nfrom_pyfile\n(\nconfig_filename\n)fromyourapplication.modelimportdbdb\n.\ninit_app\n(\napp\n)fromyourapplication.views.adminimportadminfromyourapplication.views.frontendimportfrontendapp\n.\nregister_blueprint\n(\nadmin\n)app\n.\nregister_blueprint\n(\nfrontend\n)returnappThe downside is that you cannot use the application object in the blueprints\nat import time.You can however use it from within a request.How do you\nget access to the application with the config?Usecurrent_app\n:fromflaskimportcurrent_app\n,Blueprint\n,render_templateadmin=Blueprint\n(\n'admin'\n,__name__\n,url_prefix\n=\n'/admin'\n)@admin\n.\nroute\n(\n'/'\n)defindex\n():returnrender_template\n(\ncurrent_app\n.\nconfig\n[\n'INDEX_TEMPLATE'\n])Here we look up the name of a template in the config.Factories & Extensions\n\u00b6It\u2019s preferable to create your extensions and app factories so that the\nextension object does not initially get bound to the application.UsingFlask-SQLAlchemy\n,\nas an example, you should not do something along those lines:defcreate_app\n(\nconfig_filename\n):app=Flask\n(\n__name__\n)app\n.\nconfig\n.\nfrom_pyfile\n(\nconfig_filename\n)db=SQLAlchemy\n(\napp\n)But, rather, in model.py (or equivalent):db=SQLAlchemy\n()and in your application.py (or equivalent):defcreate_app\n(\nconfig_filename\n):app=Flask\n(\n__name__\n)app\n.\nconfig\n.\nfrom_pyfile\n(\nconfig_filename\n)fromyourapplication.modelimportdbdb\n.\ninit_app\n(\napp\n)Using this design pattern, no application-specific state is stored on the\nextension object, so one extension object can be used for multiple apps.\nFor more information about the design of extensions refer toFlask Extension Development\n.Using Applications\n\u00b6To run such an application, you can use theflaskcommand:exportFLASK_APP\n=\nmyappflaskrunFlask will automatically detect the factory (\ncreate_appormake_app\n)\ninmyapp\n. You can also pass arguments to the factory like this:exportFLASK_APP\n=\n\"myapp:create_app('dev')\"flaskrunThen thecreate_appfactory inmyappis called with the string'dev'as the argument. SeeCommand Line Interfacefor more detail.Factory Improvements\n\u00b6The factory function above is not very clever, but you can improve it.\nThe following changes are straightforward to implement:Make it possible to pass in configuration values for unit tests so that\nyou don\u2019t have to create config files on the filesystem.Call a function from a blueprint when the application is setting up so\nthat you have a place to modify attributes of the application (like\nhooking in before/after request handlers etc.)Add in WSGI middlewares when the application is being created if necessary.ContentsApplication FactoriesBasic FactoriesFactories & ExtensionsUsing ApplicationsFactory ImprovementsNavigationOverviewPatterns for FlaskPrevious:Larger ApplicationsNext:Application DispatchingVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/appfactories/"},
{"text": "Implementing API Exceptions \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbImplementing API Exceptions\n\u00b6It\u2019s very common to implement RESTful APIs on top of Flask.One of the\nfirst things that developers run into is the realization that the builtin\nexceptions are not expressive enough for APIs and that the content type oftext/htmlthey are emitting is not very useful for API consumers.The better solution than usingabortto signal errors for invalid API\nusage is to implement your own exception type and install an error handler\nfor it that produces the errors in the format the user is expecting.Simple Exception Class\n\u00b6The basic idea is to introduce a new exception that can take a proper\nhuman readable message, a status code for the error and some optional\npayload to give more context for the error.This is a simple example:fromflaskimportjsonifyclassInvalidUsage\n(\nException\n):status_code=400def__init__\n(\nself\n,message\n,status_code\n=\nNone\n,payload\n=\nNone\n):Exception\n.\n__init__\n(\nself\n)self\n.\nmessage=messageifstatus_codeisnotNone\n:self\n.\nstatus_code=status_codeself\n.\npayload=payloaddefto_dict\n(\nself\n):rv=dict\n(\nself\n.\npayloador())rv\n[\n'message'\n]=self\n.\nmessagereturnrvA view can now raise that exception with an error message.Additionally\nsome extra payload can be provided as a dictionary through thepayloadparameter.Registering an Error Handler\n\u00b6At that point views can raise that error, but it would immediately result\nin an internal server error.The reason for this is that there is no\nhandler registered for this error class.That however is easy to add:@app\n.\nerrorhandler\n(\nInvalidUsage\n)defhandle_invalid_usage\n(\nerror\n):response=jsonify\n(\nerror\n.\nto_dict\n())response\n.\nstatus_code=error\n.\nstatus_codereturnresponseUsage in Views\n\u00b6Here is how a view can use that functionality:@app\n.\nroute\n(\n'/foo'\n)defget_foo\n():raiseInvalidUsage\n(\n'This view is gone'\n,status_code\n=\n410\n)ContentsImplementing API ExceptionsSimple Exception ClassRegistering an Error HandlerUsage in ViewsNavigationOverviewPatterns for FlaskPrevious:Application DispatchingNext:Using URL ProcessorsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/apierrors/"},
{"text": "Application Dispatching \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbApplication Dispatching\n\u00b6Application dispatching is the process of combining multiple Flask\napplications on the WSGI level.You can combine not only Flask\napplications but any WSGI application.This would allow you to run a\nDjango and a Flask application in the same interpreter side by side if\nyou want.The usefulness of this depends on how the applications work\ninternally.The fundamental difference from themodule approachis that in this case you are running the same or\ndifferent Flask applications that are entirely isolated from each other.\nThey run different configurations and are dispatched on the WSGI level.Working with this Document\n\u00b6Each of the techniques and examples below results in anapplicationobject\nthat can be run with any WSGI server.For production, seeDeployment Options\n.\nFor development, Werkzeug provides a builtin server for development available\natwerkzeug.serving.run_simple()\n:fromwerkzeug.servingimportrun_simplerun_simple\n(\n'localhost'\n,5000\n,application\n,use_reloader\n=\nTrue\n)Note thatrun_simpleis not intended for\nuse in production.Use afull-blown WSGI server\n.In order to use the interactive debugger, debugging must be enabled both on\nthe application and the simple server. Here is the \u201chello world\u201d example with\ndebugging andrun_simple\n:fromflaskimportFlaskfromwerkzeug.servingimportrun_simpleapp=Flask\n(\n__name__\n)app\n.\ndebug=True@app\n.\nroute\n(\n'/'\n)defhello_world\n():return'Hello World!'if__name__=='__main__'\n:run_simple\n(\n'localhost'\n,5000\n,app\n,use_reloader\n=\nTrue\n,use_debugger\n=\nTrue\n,use_evalex\n=\nTrue\n)Combining Applications\n\u00b6If you have entirely separated applications and you want them to work next\nto each other in the same Python interpreter process you can take\nadvantage of thewerkzeug.wsgi.DispatcherMiddleware\n.The idea\nhere is that each Flask application is a valid WSGI application and they\nare combined by the dispatcher middleware into a larger one that is\ndispatched based on prefix.For example you could have your main application run on/and your\nbackend interface on/backend\n:fromwerkzeug.wsgiimportDispatcherMiddlewarefromfrontend_appimportapplicationasfrontendfrombackend_appimportapplicationasbackendapplication=DispatcherMiddleware\n(\nfrontend\n,{'/backend'\n:backend})Dispatch by Subdomain\n\u00b6Sometimes you might want to use multiple instances of the same application\nwith different configurations.Assuming the application is created inside\na function and you can call that function to instantiate it, that is\nreally easy to implement.In order to develop your application to support\ncreating new instances in functions have a look at theApplication Factoriespattern.A very common example would be creating applications per subdomain.For\ninstance you configure your webserver to dispatch all requests for all\nsubdomains to your application and you then use the subdomain information\nto create user-specific instances.Once you have your server set up to\nlisten on all subdomains you can use a very simple WSGI application to do\nthe dynamic application creation.The perfect level for abstraction in that regard is the WSGI layer.You\nwrite your own WSGI application that looks at the request that comes and\ndelegates it to your Flask application.If that application does not\nexist yet, it is dynamically created and remembered:fromthreadingimportLockclassSubdomainDispatcher\n(\nobject\n):def__init__\n(\nself\n,domain\n,create_app\n):self\n.\ndomain=domainself\n.\ncreate_app=create_appself\n.\nlock=Lock\n()self\n.\ninstances={}defget_application\n(\nself\n,host\n):host=host\n.\nsplit\n(\n':'\n)[\n0\n]asserthost\n.\nendswith\n(\nself\n.\ndomain\n),'Configuration error'subdomain=host\n[:\n-\nlen\n(\nself\n.\ndomain\n)]\n.\nrstrip\n(\n'.'\n)withself\n.\nlock\n:app=self\n.\ninstances\n.\nget\n(\nsubdomain\n)ifappisNone\n:app=self\n.\ncreate_app\n(\nsubdomain\n)self\n.\ninstances\n[\nsubdomain\n]=appreturnappdef__call__\n(\nself\n,environ\n,start_response\n):app=self\n.\nget_application\n(\nenviron\n[\n'HTTP_HOST'\n])returnapp\n(\nenviron\n,start_response\n)This dispatcher can then be used like this:frommyapplicationimportcreate_app\n,get_user_for_subdomainfromwerkzeug.exceptionsimportNotFounddefmake_app\n(\nsubdomain\n):user=get_user_for_subdomain\n(\nsubdomain\n)ifuserisNone\n:# if there is no user for that subdomain we still have# to return a WSGI application that handles that request.# We can then just return the NotFound() exception as# application which will render a default 404 page.# You might also redirect the user to the main page thenreturnNotFound\n()# otherwise create the application for the specific userreturncreate_app\n(\nuser\n)application=SubdomainDispatcher\n(\n'example.com'\n,make_app\n)Dispatch by Path\n\u00b6Dispatching by a path on the URL is very similar.Instead of looking at\ntheHostheader to figure out the subdomain one simply looks at the\nrequest path up to the first slash:fromthreadingimportLockfromwerkzeug.wsgiimportpop_path_info\n,peek_path_infoclassPathDispatcher\n(\nobject\n):def__init__\n(\nself\n,default_app\n,create_app\n):self\n.\ndefault_app=default_appself\n.\ncreate_app=create_appself\n.\nlock=Lock\n()self\n.\ninstances={}defget_application\n(\nself\n,prefix\n):withself\n.\nlock\n:app=self\n.\ninstances\n.\nget\n(\nprefix\n)ifappisNone\n:app=self\n.\ncreate_app\n(\nprefix\n)ifappisnotNone\n:self\n.\ninstances\n[\nprefix\n]=appreturnappdef__call__\n(\nself\n,environ\n,start_response\n):app=self\n.\nget_application\n(\npeek_path_info\n(\nenviron\n))ifappisnotNone\n:pop_path_info\n(\nenviron\n)else\n:app=self\n.\ndefault_appreturnapp\n(\nenviron\n,start_response\n)The big difference between this and the subdomain one is that this one\nfalls back to another application if the creator function returnsNone\n:frommyapplicationimportcreate_app\n,default_app\n,get_user_for_prefixdefmake_app\n(\nprefix\n):user=get_user_for_prefix\n(\nprefix\n)ifuserisnotNone\n:returncreate_app\n(\nuser\n)application=PathDispatcher\n(\ndefault_app\n,make_app\n)ContentsApplication DispatchingWorking with this DocumentCombining ApplicationsDispatch by SubdomainDispatch by PathNavigationOverviewPatterns for FlaskPrevious:Application FactoriesNext:Implementing API ExceptionsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/appdispatch/"},
{"text": "Deploying with Fabric \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbDeploying with Fabric\n\u00b6Fabricis a tool for Python similar to Makefiles but with the ability\nto execute commands on a remote server.In combination with a properly\nset up Python package (\nLarger Applications\n) and a good concept for\nconfigurations (\nConfiguration Handling\n) it is very easy to deploy Flask\napplications to external servers.Before we get started, here a quick checklist of things we have to ensure\nupfront:Fabric 1.0 has to be installed locally.This tutorial assumes the\nlatest version of Fabric.The application already has to be a package and requires a workingsetup.pyfile (\nDeploying with Setuptools\n).In the following example we are usingmod_wsgifor the remote\nservers.You can of course use your own favourite server there, but\nfor this example we chose Apache +mod_wsgibecause it\u2019s very easy\nto setup and has a simple way to reload applications without root\naccess.Creating the first Fabfile\n\u00b6A fabfile is what controls what Fabric executes.It is namedfabfile.pyand executed by thefabcommand.All the functions defined in that file\nwill show up asfabsubcommands.They are executed on one or more\nhosts.These hosts can be defined either in the fabfile or on the command\nline.In this case we will add them to the fabfile.This is a basic first example that has the ability to upload the current\nsource code to the server and install it into a pre-existing\nvirtual environment:fromfabric.apiimport*# the user to use for the remote commandsenv\n.\nuser='appuser'# the servers where the commands are executedenv\n.\nhosts=[\n'server1.example.com'\n,'server2.example.com'\n]defpack\n():# build the packagelocal\n(\n'python setup.py sdist --formats=gztar'\n,capture\n=\nFalse\n)defdeploy\n():# figure out the package name and versiondist=local\n(\n'python setup.py --fullname'\n,capture\n=\nTrue\n)\n.\nstrip\n()filename='\n%s\n.tar.gz'%dist# upload the package to the temporary folder on the serverput\n(\n'dist/\n%s\n'%filename\n,'/tmp/\n%s\n'%filename\n)# install the package in the application's virtualenv with piprun\n(\n'/var/www/yourapplication/env/bin/pip install /tmp/\n%s\n'%filename\n)# remove the uploaded packagerun\n(\n'rm -r /tmp/\n%s\n'%filename\n)# touch the .wsgi file to trigger a reload in mod_wsgirun\n(\n'touch /var/www/yourapplication.wsgi'\n)Running Fabfiles\n\u00b6Now how do you execute that fabfile?You use thefabcommand.To\ndeploy the current version of the code on the remote server you would use\nthis command:$ fab pack deployHowever this requires that our server already has the/var/www/yourapplicationfolder created and/var/www/yourapplication/envto be a virtual environment.Furthermore\nare we not creating the configuration or.wsgifile on the server.So\nhow do we bootstrap a new server into our infrastructure?This now depends on the number of servers we want to set up.If we just\nhave one application server (which the majority of applications will\nhave), creating a command in the fabfile for this is overkill.But\nobviously you can do that.In that case you would probably call itsetuporbootstrapand then pass the servername explicitly on the\ncommand line:$ fab -H newserver.example.com bootstrapTo setup a new server you would roughly do these steps:Create the directory structure in/var/www\n:$ mkdir /var/www/yourapplication\n$ cd /var/www/yourapplication\n$ virtualenv --distribute envUpload a newapplication.wsgifile to the server and the\nconfiguration file for the application (eg:application.cfg\n)Create a new Apache config foryourapplicationand activate it.\nMake sure to activate watching for changes of the.wsgifile so\nthat we can automatically reload the application by touching it.\n(Seemod_wsgi (Apache)for more information)So now the question is, where do theapplication.wsgiandapplication.cfgfiles come from?The WSGI File\n\u00b6The WSGI file has to import the application and also to set an environment\nvariable so that the application knows where to look for the config.This\nis a short example that does exactly that:importosos\n.\nenviron\n[\n'YOURAPPLICATION_CONFIG'\n]='/var/www/yourapplication/application.cfg'fromyourapplicationimportappThe application itself then has to initialize itself like this to look for\nthe config at that environment variable:app=Flask\n(\n__name__\n)app\n.\nconfig\n.\nfrom_object\n(\n'yourapplication.default_config'\n)app\n.\nconfig\n.\nfrom_envvar\n(\n'YOURAPPLICATION_CONFIG'\n)This approach is explained in detail in theConfiguration Handlingsection of the\ndocumentation.The Configuration File\n\u00b6Now as mentioned above, the application will find the correct\nconfiguration file by looking up theYOURAPPLICATION_CONFIGenvironment\nvariable.So we have to put the configuration in a place where the\napplication will able to find it.Configuration files have the unfriendly\nquality of being different on all computers, so you do not version them\nusually.A popular approach is to store configuration files for different servers\nin a separate version control repository and check them out on all\nservers.Then symlink the file that is active for the server into the\nlocation where it\u2019s expected (eg:/var/www/yourapplication\n).Either way, in our case here we only expect one or two servers and we can\nupload them ahead of time by hand.First Deployment\n\u00b6Now we can do our first deployment.We have set up the servers so that\nthey have their virtual environments and activated apache configs.Now we\ncan pack up the application and deploy it:$ fab pack deployFabric will now connect to all servers and run the commands as written\ndown in the fabfile.First it will execute pack so that we have our\ntarball ready and then it will execute deploy and upload the source code\nto all servers and install it there.Thanks to thesetup.pyfile we\nwill automatically pull in the required libraries into our virtual\nenvironment.Next Steps\n\u00b6From that point onwards there is so much that can be done to make\ndeployment actually fun:Create abootstrapcommand that initializes new servers.It could\ninitialize a new virtual environment, setup apache appropriately etc.Put configuration files into a separate version control repository\nand symlink the active configs into place.You could also put your application code into a repository and check\nout the latest version on the server and then install.That way you\ncan also easily go back to older versions.hook in testing functionality so that you can deploy to an external\nserver and run the test suite.Working with Fabric is fun and you will notice that it\u2019s quite magical to\ntypefabdeployand see your application being deployed automatically\nto one or more remote servers.ContentsDeploying with FabricCreating the first FabfileRunning FabfilesThe WSGI FileThe Configuration FileFirst DeploymentNext StepsNavigationOverviewPatterns for FlaskPrevious:Deploying with SetuptoolsNext:Using SQLite 3 with FlaskVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/fabric/"},
{"text": "Using URL Processors \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbUsing URL Processors\n\u00b6ChangelogNew in version 0.7.Flask 0.7 introduces the concept of URL processors.The idea is that you\nmight have a bunch of resources with common parts in the URL that you\ndon\u2019t always explicitly want to provide.For instance you might have a\nbunch of URLs that have the language code in it but you don\u2019t want to have\nto handle it in every single function yourself.URL processors are especially helpful when combined with blueprints.We\nwill handle both application specific URL processors here as well as\nblueprint specifics.Internationalized Application URLs\n\u00b6Consider an application like this:fromflaskimportFlask\n,gapp=Flask\n(\n__name__\n)@app\n.\nroute\n(\n'/<lang_code>/'\n)defindex\n(\nlang_code\n):g\n.\nlang_code=lang_code...@app\n.\nroute\n(\n'/<lang_code>/about'\n)defabout\n(\nlang_code\n):g\n.\nlang_code=lang_code...This is an awful lot of repetition as you have to handle the language code\nsetting on thegobject yourself in every single function.\nSure, a decorator could be used to simplify this, but if you want to\ngenerate URLs from one function to another you would have to still provide\nthe language code explicitly which can be annoying.For the latter, this is whereurl_defaults()functions\ncome in.They can automatically inject values into a call forurl_for()automatically.The code below checks if the\nlanguage code is not yet in the dictionary of URL values and if the\nendpoint wants a value named'lang_code'\n:@app\n.\nurl_defaultsdefadd_language_code\n(\nendpoint\n,values\n):if'lang_code'invaluesornotg\n.\nlang_code\n:returnifapp\n.\nurl_map\n.\nis_endpoint_expecting\n(\nendpoint\n,'lang_code'\n):values\n[\n'lang_code'\n]=g\n.\nlang_codeThe methodis_endpoint_expecting()of the URL\nmap can be used to figure out if it would make sense to provide a language\ncode for the given endpoint.The reverse of that function areurl_value_preprocessor()\ns.They are executed right\nafter the request was matched and can execute code based on the URL\nvalues.The idea is that they pull information out of the values\ndictionary and put it somewhere else:@app\n.\nurl_value_preprocessordefpull_lang_code\n(\nendpoint\n,values\n):g\n.\nlang_code=values\n.\npop\n(\n'lang_code'\n,None\n)That way you no longer have to do thelang_codeassignment togin every function.You can further improve that by\nwriting your own decorator that prefixes URLs with the language code, but\nthe more beautiful solution is using a blueprint.Once the'lang_code'is popped from the values dictionary and it will no longer\nbe forwarded to the view function reducing the code to this:fromflaskimportFlask\n,gapp=Flask\n(\n__name__\n)@app\n.\nurl_defaultsdefadd_language_code\n(\nendpoint\n,values\n):if'lang_code'invaluesornotg\n.\nlang_code\n:returnifapp\n.\nurl_map\n.\nis_endpoint_expecting\n(\nendpoint\n,'lang_code'\n):values\n[\n'lang_code'\n]=g\n.\nlang_code@app\n.\nurl_value_preprocessordefpull_lang_code\n(\nendpoint\n,values\n):g\n.\nlang_code=values\n.\npop\n(\n'lang_code'\n,None\n)@app\n.\nroute\n(\n'/<lang_code>/'\n)defindex\n():...@app\n.\nroute\n(\n'/<lang_code>/about'\n)defabout\n():...Internationalized Blueprint URLs\n\u00b6Because blueprints can automatically prefix all URLs with a common string\nit\u2019s easy to automatically do that for every function.Furthermore\nblueprints can have per-blueprint URL processors which removes a whole lot\nof logic from theurl_defaults()function because it no\nlonger has to check if the URL is really interested in a'lang_code'parameter:fromflaskimportBlueprint\n,gbp=Blueprint\n(\n'frontend'\n,__name__\n,url_prefix\n=\n'/<lang_code>'\n)@bp\n.\nurl_defaultsdefadd_language_code\n(\nendpoint\n,values\n):values\n.\nsetdefault\n(\n'lang_code'\n,g\n.\nlang_code\n)@bp\n.\nurl_value_preprocessordefpull_lang_code\n(\nendpoint\n,values\n):g\n.\nlang_code=values\n.\npop\n(\n'lang_code'\n)@bp\n.\nroute\n(\n'/'\n)defindex\n():...@bp\n.\nroute\n(\n'/about'\n)defabout\n():...ContentsUsing URL ProcessorsInternationalized Application URLsInternationalized Blueprint URLsNavigationOverviewPatterns for FlaskPrevious:Implementing API ExceptionsNext:Deploying with SetuptoolsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/urlprocessors/"},
{"text": "Development Server \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbDevelopment Server\n\u00b6Starting with Flask 0.11 there are multiple built-in ways to run a\ndevelopment server.The best one is theflaskcommand line utility\nbut you can also continue using theFlask.run()method.Command Line\n\u00b6Theflaskcommand line script (\nCommand Line Interface\n) is strongly\nrecommended for development because it provides a superior reload\nexperience due to how it loads the application.The basic usage is like\nthis:$ export FLASK_APP=my_application\n$ export FLASK_ENV=development\n$ flask runThis enables the development environment, including the interactive\ndebugger and reloader, and then starts the server onhttp://localhost:5000/\n.The individual features of the server can be controlled by passing more\narguments to therunoption. For instance the reloader can be\ndisabled:$ flask run --no-reloadNotePrior to Flask 1.0 theFLASK_ENVenvironment variable was\nnot supported and you needed to enable debug mode by exportingFLASK_DEBUG=1\n. This can still be used to control debug mode, but\nyou should prefer setting the development environment as shown\nabove.In Code\n\u00b6The alternative way to start the application is through theFlask.run()method.This will immediately launch a local server\nexactly the same way theflaskscript does.Example:if__name__=='__main__'\n:app\n.\nrun\n()This works well for the common case but it does not work well for\ndevelopment which is why from Flask 0.11 onwards theflaskmethod is recommended.The reason for this is that due to how the reload\nmechanism works there are some bizarre side-effects (like executing\ncertain code twice, sometimes crashing without message or dying when a\nsyntax or import error happens).It is however still a perfectly valid method for invoking a non automatic\nreloading application.ContentsDevelopment ServerCommand LineIn CodeNavigationOverviewPrevious:Command Line InterfaceNext:Working with the ShellVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/server/"},
{"text": "Working with the Shell \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbWorking with the Shell\n\u00b6ChangelogNew in version 0.3.One of the reasons everybody loves Python is the interactive shell.It\nbasically allows you to execute Python commands in real time and\nimmediately get results back.Flask itself does not come with an\ninteractive shell, because it does not require any specific setup upfront,\njust import your application and start playing around.There are however some handy helpers to make playing around in the shell a\nmore pleasant experience.The main issue with interactive console\nsessions is that you\u2019re not triggering a request like a browser does which\nmeans thatg\n,requestand others are not\navailable.But the code you want to test might depend on them, so what\ncan you do?This is where some helper functions come in handy.Keep in mind however\nthat these functions are not only there for interactive shell usage, but\nalso for unittesting and other situations that require a faked request\ncontext.Generally it\u2019s recommended that you read theThe Request Contextchapter of the documentation first.Command Line Interface\n\u00b6Starting with Flask 0.11 the recommended way to work with the shell is theflaskshellcommand which does a lot of this automatically for you.\nFor instance the shell is automatically initialized with a loaded\napplication context.For more information seeCommand Line Interface\n.Creating a Request Context\n\u00b6The easiest way to create a proper request context from the shell is by\nusing thetest_request_contextmethod which creates\nus aRequestContext\n:>>>ctx=app\n.\ntest_request_context\n()Normally you would use thewithstatement to make this request object\nactive, but in the shell it\u2019s easier to use thepush()andpop()methods by hand:>>>ctx\n.\npush\n()From that point onwards you can work with the request object until you\ncallpop\n:>>>ctx\n.\npop\n()Firing Before/After Request\n\u00b6By just creating a request context, you still don\u2019t have run the code that\nis normally run before a request.This might result in your database\nbeing unavailable if you are connecting to the database in a\nbefore-request callback or the current user not being stored on thegobject etc.This however can easily be done yourself.Just callpreprocess_request()\n:>>>ctx=app\n.\ntest_request_context\n()>>>ctx\n.\npush\n()>>>app\n.\npreprocess_request\n()Keep in mind that thepreprocess_request()function\nmight return a response object, in that case just ignore it.To shutdown a request, you need to trick a bit before the after request\nfunctions (triggered byprocess_response()\n) operate on\na response object:>>>app\n.\nprocess_response\n(\napp\n.\nresponse_class\n())<Response 0 bytes [200 OK]>>>>ctx\n.\npop\n()The functions registered asteardown_request()are\nautomatically called when the context is popped.So this is the perfect\nplace to automatically tear down resources that were needed by the request\ncontext (such as database connections).Further Improving the Shell Experience\n\u00b6If you like the idea of experimenting in a shell, create yourself a module\nwith stuff you want to star import into your interactive session.There\nyou could also define some more helper methods for common things such as\ninitializing the database, dropping tables etc.Just put them into a module (likeshelltools\n) and import from there:>>>fromshelltoolsimport*ContentsWorking with the ShellCommand Line InterfaceCreating a Request ContextFiring Before/After RequestFurther Improving the Shell ExperienceNavigationOverviewPrevious:Development ServerNext:Patterns for FlaskVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/shell/"},
{"text": "CGI \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbDeployment Options\u00bbCGI\n\u00b6If all other deployment methods do not work, CGI will work for sure.\nCGI is supported by all major servers but usually has a sub-optimal\nperformance.This is also the way you can use a Flask application on Google\u2019sApp\nEngine\n, where execution happens in a CGI-like environment.Watch OutPlease make sure in advance that anyapp.run()calls you might\nhave in your application file are inside anif__name__=='__main__':block or moved to a separate file.Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to CGI / app engine.With CGI, you will also have to make sure that your code does not contain\nanyprintstatements, or thatsys.stdoutis overridden by something\nthat doesn\u2019t write into the HTTP response.Creating a.cgifile\n\u00b6First you need to create the CGI application file.Let\u2019s call ityourapplication.cgi\n:#!/usr/bin/pythonfromwsgiref.handlersimportCGIHandlerfromyourapplicationimportappCGIHandler\n()\n.\nrun\n(\napp\n)Server Setup\n\u00b6Usually there are two ways to configure the server.Either just copy the.cgiinto acgi-bin(and usemod_rewriteor something similar to\nrewrite the URL) or let the server point to the file directly.In Apache for example you can put something like this into the config:ScriptAlias/app/path/to/the/application.cgiOn shared webhosting, though, you might not have access to your Apache config.\nIn this case, a file called.htaccess\n, sitting in the public directory you want\nyour app to be available, works too but theScriptAliasdirective won\u2019t\nwork in that case:RewriteEngineOnRewriteCond%{REQUEST_FILENAME} !-f # Don't interfere with static filesRewriteRule^(.*)$/path/to/the/application.cgi/\n$1 [L]For more information consult the documentation of your webserver.ContentsCGICreating a.cgifileServer SetupNavigationOverviewDeployment OptionsPrevious:FastCGINext:Becoming BigVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/deploying/cgi/"},
{"text": "Command Line Interface \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbCommand Line Interface\n\u00b6Installing Flask installs theflaskscript, aClickcommand line\ninterface, in your virtualenv. Executed from the terminal, this script gives\naccess to built-in, extension, and application-defined commands. The--helpoption will give more information about any commands and options.Application Discovery\n\u00b6Theflaskcommand is installed by Flask, not your application; it must be\ntold where to find your application in order to use it. TheFLASK_APPenvironment variable is used to specify how to load the application.Unix Bash (Linux, Mac, etc.):$ export FLASK_APP=hello\n$ flask runWindows CMD:>setFLASK_APP\n=\nhello>flaskrunWindows PowerShell:> $env:FLASK_APP = \"hello\"\n> flask runWhileFLASK_APPsupports a variety of options for specifying your\napplication, most use cases should be simple. Here are the typical values:(nothing)The filewsgi.pyis imported, automatically detecting an app\n(\napp\n). This provides an easy way to create an app from a factory with\nextra arguments.FLASK_APP=helloThe name is imported, automatically detecting an app (\napp\n) or factory\n(\ncreate_app\n).FLASK_APPhas three parts: an optional path that sets the current working\ndirectory, a Python file or dotted import path, and an optional variable\nname of the instance or factory. If the name is a factory, it can optionally\nbe followed by arguments in parentheses. The following values demonstrate these\nparts:FLASK_APP=src/helloSets the current working directory tosrcthen importshello\n.FLASK_APP=hello.webImports the pathhello.web\n.FLASK_APP=hello:app2Uses theapp2Flask instance inhello\n.FLASK_APP=\"hello:create_app('dev')\"Thecreate_appfactory inhellois called with the string'dev'as the argument.IfFLASK_APPis not set, the command will look for a file calledwsgi.pyorapp.pyand try to detect an application instance or\nfactory.Within the given import, the command looks for an application instance namedapporapplication\n, then any application instance. If no instance is\nfound, the command looks for a factory function namedcreate_appormake_appthat returns an instance.When calling an application factory, if the factory takes an argument namedinfo\n, then theScriptInfoinstance is passed as a keyword\nargument. If parentheses follow the factory name, their contents are parsed\nas Python literals and passes as arguments to the function. This means that\nstrings must still be in quotes.Run the Development Server\n\u00b6Theruncommand will start the development server. It\nreplaces theFlask.run()method in most cases.$ flask run* Serving Flask app \"hello\"* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)WarningDo not use this command to run your application in production.\nOnly use the development server during development. The development server\nis provided for convenience, but is not designed to be particularly secure,\nstable, or efficient. SeeDeployment Optionsfor how to run in production.Open a Shell\n\u00b6To explore the data in your application, you can start an interactive Python\nshell with theshellcommand. An application\ncontext will be active, and the app instance will be imported.$ flask shell\nPython 3.6.2 (default, Jul 20 2017, 03:52:27)\n[GCC 7.1.1 20170630] on linux\nApp: example\nInstance: /home/user/Projects/hello/instance\n>>>Useshell_context_processor()to add other automatic imports.Environments\n\u00b6New in version 1.0.Changelog\nThe environment in which the Flask app runs is set by theFLASK_ENVenvironment variable. If not set it defaults toproduction\n. The other recognized environment isdevelopment\n.\nFlask and extensions may choose to enable behaviors based on the\nenvironment.If the env is set todevelopment\n, theflaskcommand will enable\ndebug mode andflaskrunwill enable the interactive debugger and\nreloader.$ FLASK_ENV=development flask run* Serving Flask app \"hello\"* Environment: development* Debug mode: on* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)* Restarting with inotify reloader* Debugger is active!* Debugger PIN: 223-456-919Debug Mode\n\u00b6Debug mode will be enabled whenFLASK_ENVisdevelopment\n,\nas described above. If you want to control debug mode separately, useFLASK_DEBUG\n. The value1enables it,0disables it.Environment Variables From dotenv\n\u00b6Rather than settingFLASK_APPeach time you open a new terminal, you can\nuse Flask\u2019s dotenv support to set environment variables automatically.Ifpython-dotenvis installed, running theflaskcommand will set\nenvironment variables defined in the files.envand.flaskenv\n.\nThis can be used to avoid having to setFLASK_APPmanually every time you\nopen a new terminal, and to set configuration using environment variables\nsimilar to how some deployment services work.Variables set on the command line are used over those set in.env\n,\nwhich are used over those set in.flaskenv\n..flaskenvshould be\nused for public variables, such asFLASK_APP\n, while.envshould not\nbe committed to your repository so that it can set private variables.Directories are scanned upwards from the directory you callflaskfrom to locate the files. The current working directory will be set to the\nlocation of the file, with the assumption that that is the top level project\ndirectory.The files are only loaded by theflaskcommand or callingrun()\n. If you would like to load these files when running in\nproduction, you should callload_dotenv()manually.Setting Command Options\n\u00b6Click is configured to load default values for command options from\nenvironment variables. The variables use the patternFLASK_COMMAND_OPTION\n. For example, to set the port for the run\ncommand, instead offlaskrun--port8000\n:export FLASK_RUN_PORT=8000\nflask run* Running on http://127.0.0.1:8000/These can be added to the.flaskenvfile just likeFLASK_APPto\ncontrol default command options.Disable dotenv\n\u00b6Theflaskcommand will show a message if it detects dotenv files but\npython-dotenv is not installed.flask run* Tip: There are .env files present. Do \"pip install python-dotenv\" to use them.You can tell Flask not to load dotenv files even when python-dotenv is\ninstalled by setting theFLASK_SKIP_DOTENVenvironment variable.\nThis can be useful if you want to load them manually, or if you\u2019re using\na project runner that loads them already. Keep in mind that the\nenvironment variables must be set before the app loads or it won\u2019t\nconfigure as expected.export FLASK_SKIP_DOTENV=1\nflask runEnvironment Variables From virtualenv\n\u00b6If you do not want to install dotenv support, you can still set environment\nvariables by adding them to the end of the virtualenv\u2019sactivatescript. Activating the virtualenv will set the variables.Unix Bash,venv/bin/activate\n:exportFLASK_APP\n=\nhelloWindows CMD,venv\\Scripts\\activate.bat\n:setFLASK_APP\n=\nhelloIt is preferred to use dotenv support over this, since.flaskenvcan be\ncommitted to the repository so that it works automatically wherever the project\nis checked out.Custom Commands\n\u00b6Theflaskcommand is implemented usingClick\n. See that project\u2019s\ndocumentation for full information about writing commands.This example adds the commandcreate_userthat takes the argumentname\n.importclickfromflaskimportFlaskapp=Flask\n(\n__name__\n)@app\n.\ncli\n.\ncommand\n()@click\n.\nargument\n(\n'name'\n)defcreate_user\n(\nname\n):...flaskcreate_useradminThis example adds the same command, but asusercreate\n, a command in a\ngroup. This is useful if you want to organize multiple related commands.importclickfromflaskimportFlaskfromflask.cliimportAppGroupapp=Flask\n(\n__name__\n)user_cli=AppGroup\n(\n'user'\n)@user_cli\n.\ncommand\n(\n'create'\n)@click\n.\nargument\n(\n'name'\n)defcreate_user\n(\nname\n):...app\n.\ncli\n.\nadd_command\n(\nuser_cli\n)flaskusercreatedemoSeeTesting CLI Commandsfor an overview of how to test your custom\ncommands.Application Context\n\u00b6Commands added using the Flask app\u2019sclicommand()decorator will be executed with an application\ncontext pushed, so your command and extensions have access to the app and its\nconfiguration. If you create a command using the Clickcommand()decorator instead of the Flask decorator, you can usewith_appcontext()to get the same behavior.importclickfromflask.cliimportwith_appcontext@click\n.\ncommand@with_appcontextdefdo_work\n():...app\n.\ncli\n.\nadd_command\n(\ndo_work\n)If you\u2019re sure a command doesn\u2019t need the context, you can disable it:@app\n.\ncli\n.\ncommand\n(\nwith_appcontext\n=\nFalse\n)defdo_work\n():...Plugins\n\u00b6Flask will automatically load commands specified in theflask.commandsentry point\n. This is useful for extensions that want to add commands when\nthey are installed. Entry points are specified insetup.pyfromsetuptoolsimportsetupsetup\n(name\n=\n'flask-my-extension'\n,...\n,entry_points\n=\n{'flask.commands'\n:['my-command=flask_my_extension.commands:cli'],},)Insideflask_my_extension/commands.pyyou can then export a Click\nobject:importclick@click\n.\ncommand\n()defcli\n():...Once that package is installed in the same virtualenv as your Flask project,\nyou can runflaskmy-commandto invoke the command.Custom Scripts\n\u00b6When you are using the app factory pattern, it may be more convenient to define\nyour own Click script. Instead of usingFLASK_APPand letting Flask load\nyour application, you can create your own Click object and export it as aconsole scriptentry point.Create an instance ofFlaskGroupand pass it the factory:importclickfromflaskimportFlaskfromflask.cliimportFlaskGroupdefcreate_app\n():app=Flask\n(\n'wiki'\n)# other setupreturnapp@click\n.\ngroup\n(\ncls\n=\nFlaskGroup\n,create_app\n=\ncreate_app\n)defcli\n():\"\"\"Management script for the Wiki application.\"\"\"Define the entry point insetup.py\n:fromsetuptoolsimportsetupsetup\n(name\n=\n'flask-my-extension'\n,...\n,entry_points\n=\n{'console_scripts'\n:['wiki=wiki:cli'],},)Install the application in the virtualenv in editable mode and the custom\nscript is available. Note that you don\u2019t need to setFLASK_APP\n.$ pip install -e .\n$ wiki runErrors in Custom ScriptsWhen using a custom script, if you introduce an error in your\nmodule-level code, the reloader will fail because it can no longer\nload the entry point.Theflaskcommand, being separate from your code, does not have\nthis issue and is recommended in most cases.PyCharm Integration\n\u00b6Prior to PyCharm 2018.1, the Flask CLI features weren\u2019t yet fully\nintegrated into PyCharm. We have to do a few tweaks to get them working\nsmoothly. These instructions should be similar for any other IDE you\nmight want to use.In PyCharm, with your project open, click onRunfrom the menu bar and\ngo toEdit Configurations\n. You\u2019ll be greeted by a screen similar to\nthis:There\u2019s quite a few options to change, but once we\u2019ve done it for one\ncommand, we can easily copy the entire configuration and make a single\ntweak to give us access to other commands, including any custom ones you\nmay implement yourself.Click the + (\nAdd New Configuration\n) button and selectPython\n. Give\nthe configuration a good descriptive name such as \u201cRun Flask Server\u201d.\nFor theflaskruncommand, check \u201cSingle instance only\u201d since you\ncan\u2019t run the server more than once at the same time.SelectModule namefrom the dropdown (\nA\n) then inputflask\n.TheParametersfield (\nB\n) is set to the CLI command to execute\n(with any arguments). In this example we userun\n, which will run\nthe development server.You can skip this next step if you\u2019re usingEnvironment Variables From dotenv\n. We need to\nadd an environment variable (\nC\n) to identify our application. Click\non the browse button and add an entry withFLASK_APPon the left and\nthe Python import or file on the right (\nhellofor example).Next we need to set the working directory (\nD\n) to be the folder where\nour application resides.If you have installed your project as a package in your virtualenv, you\nmay untick thePYTHONPATHoptions (\nE\n). This will more accurately\nmatch how you deploy the app later.ClickApplyto save the configuration, orOKto save and close the\nwindow. Select the configuration in the main PyCharm window and click\nthe play button next to it to run the server.Now that we have a configuration which runsflaskrunfrom within\nPyCharm, we can copy that configuration and alter theScriptargument\nto run a different CLI command, e.g.flaskshell\n.ContentsCommand Line InterfaceApplication DiscoveryRun the Development ServerOpen a ShellEnvironmentsDebug ModeEnvironment Variables From dotenvSetting Command OptionsDisable dotenvEnvironment Variables From virtualenvCustom CommandsApplication ContextPluginsCustom ScriptsPyCharm IntegrationNavigationOverviewPrevious:ExtensionsNext:Development ServerVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/cli/"},
{"text": "Larger Applications \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbLarger Applications\n\u00b6For larger applications it\u2019s a good idea to use a package instead of a\nmodule.That is quite simple.Imagine a small application looks like\nthis:/\nyourapplicationyourapplication\n.\npy/\nstaticstyle\n.\ncss/\ntemplateslayout\n.\nhtmlindex\n.\nhtmllogin\n.\nhtml...Thetutorialis structured this way, see theexample code\n.Simple Packages\n\u00b6To convert that into a larger one, just create a new folderyourapplicationinside the existing one and move everything below it.\nThen renameyourapplication.pyto__init__.py\n.(Make sure to delete\nall.pycfiles first, otherwise things would most likely break)You should then end up with something like that:/\nyourapplication/\nyourapplication__init__\n.\npy/\nstaticstyle\n.\ncss/\ntemplateslayout\n.\nhtmlindex\n.\nhtmllogin\n.\nhtml...But how do you run your application now?The naivepythonyourapplication/__init__.pywill not work.Let\u2019s just say that Python\ndoes not want modules in packages to be the startup file.But that is not\na big problem, just add a new file calledsetup.pynext to the inneryourapplicationfolder with the following contents:fromsetuptoolsimportsetupsetup\n(name\n=\n'yourapplication'\n,packages\n=\n[\n'yourapplication'\n],include_package_data\n=\nTrue\n,install_requires\n=\n['flask'\n,],)In order to run the application you need to export an environment variable\nthat tells Flask where to find the application instance:exportFLASK_APP\n=\nyourapplicationIf you are outside of the project directory make sure to provide the exact\npath to your application directory. Similarly you can turn on the\ndevelopment features like this:exportFLASK_ENV\n=\ndevelopmentIn order to install and run the application you need to issue the following\ncommands:pipinstall-\ne.flaskrunWhat did we gain from this?Now we can restructure the application a bit\ninto multiple modules.The only thing you have to remember is the\nfollowing quick checklist:theFlaskapplication object creation has to be in the__init__.pyfile.That way each module can import it safely and the__name__variable will resolve to the correct package.all the view functions (the ones with aroute()decorator on top) have to be imported in the__init__.pyfile.\nNot the object itself, but the module it is in. Import the view moduleafter the application object is created\n.Here\u2019s an example__init__.py\n:fromflaskimportFlaskapp=Flask\n(\n__name__\n)importyourapplication.viewsAnd this is whatviews.pywould look like:fromyourapplicationimportapp@app\n.\nroute\n(\n'/'\n)defindex\n():return'Hello World!'You should then end up with something like that:/\nyourapplicationsetup\n.\npy/\nyourapplication__init__\n.\npyviews\n.\npy/\nstaticstyle\n.\ncss/\ntemplateslayout\n.\nhtmlindex\n.\nhtmllogin\n.\nhtml...Circular ImportsEvery Python programmer hates them, and yet we just added some:\ncircular imports (That\u2019s when two modules depend on each other.In this\ncaseviews.pydepends on__init__.py\n).Be advised that this is a\nbad idea in general but here it is actually fine.The reason for this is\nthat we are not actually using the views in__init__.pyand just\nensuring the module is imported and we are doing that at the bottom of\nthe file.There are still some problems with that approach but if you want to use\ndecorators there is no way around that.Check out theBecoming Bigsection for some inspiration how to deal with that.Working with Blueprints\n\u00b6If you have larger applications it\u2019s recommended to divide them into\nsmaller groups where each group is implemented with the help of a\nblueprint.For a gentle introduction into this topic refer to theModular Applications with Blueprintschapter of the documentation.ContentsLarger ApplicationsSimple PackagesWorking with BlueprintsNavigationOverviewPatterns for FlaskPrevious:Patterns for FlaskNext:Application FactoriesVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/packages/"},
{"text": "Deploying with Setuptools \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbDeploying with Setuptools\n\u00b6Setuptools\n, is an extension library that is commonly used to\ndistribute Python libraries and extensions. It extends distutils, a basic\nmodule installation system shipped with Python to also support various more\ncomplex constructs that make larger applications easier to distribute:support for dependencies\n: a library or application can declare a\nlist of other libraries it depends on which will be installed\nautomatically for you.package registry\n: setuptools registers your package with your\nPython installation.This makes it possible to query information\nprovided by one package from another package.The best known feature of\nthis system is the entry point support which allows one package to\ndeclare an \u201centry point\u201d that another package can hook into to extend the\nother package.installation manager\n:pipcan install other libraries for you.If you have Python 2 (>=2.7.9) or Python 3 (>=3.4) installed from python.org,\nyou will already have pip and setuptools on your system.Otherwise, you\nwill need to install them yourself.Flask itself, and all the libraries you can find on PyPI are distributed with\neither setuptools or distutils.In this case we assume your application is calledyourapplication.pyand you are not using a module, but apackage\n. If you have not yet converted your application into\na package, head over to theLarger Applicationspattern to see\nhow this can be done.A working deployment with setuptools is the first step into more complex\nand more automated deployment scenarios.If you want to fully automate\nthe process, also read theDeploying with Fabricchapter.Basic Setup Script\n\u00b6Because you have Flask installed, you have setuptools available on your system.\nFlask already depends upon setuptools.Standard disclaimer applies:you better use a virtualenv\n.Your setup code always goes into a file namedsetup.pynext to your\napplication.The name of the file is only convention, but because\neverybody will look for a file with that name, you better not change it.A basicsetup.pyfile for a Flask application looks like this:fromsetuptoolsimportsetupsetup\n(name\n=\n'Your Application'\n,version\n=\n'1.0'\n,long_description\n=\n__doc__\n,packages\n=\n[\n'yourapplication'\n],include_package_data\n=\nTrue\n,zip_safe\n=\nFalse\n,install_requires\n=\n[\n'Flask'\n])Please keep in mind that you have to list subpackages explicitly.If you\nwant setuptools to lookup the packages for you automatically, you can use\nthefind_packagesfunction:fromsetuptoolsimportsetup\n,find_packagessetup\n(...packages\n=\nfind_packages\n())Most parameters to thesetupfunction should be self explanatory,include_package_dataandzip_safemight not be.include_package_datatells setuptools to look for aMANIFEST.infile\nand install all the entries that match as package data.We will use this\nto distribute the static files and templates along with the Python module\n(seeDistributing Resources\n).Thezip_safeflag can be used to\nforce or prevent zip Archive creation.In general you probably don\u2019t want\nyour packages to be installed as zip files because some tools do not\nsupport them and they make debugging a lot harder.Tagging Builds\n\u00b6It is useful to distinguish between release and development builds. Add asetup.cfgfile to configure these options.[\negg_info\n]tag_build=.\ndevtag_date=1[\naliases\n]release=egg_info-\nDb''Runningpythonsetup.pysdistwill create a development package\nwith \u201c.dev\u201d and the current date appended:flaskr-1.0.dev20160314.tar.gz\n.\nRunningpythonsetup.pyreleasesdistwill create a release package\nwith only the version:flaskr-1.0.tar.gz\n.Distributing Resources\n\u00b6If you try to install the package you just created, you will notice that\nfolders likestaticortemplatesare not installed for you.The\nreason for this is that setuptools does not know which files to add for\nyou.What you should do, is to create aMANIFEST.infile next to yoursetup.pyfile.This file lists all the files that should be added to\nyour tarball:recursive\n-\nincludeyourapplication\n/\ntemplates*recursive\n-\nincludeyourapplication\n/\nstatic*Don\u2019t forget that even if you enlist them in yourMANIFEST.infile, they\nwon\u2019t be installed for you unless you set theinclude_package_dataparameter of thesetupfunction toTrue\n!Declaring Dependencies\n\u00b6Dependencies are declared in theinstall_requiresparameter as a list.\nEach item in that list is the name of a package that should be pulled from\nPyPI on installation.By default it will always use the most recent\nversion, but you can also provide minimum and maximum version\nrequirements.Here some examples:install_requires\n=\n['Flask>=0.2'\n,'SQLAlchemy>=0.6'\n,'BrokenPackage>=0.7,<=1.0']As mentioned earlier, dependencies are pulled from PyPI.What if you\nwant to depend on a package that cannot be found on PyPI and won\u2019t be\nbecause it is an internal package you don\u2019t want to share with anyone?\nJust do it as if there was a PyPI entry and provide a list of\nalternative locations where setuptools should look for tarballs:dependency_links\n=\n[\n'http://example.com/yourfiles'\n]Make sure that page has a directory listing and the links on the page are\npointing to the actual tarballs with their correct filenames as this is\nhow setuptools will find the files.If you have an internal company\nserver that contains the packages, provide the URL to that server.Installing / Developing\n\u00b6To install your application (ideally into a virtualenv) just run thesetup.pyscript with theinstallparameter.It will install your\napplication into the virtualenv\u2019s site-packages folder and also download\nand install all dependencies:$ python setup.py installIf you are developing on the package and also want the requirements to be\ninstalled, you can use thedevelopcommand instead:$ python setup.py developThis has the advantage of just installing a link to the site-packages\nfolder instead of copying the data over.You can then continue to work on\nthe code without having to runinstallagain after each change.ContentsDeploying with SetuptoolsBasic Setup ScriptTagging BuildsDistributing ResourcesDeclaring DependenciesInstalling / DevelopingNavigationOverviewPatterns for FlaskPrevious:Using URL ProcessorsNext:Deploying with FabricVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/distribute/"},
{"text": "Standalone WSGI Containers \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbDeployment Options\u00bbStandalone WSGI Containers\n\u00b6There are popular servers written in Python that contain WSGI applications and\nserve HTTP.These servers stand alone when they run; you can proxy to them\nfrom your web server.Note the section onProxy Setupsif you\nrun into issues.Gunicorn\n\u00b6Gunicorn\u2018Green Unicorn\u2019 is a WSGI HTTP Server for UNIX. It\u2019s a pre-fork\nworker model ported from Ruby\u2019s Unicorn project. It supports botheventletandgreenlet\n. Running a Flask application on this server is quite simple:gunicornmyproject\n:\nappGunicornprovides many command-line options \u2013 seegunicorn-h\n.\nFor example, to run a Flask application with 4 worker processes (\n-w4\n) binding to localhost port 4000 (\n-b127.0.0.1:4000\n):gunicorn-\nw4-\nb127.0\n.\n0.1\n:\n4000myproject\n:\nappuWSGI\n\u00b6uWSGIis a fast application server written in C. It is very configurable\nwhich makes it more complicated to setup than gunicorn.RunninguWSGI HTTP Router\n:uwsgi--\nhttp127.0\n.\n0.1\n:\n5000--\nmodulemyproject\n:\nappFor a more optimized setup, seeconfiguring uWSGI and NGINX\n.Gevent\n\u00b6Geventis a coroutine-based Python networking library that usesgreenletto provide a high-level synchronous API on top oflibevevent loop:fromgevent.wsgiimportWSGIServerfromyourapplicationimportapphttp_server=WSGIServer\n((\n''\n,5000\n),app\n)http_server\n.\nserve_forever\n()Twisted Web\n\u00b6Twisted Webis the web server shipped withTwisted\n, a mature,\nnon-blocking event-driven networking library. Twisted Web comes with a\nstandard WSGI container which can be controlled from the command line using\nthetwistdutility:twistdweb--\nwsgimyproject\n.\nappThis example will run a Flask application calledappfrom a module namedmyproject\n.Twisted Web supports many flags and options, and thetwistdutility does\nas well; seetwistd-handtwistdweb-hfor more information. For\nexample, to run a Twisted Web server in the foreground, on port 8080, with an\napplication frommyproject\n:twistd-\nnweb--\nporttcp\n:\n8080--\nwsgimyproject\n.\nappProxy Setups\n\u00b6If you deploy your application using one of these servers behind an HTTP proxy\nyou will need to rewrite a few headers in order for the application to work.\nThe two problematic values in the WSGI environment usually areREMOTE_ADDRandHTTP_HOST\n.You can configure your httpd to pass these headers, or you\ncan fix them in middleware.Werkzeug ships a fixer that will solve some common\nsetups, but you might want to write your own WSGI middleware for specific\nsetups.Here\u2019s a simple nginx configuration which proxies to an application served on\nlocalhost at port 8000, setting appropriate headers:server{listen80\n;server_name_\n;access_log/var/log/nginx/access.log\n;error_log/var/log/nginx/error.log\n;location/{proxy_passhttp://127.0.0.1:8000/\n;proxy_redirectoff\n;proxy_set_headerHost$host\n;proxy_set_headerX-Real-IP$remote_addr\n;proxy_set_headerX-Forwarded-For$proxy_add_x_forwarded_for\n;proxy_set_headerX-Forwarded-Proto$scheme\n;}}If your httpd is not providing these headers, the most common setup invokes the\nhost being set fromX-Forwarded-Hostand the remote address fromX-Forwarded-For\n:fromwerkzeug.contrib.fixersimportProxyFixapp\n.\nwsgi_app=ProxyFix\n(\napp\n.\nwsgi_app\n)Trusting HeadersPlease keep in mind that it is a security issue to use such a middleware in\na non-proxy setup because it will blindly trust the incoming headers which\nmight be forged by malicious clients.If you want to rewrite the headers from another header, you might want to\nuse a fixer like this:classCustomProxyFix\n(\nobject\n):def__init__\n(\nself\n,app\n):self\n.\napp=appdef__call__\n(\nself\n,environ\n,start_response\n):host=environ\n.\nget\n(\n'HTTP_X_FHOST'\n,''\n)ifhost\n:environ\n[\n'HTTP_HOST'\n]=hostreturnself\n.\napp\n(\nenviron\n,start_response\n)app\n.\nwsgi_app=CustomProxyFix\n(\napp\n.\nwsgi_app\n)ContentsStandalone WSGI ContainersGunicornuWSGIGeventTwisted WebProxy SetupsNavigationOverviewDeployment OptionsPrevious:Deployment OptionsNext:uWSGIVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/deploying/wsgi-standalone/"},
{"text": "Extensions \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbExtensions\n\u00b6Extensions are extra packages that add functionality to a Flask\napplication. For example, an extension might add support for sending\nemail or connecting to a database. Some extensions add entire new\nframeworks to help build certain types of applications, like a ReST API.Finding Extensions\n\u00b6Flask extensions are usually named \u201cFlask-Foo\u201d or \u201cFoo-Flask\u201d. Many\nextensions are listed in theExtension Registry\n, which can be updated\nby extension developers. You can also search PyPI for packages tagged\nwithFramework :: Flask\n.Using Extensions\n\u00b6Consult each extension\u2019s documentation for installation, configuration,\nand usage instructions. Generally, extensions pull their own\nconfiguration fromapp.configand are\npassed an application instance during initialization. For example,\nan extension caled \u201cFlask-Foo\u201d might be used like this:fromflask_fooimportFoofoo=Foo\n()app=Flask\n(\n__name__\n)app\n.\nconfig\n.\nupdate\n(FOO_BAR\n=\n'baz'\n,FOO_SPAM\n=\n'eggs'\n,)foo\n.\ninit_app\n(\napp\n)Building Extensions\n\u00b6While theExtension Registrycontains many Flask extensions, you may\nnot find an extension that fits your need. If this is the case, you can\ncreate your own. ReadFlask Extension Developmentto develop your own Flask\nextension.ContentsExtensionsFinding ExtensionsUsing ExtensionsBuilding ExtensionsNavigationOverviewPrevious:Modular Applications with BlueprintsNext:Command Line InterfaceVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/extensions/"},
{"text": "The Request Context \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbThe Request Context\n\u00b6The request context keeps track of the request-level data during a\nrequest. Rather than passing the request object to each function that\nruns during a request, therequestandsessionproxies\nare accessed instead.This is similar to theThe Application Context\n, which keeps track of the\napplication-level data independent of a request. A corresponding\napplication context is pushed when a request context is pushed.Purpose of the Context\n\u00b6When theFlaskapplication handles a request, it creates aRequestobject based on the environment it received from the\nWSGI server. Because aworker(thread, process, or coroutine depending\non the server) handles only one request at a time, the request data can\nbe considered global to that worker during that request. Flask uses the\ntermcontext localfor this.Flask automaticallypushesa request context when handling a request.\nView functions, error handlers, and other functions that run during a\nrequest will have access to therequestproxy, which points to\nthe request object for the current request.Lifetime of the Context\n\u00b6When a Flask application begins handling a request, it pushes a request\ncontext, which also pushes anThe Application Context\n. When the request ends\nit pops the request context then the application context.The context is unique to each thread (or other worker type).requestcannot be passed to another thread, the other thread\nwill have a different context stack and will not know about the request\nthe parent thread was pointing to.Context locals are implemented in Werkzeug. SeeContext Localsfor more information on how this works internally.Manually Push a Context\n\u00b6If you try to accessrequest\n, or anything that uses it, outside\na request context, you\u2019ll get this error message:RuntimeError: Working outside of request context.This typically means that you attempted to use functionality thatneeded an active HTTP request. Consult the documentation on testingfor information about how to avoid this problem.This should typically only happen when testing code that expects an\nactive request. One option is to use thetestclientto simulate a full request. Or\nyou can usetest_request_context()in awithblock, and\neverything that runs in the block will have access torequest\n,\npopulated with your test data.defgenerate_report\n(\nyear\n):format=request\n.\nargs\n.\nget\n(\n'format'\n)...withapp\n.\ntest_request_context\n('/make_report/2017'\n,data\n=\n{\n'format'\n:'short'\n}):generate_report\n()If you see that error somewhere else in your code not related to\ntesting, it most likely indicates that you should move that code into a\nview function.For information on how to use the request context from the interactive\nPython shell, seeWorking with the Shell\n.How the Context Works\n\u00b6TheFlask.wsgi_app()method is called to handle each request. It\nmanages the contexts during the request. Internally, the request and\napplication contexts work as stacks,_request_ctx_stackand_app_ctx_stack\n. When contexts are pushed onto the stack, the\nproxies that depend on them are available and point at information from\nthe top context on the stack.When the request starts, aRequestContextis created and\npushed, which creates and pushes anAppContextfirst if\na context for that application is not already the top context. While\nthese contexts are pushed, thecurrent_app\n,g\n,request\n, andsessionproxies are available to the\noriginal thread handling the request.Because the contexts are stacks, other contexts may be pushed to change\nthe proxies during a request. While this is not a common pattern, it\ncan be used in advanced applications to, for example, do internal\nredirects or chain different applications together.After the request is dispatched and a response is generated and sent,\nthe request context is popped, which then pops the application context.\nImmediately before they are popped, theteardown_request()andteardown_appcontext()functions are are executed. These\nexecute even if an unhandled exception occurred during dispatch.Callbacks and Errors\n\u00b6Flask dispatches a request in multiple stages which can affect the\nrequest, response, and how errors are handled. The contexts are active\nduring all of these stages.ABlueprintcan add handlers for these events that are specific\nto the blueprint. The handlers for a blueprint will run if the blueprint\nowns the route that matches the request.Before each request,before_request()functions are\ncalled. If one of these functions return a value, the other\nfunctions are skipped. The return value is treated as the response\nand the view function is not called.If thebefore_request()functions did not return a\nresponse, the view function for the matched route is called and\nreturns a response.The return value of the view is converted into an actual response\nobject and passed to theafter_request()functions. Each function returns a modified or new response object.After the response is returned, the contexts are popped, which calls\ntheteardown_request()andteardown_appcontext()functions. These functions are\ncalled even if an unhandled exception was raised at any point above.If an exception is raised before the teardown functions, Flask tries to\nmatch it with anerrorhandler()function to handle the\nexception and return a response. If no error handler is found, or the\nhandler itself raises an exception, Flask returns a generic500InternalServerErrorresponse. The teardown functions are still\ncalled, and are passed the exception object.If debug mode is enabled, unhandled exceptions are not converted to a500response and instead are propagated to the WSGI server. This\nallows the development server to present the interactive debugger with\nthe traceback.Teardown Callbacks\n\u00b6The teardown callbacks are independent of the request dispatch, and are\ninstead called by the contexts when they are popped. The functions are\ncalled even if there is an unhandled exception during dispatch, and for\nmanually pushed contexts. This means there is no guarantee that any\nother parts of the request dispatch have run first. Be sure to write\nthese functions in a way that does not depend on other callbacks and\nwill not fail.During testing, it can be useful to defer popping the contexts after the\nrequest ends, so that their data can be accessed in the test function.\nUsing thetest_client()as awithblock to preserve the\ncontexts until the with block exits.fromflaskimportFlask\n,requestapp=Flask\n(\n__name__\n)@app.route\n(\n'/'\n)defhello\n():print\n(\n'during view'\n)return'Hello, World!'@app.teardown_requestdefshow_teardown\n(\nexception\n):print\n(\n'after with block'\n)withapp\n.\ntest_request_context\n():print\n(\n'during with block'\n)# teardown functions are called after the context with block exitswithapp\n.\ntest_client\n():client\n.\nget\n(\n'/'\n)# the contexts are not popped even though the request endedprint\n(\nrequest\n.\npath\n)# the contexts are popped and teardown functions are called after# the client with block existsSignals\n\u00b6Ifsignals_availableis true, the following signals are\nsent:request_startedis sent before thebefore_request()functions are called.request_finishedis sent after theafter_request()functions are called.got_request_exceptionis sent when an exception begins to\nbe handled, but before anerrorhandler()is looked up or\ncalled.request_tearing_downis sent after theteardown_request()functions are called.Context Preservation on Error\n\u00b6At the end of a request, the request context is popped and all data\nassociated with it is destroyed. If an error occurs during development,\nit is useful to delay destroying the data for debugging purposes.When the development server is running in development mode (theFLASK_ENVenvironment variable is set to'development'\n), the\nerror and data will be preserved and shown in the interactive debugger.This behavior can be controlled with thePRESERVE_CONTEXT_ON_EXCEPTIONconfig. As described above, it\ndefaults toTruein the development environment.Do not enablePRESERVE_CONTEXT_ON_EXCEPTIONin production, as it\nwill cause your application to leak memory on exceptions.Notes On Proxies\n\u00b6Some of the objects provided by Flask are proxies to other objects. The\nproxies are accessed in the same way for each worker thread, but\npoint to the unique object bound to each worker behind the scenes as\ndescribed on this page.Most of the time you don\u2019t have to care about that, but there are some\nexceptions where it is good to know that this object is an actual proxy:The proxy objects cannot fake their type as the actual object types.\nIf you want to perform instance checks, you have to do that on the\nobject being proxied.If the specific object reference is important, for example for\nsendingSignalsor passing data to a background thread.If you need to access the underlying object that is proxied, use the_get_current_object()method:app=current_app\n.\n_get_current_object\n()my_signal\n.\nsend\n(\napp\n)ContentsThe Request ContextPurpose of the ContextLifetime of the ContextManually Push a ContextHow the Context WorksCallbacks and ErrorsTeardown CallbacksSignalsContext Preservation on ErrorNotes On ProxiesNavigationOverviewPrevious:The Application ContextNext:Modular Applications with BlueprintsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/reqcontext/"},
{"text": "View Decorators \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPatterns for Flask\u00bbView Decorators\n\u00b6Python has a really interesting feature called function decorators.This\nallows some really neat things for web applications.Because each view in\nFlask is a function, decorators can be used to inject additional\nfunctionality to one or more functions.Theroute()decorator is the one you probably used already.But there are use cases\nfor implementing your own decorator.For instance, imagine you have a\nview that should only be used by people that are logged in.If a user\ngoes to the site and is not logged in, they should be redirected to the\nlogin page.This is a good example of a use case where a decorator is an\nexcellent solution.Login Required Decorator\n\u00b6So let\u2019s implement such a decorator.A decorator is a function that\nwraps and replaces another function.Since the original function is\nreplaced, you need to remember to copy the original function\u2019s information\nto the new function.Usefunctools.wraps()to handle this for you.This example assumes that the login page is called'login'and that\nthe current user is stored ing.userand isNoneif there is no-one\nlogged in.fromfunctoolsimportwrapsfromflaskimportg\n,request\n,redirect\n,url_fordeflogin_required\n(\nf\n):@wraps\n(\nf\n)defdecorated_function\n(\n*\nargs\n,**\nkwargs\n):ifg\n.\nuserisNone\n:returnredirect\n(\nurl_for\n(\n'login'\n,next\n=\nrequest\n.\nurl\n))returnf\n(\n*\nargs\n,**\nkwargs\n)returndecorated_functionTo use the decorator, apply it as innermost decorator to a view function.\nWhen applying further decorators, always remember\nthat theroute()decorator is the outermost.@app\n.\nroute\n(\n'/secret_page'\n)@login_requireddefsecret_page\n():passNoteThenextvalue will exist inrequest.argsafter aGETrequest for\nthe login page.You\u2019ll have to pass it along when sending thePOSTrequest\nfrom the login form.You can do this with a hidden input tag, then retrieve it\nfromrequest.formwhen logging the user in.<\ninputtype\n=\n\"hidden\"value\n=\n\"{{ request.args.get('next', '') }}\"\n/>Caching Decorator\n\u00b6Imagine you have a view function that does an expensive calculation and\nbecause of that you would like to cache the generated results for a\ncertain amount of time.A decorator would be nice for that.We\u2019re\nassuming you have set up a cache like mentioned inCaching\n.Here is an example cache function.It generates the cache key from a\nspecific prefix (actually a format string) and the current path of the\nrequest.Notice that we are using a function that first creates the\ndecorator that then decorates the function.Sounds awful? Unfortunately\nit is a little bit more complex, but the code should still be\nstraightforward to read.The decorated function will then work as followsget the unique cache key for the current request base on the current\npath.get the value for that key from the cache. If the cache returned\nsomething we will return that value.otherwise the original function is called and the return value is\nstored in the cache for the timeout provided (by default 5 minutes).Here the code:fromfunctoolsimportwrapsfromflaskimportrequestdefcached\n(\ntimeout\n=\n5*60\n,key\n=\n'view/\n%s\n'\n):defdecorator\n(\nf\n):@wraps\n(\nf\n)defdecorated_function\n(\n*\nargs\n,**\nkwargs\n):cache_key=key%request\n.\npathrv=cache\n.\nget\n(\ncache_key\n)ifrvisnotNone\n:returnrvrv=f\n(\n*\nargs\n,**\nkwargs\n)cache\n.\nset\n(\ncache_key\n,rv\n,timeout\n=\ntimeout\n)returnrvreturndecorated_functionreturndecoratorNotice that this assumes an instantiatedcacheobject is available, seeCachingfor more information.Templating Decorator\n\u00b6A common pattern invented by the TurboGears guys a while back is a\ntemplating decorator.The idea of that decorator is that you return a\ndictionary with the values passed to the template from the view function\nand the template is automatically rendered.With that, the following\nthree examples do exactly the same:@app\n.\nroute\n(\n'/'\n)defindex\n():returnrender_template\n(\n'index.html'\n,value\n=\n42\n)@app\n.\nroute\n(\n'/'\n)@templated\n(\n'index.html'\n)defindex\n():returndict\n(\nvalue\n=\n42\n)@app\n.\nroute\n(\n'/'\n)@templated\n()defindex\n():returndict\n(\nvalue\n=\n42\n)As you can see, if no template name is provided it will use the endpoint\nof the URL map with dots converted to slashes +'.html'\n.Otherwise\nthe provided template name is used.When the decorated function returns,\nthe dictionary returned is passed to the template rendering function.IfNoneis returned, an empty dictionary is assumed, if something else than\na dictionary is returned we return it from the function unchanged.That\nway you can still use the redirect function or return simple strings.Here is the code for that decorator:fromfunctoolsimportwrapsfromflaskimportrequest\n,render_templatedeftemplated\n(\ntemplate\n=\nNone\n):defdecorator\n(\nf\n):@wraps\n(\nf\n)defdecorated_function\n(\n*\nargs\n,**\nkwargs\n):template_name=templateiftemplate_nameisNone\n:template_name=request\n.\nendpoint\\.\nreplace\n(\n'.'\n,'/'\n)+'.html'ctx=f\n(\n*\nargs\n,**\nkwargs\n)ifctxisNone\n:ctx={}elifnotisinstance\n(\nctx\n,dict\n):returnctxreturnrender_template\n(\ntemplate_name\n,**\nctx\n)returndecorated_functionreturndecoratorEndpoint Decorator\n\u00b6When you want to use the werkzeug routing system for more flexibility you\nneed to map the endpoint as defined in theRuleto a view function. This is possible with this decorator. For example:fromflaskimportFlaskfromwerkzeug.routingimportRuleapp=Flask\n(\n__name__\n)app\n.\nurl_map\n.\nadd\n(\nRule\n(\n'/'\n,endpoint\n=\n'index'\n))@app\n.\nendpoint\n(\n'index'\n)defmy_index\n():return\"Hello world\"ContentsView DecoratorsLogin Required DecoratorCaching DecoratorTemplating DecoratorEndpoint DecoratorNavigationOverviewPatterns for FlaskPrevious:CachingNext:Form Validation with WTFormsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/patterns/viewdecorators/"},
{"text": "The Application Context \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbThe Application Context\n\u00b6The application context keeps track of the application-level data during\na request, CLI command, or other activity. Rather than passing the\napplication around to each function, thecurrent_appandgproxies are accessed instead.This is similar to theThe Request Context\n, which keeps track of\nrequest-level data during a request. A corresponding application context\nis pushed when a request context is pushed.Purpose of the Context\n\u00b6TheFlaskapplication object has attributes, such asconfig\n, that are useful to access within views andCLI commands\n. However, importing theappinstance\nwithin the modules in your project is prone to circular import issues.\nWhen using theapp factory patternor\nwriting reusableblueprintsorextensionsthere won\u2019t be anappinstance to\nimport at all.Flask solves this issue with theapplication context\n. Rather than\nreferring to anappdirectly, you use the thecurrent_appproxy, which points to the application handling the current activity.Flask automaticallypushesan application context when handling a\nrequest. View functions, error handlers, and other functions that run\nduring a request will have access tocurrent_app\n.Flask will also automatically push an app context when running CLI\ncommands registered withFlask.cliusing@app.cli.command()\n.Lifetime of the Context\n\u00b6The application context is created and destroyed as necessary. When a\nFlask application begins handling a request, it pushes an application\ncontext and arequest context\n. When the request\nends it pops the request context then the application context.\nTypically, an application context will have the same lifetime as a\nrequest.SeeThe Request Contextfor more information about how the contexts work\nand the full lifecycle of a request.Manually Push a Context\n\u00b6If you try to accesscurrent_app\n, or anything that uses it,\noutside an application context, you\u2019ll get this error message:RuntimeError: Working outside of application context.This typically means that you attempted to use functionality thatneeded to interface with the current application object in some way.To solve this, set up an application context with app.app_context().If you see that error while configuring your application, such as when\ninitializing an extension, you can push a context manually since you\nhave direct access to theapp\n. Useapp_context()in awithblock, and everything that runs in the block will have access\ntocurrent_app\n.defcreate_app\n():app=Flask\n(\n__name__\n)withapp\n.\napp_context\n():init_db\n()returnappIf you see that error somewhere else in your code not related to\nconfiguring the application, it most likely indicates that you should\nmove that code into a view function or CLI command.Storing Data\n\u00b6The application context is a good place to store common data during a\nrequest or CLI command. Flask provides thegobjectfor this\npurpose. It is a simple namespace object that has the same lifetime as\nan application context.NoteThegname stands for \u201cglobal\u201d, but that is referring to the\ndata being globalwithin a context\n. The data ongis lost\nafter the context ends, and it is not an appropriate place to store\ndata between requests. Use thesessionor a database to\nstore data across requests.A common use forgis to manage resources during a request.get_X()creates resourceXif it does not exist, caching it\nasg.X\n.teardown_X()closes or otherwise deallocates the resource if it\nexists. It is registered as ateardown_appcontext()handler.For example, you can manage a database connection using this pattern:fromflaskimportgdefget_db\n():if'db'noting\n:g\n.\ndb=connect_to_database\n()returng\n.\ndb@app\n.\nteardown_appcontextdefteardown_db\n():db=g\n.\npop\n(\n'db'\n,None\n)ifdbisnotNone\n:db\n.\nclose\n()During a request, every call toget_db()will return the same\nconnection, and it will be closed automatically at the end of the\nrequest.You can useLocalProxyto make a new context\nlocal fromget_db()\n:fromwerkzeug.localimportLocalProxydb=LocalProxy\n(\nget_db\n)Accessingdbwill callget_dbinternally, in the same way thatcurrent_appworks.If you\u2019re writing an extension,gshould be reserved for user\ncode. You may store internal data on the context itself, but be sure to\nuse a sufficiently unique name. The current context is accessed with_app_ctx_stack.top\n. For more information seeFlask Extension Development\n.Events and Signals\n\u00b6The application will call functions registered withteardown_appcontext()when the application context is\npopped.Ifsignals_availableis true, the following signals are\nsent:appcontext_pushed\n,appcontext_tearing_down\n, andappcontext_popped\n.ContentsThe Application ContextPurpose of the ContextLifetime of the ContextManually Push a ContextStoring DataEvents and SignalsNavigationOverviewPrevious:Pluggable ViewsNext:The Request ContextVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/appcontext/"},
{"text": "Pluggable Views \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbPluggable Views\n\u00b6ChangelogNew in version 0.7.Flask 0.7 introduces pluggable views inspired by the generic views from\nDjango which are based on classes instead of functions.The main\nintention is that you can replace parts of the implementations and this\nway have customizable pluggable views.Basic Principle\n\u00b6Consider you have a function that loads a list of objects from the\ndatabase and renders into a template:@app\n.\nroute\n(\n'/users/'\n)defshow_users\n(\npage\n):users=User\n.\nquery\n.\nall\n()returnrender_template\n(\n'users.html'\n,users\n=\nusers\n)This is simple and flexible, but if you want to provide this view in a\ngeneric fashion that can be adapted to other models and templates as well\nyou might want more flexibility.This is where pluggable class-based\nviews come into place.As the first step to convert this into a class\nbased view you would do this:fromflask.viewsimportViewclassShowUsers\n(\nView\n):defdispatch_request\n(\nself\n):users=User\n.\nquery\n.\nall\n()returnrender_template\n(\n'users.html'\n,objects\n=\nusers\n)app\n.\nadd_url_rule\n(\n'/users/'\n,view_func\n=\nShowUsers\n.\nas_view\n(\n'show_users'\n))As you can see what you have to do is to create a subclass offlask.views.Viewand implementdispatch_request()\n.Then we have to convert that\nclass into an actual view function by using theas_view()class method.The string you pass to\nthat function is the name of the endpoint that view will then have.But\nthis by itself is not helpful, so let\u2019s refactor the code a bit:fromflask.viewsimportViewclassListView\n(\nView\n):defget_template_name\n(\nself\n):raiseNotImplementedError\n()defrender_template\n(\nself\n,context\n):returnrender_template\n(\nself\n.\nget_template_name\n(),**\ncontext\n)defdispatch_request\n(\nself\n):context={\n'objects'\n:self\n.\nget_objects\n()}returnself\n.\nrender_template\n(\ncontext\n)classUserView\n(\nListView\n):defget_template_name\n(\nself\n):return'users.html'defget_objects\n(\nself\n):returnUser\n.\nquery\n.\nall\n()This of course is not that helpful for such a small example, but it\u2019s good\nenough to explain the basic principle.When you have a class-based view\nthe question comes up whatselfpoints to.The way this works is that\nwhenever the request is dispatched a new instance of the class is created\nand thedispatch_request()method is called with\nthe parameters from the URL rule.The class itself is instantiated with\nthe parameters passed to theas_view()function.\nFor instance you can write a class like this:classRenderTemplateView\n(\nView\n):def__init__\n(\nself\n,template_name\n):self\n.\ntemplate_name=template_namedefdispatch_request\n(\nself\n):returnrender_template\n(\nself\n.\ntemplate_name\n)And then you can register it like this:app\n.\nadd_url_rule\n(\n'/about'\n,view_func\n=\nRenderTemplateView\n.\nas_view\n('about_page'\n,template_name\n=\n'about.html'\n))Method Hints\n\u00b6Pluggable views are attached to the application like a regular function by\neither usingroute()or betteradd_url_rule()\n.That however also means that you would\nhave to provide the names of the HTTP methods the view supports when you\nattach this.In order to move that information to the class you can\nprovide amethodsattribute that has this\ninformation:classMyView\n(\nView\n):methods=[\n'GET'\n,'POST'\n]defdispatch_request\n(\nself\n):ifrequest\n.\nmethod=='POST'\n:......app\n.\nadd_url_rule\n(\n'/myview'\n,view_func\n=\nMyView\n.\nas_view\n(\n'myview'\n))Method Based Dispatching\n\u00b6For RESTful APIs it\u2019s especially helpful to execute a different function\nfor each HTTP method.With theflask.views.MethodViewyou can\neasily do that.Each HTTP method maps to a function with the same name\n(just in lowercase):fromflask.viewsimportMethodViewclassUserAPI\n(\nMethodView\n):defget\n(\nself\n):users=User\n.\nquery\n.\nall\n()...defpost\n(\nself\n):user=User\n.\nfrom_form_data\n(\nrequest\n.\nform\n)...app\n.\nadd_url_rule\n(\n'/users/'\n,view_func\n=\nUserAPI\n.\nas_view\n(\n'users'\n))That way you also don\u2019t have to provide themethodsattribute.It\u2019s automatically set based\non the methods defined in the class.Decorating Views\n\u00b6Since the view class itself is not the view function that is added to the\nrouting system it does not make much sense to decorate the class itself.\nInstead you either have to decorate the return value ofas_view()by hand:defuser_required\n(\nf\n):\"\"\"Checks whether user is logged in or raises error 401.\"\"\"defdecorator\n(\n*\nargs\n,**\nkwargs\n):ifnotg\n.\nuser\n:abort\n(\n401\n)returnf\n(\n*\nargs\n,**\nkwargs\n)returndecoratorview=user_required\n(\nUserAPI\n.\nas_view\n(\n'users'\n))app\n.\nadd_url_rule\n(\n'/users/'\n,view_func\n=\nview\n)Starting with Flask 0.8 there is also an alternative way where you can\nspecify a list of decorators to apply in the class declaration:classUserAPI\n(\nMethodView\n):decorators=[\nuser_required\n]Due to the implicit self from the caller\u2019s perspective you cannot use\nregular view decorators on the individual methods of the view however,\nkeep this in mind.Method Views for APIs\n\u00b6Web APIs are often working very closely with HTTP verbs so it makes a lot\nof sense to implement such an API based on theMethodView\n.That said, you will notice that the API\nwill require different URL rules that go to the same method view most of\nthe time.For instance consider that you are exposing a user object on\nthe web:URLMethodDescription/users/GETGives a list of all users/users/POSTCreates a new user/users/<id>GETShows a single user/users/<id>PUTUpdates a single user/users/<id>DELETEDeletes a single userSo how would you go about doing that with theMethodView\n?The trick is to take advantage of the\nfact that you can provide multiple rules to the same view.Let\u2019s assume for the moment the view would look like this:classUserAPI\n(\nMethodView\n):defget\n(\nself\n,user_id\n):ifuser_idisNone\n:# return a list of userspasselse\n:# expose a single userpassdefpost\n(\nself\n):# create a new userpassdefdelete\n(\nself\n,user_id\n):# delete a single userpassdefput\n(\nself\n,user_id\n):# update a single userpassSo how do we hook this up with the routing system?By adding two rules\nand explicitly mentioning the methods for each:user_view=UserAPI\n.\nas_view\n(\n'user_api'\n)app\n.\nadd_url_rule\n(\n'/users/'\n,defaults\n=\n{\n'user_id'\n:None\n},view_func\n=\nuser_view\n,methods\n=\n[\n'GET'\n,])app\n.\nadd_url_rule\n(\n'/users/'\n,view_func\n=\nuser_view\n,methods\n=\n[\n'POST'\n,])app\n.\nadd_url_rule\n(\n'/users/<int:user_id>'\n,view_func\n=\nuser_view\n,methods\n=\n[\n'GET'\n,'PUT'\n,'DELETE'\n])If you have a lot of APIs that look similar you can refactor that\nregistration code:defregister_api\n(\nview\n,endpoint\n,url\n,pk\n=\n'id'\n,pk_type\n=\n'int'\n):view_func=view\n.\nas_view\n(\nendpoint\n)app\n.\nadd_url_rule\n(\nurl\n,defaults\n=\n{\npk\n:None\n},view_func\n=\nview_func\n,methods\n=\n[\n'GET'\n,])app\n.\nadd_url_rule\n(\nurl\n,view_func\n=\nview_func\n,methods\n=\n[\n'POST'\n,])app\n.\nadd_url_rule\n(\n'\n%s\n<\n%s\n:\n%s\n>'%(\nurl\n,pk_type\n,pk\n),view_func\n=\nview_func\n,methods\n=\n[\n'GET'\n,'PUT'\n,'DELETE'\n])register_api\n(\nUserAPI\n,'user_api'\n,'/users/'\n,pk\n=\n'user_id'\n)ContentsPluggable ViewsBasic PrincipleMethod HintsMethod Based DispatchingDecorating ViewsMethod Views for APIsNavigationOverviewPrevious:SignalsNext:The Application ContextVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/views/"},
{"text": "Signals \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbSignals\n\u00b6ChangelogNew in version 0.6.Starting with Flask 0.6, there is integrated support for signalling in\nFlask.This support is provided by the excellentblinkerlibrary and\nwill gracefully fall back if it is not available.What are signals?Signals help you decouple applications by sending\nnotifications when actions occur elsewhere in the core framework or\nanother Flask extensions.In short, signals allow certain senders to\nnotify subscribers that something happened.Flask comes with a couple of signals and other extensions might provide\nmore.Also keep in mind that signals are intended to notify subscribers\nand should not encourage subscribers to modify data.You will notice that\nthere are signals that appear to do the same thing like some of the\nbuiltin decorators do (eg:request_startedis very similar\ntobefore_request()\n).However, there are differences in\nhow they work.The corebefore_request()handler, for\nexample, is executed in a specific order and is able to abort the request\nearly by returning a response.In contrast all signal handlers are\nexecuted in undefined order and do not modify any data.The big advantage of signals over handlers is that you can safely\nsubscribe to them for just a split second.These temporary\nsubscriptions are helpful for unit testing for example.Say you want to\nknow what templates were rendered as part of a request: signals allow you\nto do exactly that.Subscribing to Signals\n\u00b6To subscribe to a signal, you can use theconnect()method of a signal.The first\nargument is the function that should be called when the signal is emitted,\nthe optional second argument specifies a sender.To unsubscribe from a\nsignal, you can use thedisconnect()method.For all core Flask signals, the sender is the application that issued the\nsignal.When you subscribe to a signal, be sure to also provide a sender\nunless you really want to listen for signals from all applications.This is\nespecially true if you are developing an extension.For example, here is a helper context manager that can be used in a unit test\nto determine which templates were rendered and what variables were passed\nto the template:fromflaskimporttemplate_renderedfromcontextlibimportcontextmanager@contextmanagerdefcaptured_templates\n(\napp\n):recorded=[]defrecord\n(\nsender\n,template\n,context\n,**\nextra\n):recorded\n.\nappend\n((\ntemplate\n,context\n))template_rendered\n.\nconnect\n(\nrecord\n,app\n)try\n:yieldrecordedfinally\n:template_rendered\n.\ndisconnect\n(\nrecord\n,app\n)This can now easily be paired with a test client:withcaptured_templates\n(\napp\n)astemplates\n:rv=app\n.\ntest_client\n()\n.\nget\n(\n'/'\n)assertrv\n.\nstatus_code==200assertlen\n(\ntemplates\n)==1template\n,context=templates\n[\n0\n]asserttemplate\n.\nname=='index.html'assertlen\n(\ncontext\n[\n'items'\n])==10Make sure to subscribe with an extra**extraargument so that your\ncalls don\u2019t fail if Flask introduces new arguments to the signals.All the template rendering in the code issued by the applicationappin the body of thewithblock will now be recorded in thetemplatesvariable.Whenever a template is rendered, the template object as well as\ncontext are appended to it.Additionally there is a convenient helper method\n(\nconnected_to()\n)that allows you to\ntemporarily subscribe a function to a signal with a context manager on\nits own.Because the return value of the context manager cannot be\nspecified that way, you have to pass the list in as an argument:fromflaskimporttemplate_rendereddefcaptured_templates\n(\napp\n,recorded\n,**\nextra\n):defrecord\n(\nsender\n,template\n,context\n):recorded\n.\nappend\n((\ntemplate\n,context\n))returntemplate_rendered\n.\nconnected_to\n(\nrecord\n,app\n)The example above would then look like this:templates=[]withcaptured_templates\n(\napp\n,templates\n,**\nextra\n):...template\n,context=templates\n[\n0\n]Blinker API ChangesTheconnected_to()method arrived in Blinker\nwith version 1.1.Creating Signals\n\u00b6If you want to use signals in your own application, you can use the\nblinker library directly.The most common use case are named signals in a\ncustomNamespace\n..This is what is recommended\nmost of the time:fromblinkerimportNamespacemy_signals=Namespace\n()Now you can create new signals like this:model_saved=my_signals\n.\nsignal\n(\n'model-saved'\n)The name for the signal here makes it unique and also simplifies\ndebugging.You can access the name of the signal with thenameattribute.For Extension DevelopersIf you are writing a Flask extension and you want to gracefully degrade for\nmissing blinker installations, you can do so by using theflask.signals.Namespaceclass.Sending Signals\n\u00b6If you want to emit a signal, you can do so by calling thesend()method.It accepts a sender as first\nargument and optionally some keyword arguments that are forwarded to the\nsignal subscribers:classModel\n(\nobject\n):...defsave\n(\nself\n):model_saved\n.\nsend\n(\nself\n)Try to always pick a good sender.If you have a class that is emitting a\nsignal, passselfas sender.If you are emitting a signal from a random\nfunction, you can passcurrent_app._get_current_object()as sender.Passing Proxies as SendersNever passcurrent_appas sender to a signal.Usecurrent_app._get_current_object()instead.The reason for this is\nthatcurrent_appis a proxy and not the real application\nobject.Signals and Flask\u2019s Request Context\n\u00b6Signals fully supportThe Request Contextwhen receiving signals.\nContext-local variables are consistently available betweenrequest_startedandrequest_finished\n, so you can\nrely onflask.gand others as needed.Note the limitations described\ninSending Signalsand therequest_tearing_downsignal.Decorator Based Signal Subscriptions\n\u00b6With Blinker 1.1 you can also easily subscribe to signals by using the newconnect_via()decorator:fromflaskimporttemplate_rendered@template_rendered\n.\nconnect_via\n(\napp\n)defwhen_template_rendered\n(\nsender\n,template\n,context\n,**\nextra\n):print'Template%sis rendered with%s\n'%(\ntemplate\n.\nname\n,context\n)Core Signals\n\u00b6Take a look atSignalsfor a list of all builtin signals.ContentsSignalsSubscribing to SignalsCreating SignalsSending SignalsSignals and Flask\u2019s Request ContextDecorator Based Signal SubscriptionsCore SignalsNavigationOverviewPrevious:Configuration HandlingNext:Pluggable ViewsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/signals/"},
{"text": "FastCGI \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbDeployment Options\u00bbFastCGI\n\u00b6FastCGI is a deployment option on servers likenginx\n,lighttpd\n, andcherokee\n; seeuWSGIandStandalone WSGI Containersfor other options.To use your WSGI application with any of them you will need\na FastCGI server first.The most popular one isflupwhich we will use for\nthis guide.Make sure to have it installed to follow along.Watch OutPlease make sure in advance that anyapp.run()calls you might\nhave in your application file are inside anif__name__=='__main__':block or moved to a separate file.Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to FastCGI.Creating a.fcgifile\n\u00b6First you need to create the FastCGI server file.Let\u2019s call ityourapplication.fcgi\n:#!/usr/bin/pythonfromflup.server.fcgiimportWSGIServerfromyourapplicationimportappif__name__=='__main__'\n:WSGIServer\n(\napp\n)\n.\nrun\n()This is enough for Apache to work, however nginx and older versions of\nlighttpd need a socket to be explicitly passed to communicate with the\nFastCGI server.For that to work you need to pass the path to the\nsocket to theWSGIServer\n:WSGIServer\n(\napplication\n,bindAddress\n=\n'/path/to/fcgi.sock'\n)\n.\nrun\n()The path has to be the exact same path you define in the server\nconfig.Save theyourapplication.fcgifile somewhere you will find it again.\nIt makes sense to have that in/var/www/yourapplicationor something\nsimilar.Make sure to set the executable bit on that file so that the servers\ncan execute it:# chmod +x /var/www/yourapplication/yourapplication.fcgiConfiguring Apache\n\u00b6The example above is good enough for a basic Apache deployment but your.fcgifile will appear in your application URL e.g.example.com/yourapplication.fcgi/news/\n. There are few ways to configure\nyour application so that yourapplication.fcgi does not appear in the URL.\nA preferable way is to use the ScriptAlias and SetHandler configuration\ndirectives to route requests to the FastCGI server. The following example\nuses FastCgiServer to start 5 instances of the application which will\nhandle all incoming requests:LoadModulefastcgi_module/\nusr\n/\nlib64\n/\nhttpd\n/\nmodules\n/\nmod_fastcgi\n.\nsoFastCgiServer/\nvar\n/\nwww\n/\nhtml\n/\nyourapplication\n/\napp\n.\nfcgi-\nidle\n-\ntimeout300-\nprocesses5<\nVirtualHost*>ServerNamewebapp1\n.\nmydomain\n.\ncomDocumentRoot/\nvar\n/\nwww\n/\nhtml\n/\nyourapplicationAddHandlerfastcgi\n-\nscriptfcgiScriptAlias//\nvar\n/\nwww\n/\nhtml\n/\nyourapplication\n/\napp\n.\nfcgi\n/<\nLocation/>SetHandlerfastcgi\n-\nscript</\nLocation\n></\nVirtualHost\n>These processes will be managed by Apache. If you\u2019re using a standalone\nFastCGI server, you can use the FastCgiExternalServer directive instead.\nNote that in the following the path is not real, it\u2019s simply used as an\nidentifier to other\ndirectives such as AliasMatch:FastCgiServer/\nvar\n/\nwww\n/\nhtml\n/\nyourapplication-\nhost127.0\n.\n0.1\n:\n3000If you cannot set ScriptAlias, for example on a shared web host, you can use\nWSGI middleware to remove yourapplication.fcgi from the URLs. Set .htaccess:<IfModule mod_fcgid.c>AddHandler fcgid-script .fcgi<Files ~ (\\.fcgi)>SetHandler fcgid-scriptOptions +FollowSymLinks +ExecCGI</Files>\n</IfModule><IfModule mod_rewrite.c>Options +FollowSymlinksRewriteEngine OnRewriteBase /RewriteCond %{REQUEST_FILENAME} !-fRewriteRule ^(.*)$ yourapplication.fcgi/$1 [QSA,L]\n</IfModule>Set yourapplication.fcgi:#!/usr/bin/python#: optional path to your local python site-packages folderimportsyssys\n.\npath\n.\ninsert\n(\n0\n,'<your_local_path>/lib/python<your_python_version>/site-packages'\n)fromflup.server.fcgiimportWSGIServerfromyourapplicationimportappclassScriptNameStripper\n(\nobject\n):def__init__\n(\nself\n,app\n):self\n.\napp=appdef__call__\n(\nself\n,environ\n,start_response\n):environ\n[\n'SCRIPT_NAME'\n]=''returnself\n.\napp\n(\nenviron\n,start_response\n)app=ScriptNameStripper\n(\napp\n)if__name__=='__main__'\n:WSGIServer\n(\napp\n)\n.\nrun\n()Configuring lighttpd\n\u00b6A basic FastCGI configuration for lighttpd looks like that:fastcgi\n.\nserver=(\n\"/yourapplication.fcgi\"=>((\"socket\"=>\"/tmp/yourapplication-fcgi.sock\"\n,\"bin-path\"=>\"/var/www/yourapplication/yourapplication.fcgi\"\n,\"check-local\"=>\"disable\"\n,\"max-procs\"=>1)))alias\n.\nurl=(\"/static/\"=>\"/path/to/your/static/\")url\n.\nrewrite\n-\nonce=(\"^(/static($|/.*))$\"=>\"$1\"\n,\"^(/.*)$\"=>\"/yourapplication.fcgi$1\")Remember to enable the FastCGI, alias and rewrite modules. This configuration\nbinds the application to/yourapplication\n.If you want the application to\nwork in the URL root you have to work around a lighttpd bug with theLighttpdCGIRootFixmiddleware.Make sure to apply it only if you are mounting the application the URL\nroot. Also, see the Lighty docs for more information onFastCGI and Python(note that\nexplicitly passing a socket to run() is no longer necessary).Configuring nginx\n\u00b6Installing FastCGI applications on nginx is a bit different because by\ndefault no FastCGI parameters are forwarded.A basic Flask FastCGI configuration for nginx looks like this:location = /yourapplication { rewrite ^ /yourapplication/ last; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {include fastcgi_params;fastcgi_split_path_info ^(/yourapplication)(.*)$;fastcgi_param PATH_INFO $fastcgi_path_info;fastcgi_param SCRIPT_NAME $fastcgi_script_name;fastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n}This configuration binds the application to/yourapplication\n.If you\nwant to have it in the URL root it\u2019s a bit simpler because you don\u2019t\nhave to figure out how to calculatePATH_INFOandSCRIPT_NAME\n:location / { try_files $uri @yourapplication; }\nlocation @yourapplication {include fastcgi_params;fastcgi_param PATH_INFO $fastcgi_script_name;fastcgi_param SCRIPT_NAME \"\";fastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n}Running FastCGI Processes\n\u00b6Since nginx and others do not load FastCGI apps, you have to do it by\nyourself.Supervisor can manage FastCGI processes.You can look around for other FastCGI process managers or write a script\nto run your.fcgifile at boot, e.g. using a SysVinit.dscript.\nFor a temporary solution, you can always run the.fcgiscript inside\nGNU screen.Seemanscreenfor details, and note that this is a\nmanual solution which does not persist across system restart:$ screen\n$ /var/www/yourapplication/yourapplication.fcgiDebugging\n\u00b6FastCGI deployments tend to be hard to debug on most web servers.Very\noften the only thing the server log tells you is something along the\nlines of \u201cpremature end of headers\u201d.In order to debug the application\nthe only thing that can really give you ideas why it breaks is switching\nto the correct user and executing the application by hand.This example assumes your application is calledapplication.fcgiand\nthat your web server user iswww-data\n:$ su www-data\n$ cd /var/www/yourapplication\n$ python application.fcgi\nTraceback (most recent call last):File \"yourapplication.fcgi\", line 4, in <module>\nImportError: No module named yourapplicationIn this case the error seems to be \u201cyourapplication\u201d not being on the\npython path.Common problems are:Relative paths being used.Don\u2019t rely on the current working directory.The code depending on environment variables that are not set by the\nweb server.Different python interpreters being used.ContentsFastCGICreating a.fcgifileConfiguring ApacheConfiguring lighttpdConfiguring nginxRunning FastCGI ProcessesDebuggingNavigationOverviewDeployment OptionsPrevious:mod_wsgi (Apache)Next:CGIVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/deploying/fastcgi/"},
{"text": "Modular Applications with Blueprints \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbModular Applications with Blueprints\n\u00b6ChangelogNew in version 0.7.Flask uses a concept ofblueprintsfor making application components and\nsupporting common patterns within an application or across applications.\nBlueprints can greatly simplify how large applications work and provide a\ncentral means for Flask extensions to register operations on applications.\nABlueprintobject works similarly to aFlaskapplication object, but it is not actually an application.Rather it is ablueprintof how to construct or extend an application.Why Blueprints?\n\u00b6Blueprints in Flask are intended for these cases:Factor an application into a set of blueprints.This is ideal for\nlarger applications; a project could instantiate an application object,\ninitialize several extensions, and register a collection of blueprints.Register a blueprint on an application at a URL prefix and/or subdomain.\nParameters in the URL prefix/subdomain become common view arguments\n(with defaults) across all view functions in the blueprint.Register a blueprint multiple times on an application with different URL\nrules.Provide template filters, static files, templates, and other utilities\nthrough blueprints.A blueprint does not have to implement applications\nor view functions.Register a blueprint on an application for any of these cases when\ninitializing a Flask extension.A blueprint in Flask is not a pluggable app because it is not actually an\napplication \u2013 it\u2019s a set of operations which can be registered on an\napplication, even multiple times.Why not have multiple application\nobjects?You can do that (seeApplication Dispatching\n), but your applications\nwill have separate configs and will be managed at the WSGI layer.Blueprints instead provide separation at the Flask level, share\napplication config, and can change an application object as necessary with\nbeing registered. The downside is that you cannot unregister a blueprint\nonce an application was created without having to destroy the whole\napplication object.The Concept of Blueprints\n\u00b6The basic concept of blueprints is that they record operations to execute\nwhen registered on an application.Flask associates view functions with\nblueprints when dispatching requests and generating URLs from one endpoint\nto another.My First Blueprint\n\u00b6This is what a very basic blueprint looks like.In this case we want to\nimplement a blueprint that does simple rendering of static templates:fromflaskimportBlueprint\n,render_template\n,abortfromjinja2importTemplateNotFoundsimple_page=Blueprint\n(\n'simple_page'\n,__name__\n,template_folder\n=\n'templates'\n)@simple_page\n.\nroute\n(\n'/'\n,defaults\n=\n{\n'page'\n:'index'\n})@simple_page\n.\nroute\n(\n'/<page>'\n)defshow\n(\npage\n):try\n:returnrender_template\n(\n'pages/\n%s\n.html'%page\n)exceptTemplateNotFound\n:abort\n(\n404\n)When you bind a function with the help of the@simple_page.routedecorator the blueprint will record the intention of registering the\nfunctionshowon the application when it\u2019s later registered.\nAdditionally it will prefix the endpoint of the function with the\nname of the blueprint which was given to theBlueprintconstructor (in this case alsosimple_page\n).Registering Blueprints\n\u00b6So how do you register that blueprint?Like this:fromflaskimportFlaskfromyourapplication.simple_pageimportsimple_pageapp=Flask\n(\n__name__\n)app\n.\nregister_blueprint\n(\nsimple_page\n)If you check the rules registered on the application, you will find\nthese:[\n<\nRule'/static/<filename>'(\nHEAD\n,OPTIONS\n,GET\n)->static\n>\n,<\nRule'/<page>'(\nHEAD\n,OPTIONS\n,GET\n)->simple_page\n.\nshow\n>\n,<\nRule'/'(\nHEAD\n,OPTIONS\n,GET\n)->simple_page\n.\nshow\n>\n]The first one is obviously from the application itself for the static\nfiles.The other two are for theshowfunction of thesimple_pageblueprint.As you can see, they are also prefixed with the name of the\nblueprint and separated by a dot (\n.\n).Blueprints however can also be mounted at different locations:app\n.\nregister_blueprint\n(\nsimple_page\n,url_prefix\n=\n'/pages'\n)And sure enough, these are the generated rules:[\n<\nRule'/static/<filename>'(\nHEAD\n,OPTIONS\n,GET\n)->static\n>\n,<\nRule'/pages/<page>'(\nHEAD\n,OPTIONS\n,GET\n)->simple_page\n.\nshow\n>\n,<\nRule'/pages/'(\nHEAD\n,OPTIONS\n,GET\n)->simple_page\n.\nshow\n>\n]On top of that you can register blueprints multiple times though not every\nblueprint might respond properly to that.In fact it depends on how the\nblueprint is implemented if it can be mounted more than once.Blueprint Resources\n\u00b6Blueprints can provide resources as well.Sometimes you might want to\nintroduce a blueprint only for the resources it provides.Blueprint Resource Folder\n\u00b6Like for regular applications, blueprints are considered to be contained\nin a folder.While multiple blueprints can originate from the same folder,\nit does not have to be the case and it\u2019s usually not recommended.The folder is inferred from the second argument toBlueprintwhich\nis usually__name__\n.This argument specifies what logical Python\nmodule or package corresponds to the blueprint.If it points to an actual\nPython package that package (which is a folder on the filesystem) is the\nresource folder.If it\u2019s a module, the package the module is contained in\nwill be the resource folder.You can access theBlueprint.root_pathproperty to see what the resource folder is:>>>simple_page\n.\nroot_path'/Users/username/TestProject/yourapplication'To quickly open sources from this folder you can use theopen_resource()function:withsimple_page\n.\nopen_resource\n(\n'static/style.css'\n)asf\n:code=f\n.\nread\n()Static Files\n\u00b6A blueprint can expose a folder with static files by providing the path\nto the folder on the filesystem with thestatic_folderargument.\nIt is either an absolute path or relative to the blueprint\u2019s location:admin=Blueprint\n(\n'admin'\n,__name__\n,static_folder\n=\n'static'\n)By default the rightmost part of the path is where it is exposed on the\nweb. This can be changed with thestatic_url_pathargument. Because the\nfolder is calledstatichere it will be available at theurl_prefixof the blueprint +/static\n. If the blueprint\nhas the prefix/admin\n, the static URL will be/admin/static\n.The endpoint is namedblueprint_name.static\n. You can generate URLs\nto it withurl_for()like you would with the static folder of the\napplication:url_for\n(\n'admin.static'\n,filename\n=\n'style.css'\n)However, if the blueprint does not have aurl_prefix\n, it is not\npossible to access the blueprint\u2019s static folder. This is because the\nURL would be/staticin this case, and the application\u2019s/staticroute takes precedence. Unlike template folders, blueprint static\nfolders are not searched if the file does not exist in the application\nstatic folder.Templates\n\u00b6If you want the blueprint to expose templates you can do that by providing\nthetemplate_folderparameter to theBlueprintconstructor:admin=Blueprint\n(\n'admin'\n,__name__\n,template_folder\n=\n'templates'\n)For static files, the path can be absolute or relative to the blueprint\nresource folder.The template folder is added to the search path of templates but with a lower\npriority than the actual application\u2019s template folder. That way you can\neasily override templates that a blueprint provides in the actual application.\nThis also means that if you don\u2019t want a blueprint template to be accidentally\noverridden, make sure that no other blueprint or actual application template\nhas the same relative path. When multiple blueprints provide the same relative\ntemplate path the first blueprint registered takes precedence over the others.So if you have a blueprint in the folderyourapplication/adminand you\nwant to render the template'admin/index.html'and you have providedtemplatesas atemplate_folderyou will have to create a file like\nthis:yourapplication/admin/templates/admin/index.html\n. The reason\nfor the extraadminfolder is to avoid getting our template overridden\nby a template namedindex.htmlin the actual application template\nfolder.To further reiterate this: if you have a blueprint namedadminand you\nwant to render a template calledindex.htmlwhich is specific to this\nblueprint, the best idea is to lay out your templates like this:yourpackage\n/blueprints\n/admin\n/templates\n/admin\n/index\n.\nhtml__init__\n.\npyAnd then when you want to render the template, useadmin/index.htmlas\nthe name to look up the template by.If you encounter problems loading\nthe correct templates enable theEXPLAIN_TEMPLATE_LOADINGconfig\nvariable which will instruct Flask to print out the steps it goes through\nto locate templates on everyrender_templatecall.Building URLs\n\u00b6If you want to link from one page to another you can use theurl_for()function just like you normally would do just that you\nprefix the URL endpoint with the name of the blueprint and a dot (\n.\n):url_for\n(\n'admin.index'\n)Additionally if you are in a view function of a blueprint or a rendered\ntemplate and you want to link to another endpoint of the same blueprint,\nyou can use relative redirects by prefixing the endpoint with a dot only:url_for\n(\n'.index'\n)This will link toadmin.indexfor instance in case the current request\nwas dispatched to any other admin blueprint endpoint.Error Handlers\n\u00b6Blueprints support the errorhandler decorator just like theFlaskapplication object, so it is easy to make Blueprint-specific custom error\npages.Here is an example for a \u201c404 Page Not Found\u201d exception:@simple_page\n.\nerrorhandler\n(\n404\n)defpage_not_found\n(\ne\n):returnrender_template\n(\n'pages/404.html'\n)Most errorhandlers will simply work as expected; however, there is a caveat\nconcerning handlers for 404 and 405 exceptions.These errorhandlers are only\ninvoked from an appropriateraisestatement or a call toabortin another\nof the blueprint\u2019s view functions; they are not invoked by, e.g., an invalid URL\naccess.This is because the blueprint does not \u201cown\u201d a certain URL space, so\nthe application instance has no way of knowing which blueprint errorhandler it\nshould run if given an invalid URL.If you would like to execute different\nhandling strategies for these errors based on URL prefixes, they may be defined\nat the application level using therequestproxy object:@app\n.\nerrorhandler\n(\n404\n)@app\n.\nerrorhandler\n(\n405\n)def_handle_api_error\n(\nex\n):ifrequest\n.\npath\n.\nstartswith\n(\n'/api/'\n):returnjsonify_error\n(\nex\n)else\n:returnexMore information on error handling seeCustom Error Pages\n.ContentsModular Applications with BlueprintsWhy Blueprints?The Concept of BlueprintsMy First BlueprintRegistering BlueprintsBlueprint ResourcesBlueprint Resource FolderStatic FilesTemplatesBuilding URLsError HandlersNavigationOverviewPrevious:The Request ContextNext:ExtensionsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/blueprints/"},
{"text": "mod_wsgi (Apache) \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbDeployment Options\u00bbmod_wsgi (Apache)\n\u00b6If you are using theApachewebserver, consider usingmod_wsgi\n.Watch OutPlease make sure in advance that anyapp.run()calls you might\nhave in your application file are inside anif__name__=='__main__':block or moved to a separate file.Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to mod_wsgi.Installingmod_wsgi\n\u00b6If you don\u2019t havemod_wsgiinstalled yet you have to either install it\nusing a package manager or compile it yourself.The mod_wsgiinstallation instructionscover source installations on UNIX systems.If you are using Ubuntu/Debian you can apt-get it and activate it as\nfollows:# apt-get install libapache2-mod-wsgiIf you are using a yum based distribution (Fedora, OpenSUSE, etc..) you\ncan install it as follows:# yum install mod_wsgiOn FreeBSD installmod_wsgiby compiling thewww/mod_wsgiport or by\nusing pkg_add:# pkg install ap22-mod_wsgi2If you are using pkgsrc you can installmod_wsgiby compiling thewww/ap2-wsgipackage.If you encounter segfaulting child processes after the first apache\nreload you can safely ignore them.Just restart the server.Creating a.wsgifile\n\u00b6To run your application you need ayourapplication.wsgifile.This file\ncontains the codemod_wsgiis executing on startup to get the application\nobject.The object calledapplicationin that file is then used as\napplication.For most applications the following file should be sufficient:fromyourapplicationimportappasapplicationIf you don\u2019t have a factory function for application creation but a singleton\ninstance you can directly import that one asapplication\n.Store that file somewhere that you will find it again (e.g.:/var/www/yourapplication\n) and make sure thatyourapplicationand all\nthe libraries that are in use are on the python load path.If you don\u2019t\nwant to install it system wide consider using avirtual pythoninstance.Keep in mind that you will have to actually install your\napplication into the virtualenv as well.Alternatively there is the\noption to just patch the path in the.wsgifile before the import:importsyssys\n.\npath\n.\ninsert\n(\n0\n,'/path/to/the/application'\n)Configuring Apache\n\u00b6The last thing you have to do is to create an Apache configuration file\nfor your application.In this example we are tellingmod_wsgito\nexecute the application under a different user for security reasons:<VirtualHost*\n>ServerNameexample.comWSGIDaemonProcessyourapplicationuser\n=user1group\n=group1 threads=5WSGIScriptAlias//var/www/yourapplication/yourapplication.wsgi<Directory/var/www/yourapplication\n>WSGIProcessGroupyourapplicationWSGIApplicationGroup%{GLOBAL}Orderdeny,allowAllowfromall</Directory></VirtualHost>Note: WSGIDaemonProcess isn\u2019t implemented in Windows and Apache will\nrefuse to run with the above configuration. On a Windows system, eliminate those lines:<VirtualHost*\n>ServerNameexample.comWSGIScriptAlias/ C:\\yourdir\\yourapp.wsgi<DirectoryC:\\yourdir\n>Orderdeny,allowAllowfromall</Directory></VirtualHost>Note: There have been some changes in access control configuration forApache 2.4\n.Most notably, the syntax for directory permissions has changed from httpd 2.2Orderallow,denyAllowfromallto httpd 2.4 syntaxRequireallgrantedFor more information consult themod_wsgi documentation\n.Troubleshooting\n\u00b6If your application does not run, follow this guide to troubleshoot:Problem:application does not run, errorlog shows SystemExit ignoredYou have anapp.run()call in your application file that is not\nguarded by anif__name__=='__main__':condition.Either\nremove thatrun()call from the file and move it\ninto a separaterun.pyfile or put it into such an if block.Problem:application gives permission errorsProbably caused by your application running as the wrong user.Make\nsure the folders the application needs access to have the proper\nprivileges set and the application runs as the correct user\n(\nuserandgroupparameter to theWSGIDaemonProcessdirective)Problem:application dies with an error on printKeep in mind that mod_wsgi disallows doing anything withsys.stdoutandsys.stderr\n.You can disable this\nprotection from the config by setting theWSGIRestrictStdouttooff\n:WSGIRestrictStdoutOffAlternatively you can also replace the standard out in the .wsgi file\nwith a different stream:importsyssys\n.\nstdout=sys\n.\nstderrProblem:accessing resources gives IO errorsYour application probably is a single .py file you symlinked into\nthe site-packages folder.Please be aware that this does not work,\ninstead you either have to put the folder into the pythonpath the\nfile is stored in, or convert your application into a package.The reason for this is that for non-installed packages, the module\nfilename is used to locate the resources and for symlinks the wrong\nfilename is picked up.Support for Automatic Reloading\n\u00b6To help deployment tools you can activate support for automatic\nreloading.Whenever something changes the.wsgifile,mod_wsgiwill\nreload all the daemon processes for us.For that, just add the following directive to yourDirectorysection:WSGIScriptReloadingOnWorking with Virtual Environments\n\u00b6Virtual environments have the advantage that they never install the\nrequired dependencies system wide so you have a better control over what\nis used where.If you want to use a virtual environment with mod_wsgi\nyou have to modify your.wsgifile slightly.Add the following lines to the top of your.wsgifile:activate_this='/path/to/env/bin/activate_this.py'execfile\n(\nactivate_this\n,dict\n(\n__file__\n=\nactivate_this\n))For Python 3 add the following lines to the top of your.wsgifile:activate_this='/path/to/env/bin/activate_this.py'withopen\n(\nactivate_this\n)asfile_\n:exec\n(\nfile_\n.\nread\n(),dict\n(\n__file__\n=\nactivate_this\n))This sets up the load paths according to the settings of the virtual\nenvironment.Keep in mind that the path has to be absolute.Contentsmod_wsgi (Apache)Installingmod_wsgiCreating a.wsgifileConfiguring ApacheTroubleshootingSupport for Automatic ReloadingWorking with Virtual EnvironmentsNavigationOverviewDeployment OptionsPrevious:uWSGINext:FastCGIVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/deploying/mod_wsgi/"},
{"text": "Application Errors \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbApplication Errors\n\u00b6ChangelogNew in version 0.3.Applications fail, servers fail.Sooner or later you will see an exception\nin production.Even if your code is 100% correct, you will still see\nexceptions from time to time.Why?Because everything else involved will\nfail.Here are some situations where perfectly fine code can lead to server\nerrors:the client terminated the request early and the application was still\nreading from the incoming datathe database server was overloaded and could not handle the querya filesystem is fulla harddrive crasheda backend server overloadeda programming error in a library you are usingnetwork connection of the server to another system failedAnd that\u2019s just a small sample of issues you could be facing.So how do we\ndeal with that sort of problem?By default if your application runs in\nproduction mode, Flask will display a very simple page for you and log the\nexception to thelogger\n.But there is more you can do, and we will cover some better setups to deal\nwith errors.Error Logging Tools\n\u00b6Sending error mails, even if just for critical ones, can become\noverwhelming if enough users are hitting the error and log files are\ntypically never looked at. This is why we recommend usingSentryfor dealing with application errors.It\u2019s\navailable as an Open Source projecton GitHuband is also available as ahosted versionwhich you can try for free. Sentry\naggregates duplicate errors, captures the full stack trace and local\nvariables for debugging, and sends you mails based on new errors or\nfrequency thresholds.To use Sentry you need to install theravenclient with extraflaskdependencies:$ pip install raven[flask]And then add this to your Flask app:fromraven.contrib.flaskimportSentrysentry=Sentry\n(\napp\n,dsn\n=\n'YOUR_DSN_HERE'\n)Or if you are using factories you can also init it later:fromraven.contrib.flaskimportSentrysentry=Sentry\n(\ndsn\n=\n'YOUR_DSN_HERE'\n)defcreate_app\n():app=Flask\n(\n__name__\n)sentry\n.\ninit_app\n(\napp\n)...returnappTheYOUR_DSN_HEREvalue needs to be replaced with the DSN value you get\nfrom your Sentry installation.Afterwards failures are automatically reported to Sentry and from there\nyou can receive error notifications.Error handlers\n\u00b6You might want to show custom error pages to the user when an error occurs.\nThis can be done by registering error handlers.An error handler is a normal view function that return a response, but instead\nof being registered for a route, it is registered for an exception or HTTP\nstatus code that would is raised while trying to handle a request.Registering\n\u00b6Register handlers by decorating a function witherrorhandler()\n. Or useregister_error_handler()to register the function later.\nRemember to set the error code when returning the response.@app\n.\nerrorhandler\n(\nwerkzeug\n.\nexceptions\n.\nBadRequest\n)defhandle_bad_request\n(\ne\n):return'bad request!'\n,400# or, without the decoratorapp\n.\nregister_error_handler\n(\n400\n,handle_bad_request\n)werkzeug.exceptions.HTTPExceptionsubclasses likeBadRequestand their HTTP codes are interchangeable\nwhen registering handlers. (\nBadRequest.code==400\n)Non-standard HTTP codes cannot be registered by code because they are not known\nby Werkzeug. Instead, define a subclass ofHTTPExceptionwith the appropriate code and\nregister and raise that exception class.classInsufficientStorage\n(\nwerkzeug\n.\nexceptions\n.\nHTTPException\n):code=507description='Not enough storage space.'app\n.\nregister_error_handler\n(\nInsuffcientStorage\n,handle_507\n)raiseInsufficientStorage\n()Handlers can be registered for any exception class, not justHTTPExceptionsubclasses or HTTP status\ncodes. Handlers can be registered for a specific class, or for all subclasses\nof a parent class.Handling\n\u00b6When an exception is caught by Flask while handling a request, it is first\nlooked up by code. If no handler is registered for the code, it is looked up\nby its class hierarchy; the most specific handler is chosen. If no handler is\nregistered,HTTPExceptionsubclasses show a\ngeneric message about their code, while other exceptions are converted to a\ngeneric 500 Internal Server Error.For example, if an instance ofConnectionRefusedErroris raised, and a handler\nis registered forConnectionErrorandConnectionRefusedError\n,\nthe more specificConnectionRefusedErrorhandler is called with the\nexception instance to generate the response.Handlers registered on the blueprint take precedence over those registered\nglobally on the application, assuming a blueprint is handling the request that\nraises the exception. However, the blueprint cannot handle 404 routing errors\nbecause the 404 occurs at the routing level before the blueprint can be\ndetermined.ChangelogChanged in version 0.11:Handlers are prioritized by specificity of the exception classes they are\nregistered for instead of the order they are registered in.Logging\n\u00b6SeeLoggingfor information on how to log exceptions, such as by\nemailing them to admins.Debugging Application Errors\n\u00b6For production applications, configure your application with logging and\nnotifications as described inApplication Errors\n.This section provides\npointers when debugging deployment configuration and digging deeper with a\nfull-featured Python debugger.When in Doubt, Run Manually\n\u00b6Having problems getting your application configured for production?If you\nhave shell access to your host, verify that you can run your application\nmanually from the shell in the deployment environment.Be sure to run under\nthe same user account as the configured deployment to troubleshoot permission\nissues.You can use Flask\u2019s builtin development server withdebug=Trueon\nyour production host, which is helpful in catching configuration issues, butbe sure to do this temporarily in a controlled environment.Do not run in\nproduction withdebug=True\n.Working with Debuggers\n\u00b6To dig deeper, possibly to trace code execution, Flask provides a debugger out\nof the box (seeDebug Mode\n).If you would like to use another Python\ndebugger, note that debuggers interfere with each other.You have to set some\noptions in order to use your favorite debugger:debug- whether to enable debug mode and catch exceptionsuse_debugger- whether to use the internal Flask debuggeruse_reloader- whether to reload and fork the process on exceptiondebugmust be True (i.e., exceptions must be caught) in order for the other\ntwo options to have any value.If you\u2019re using Aptana/Eclipse for debugging you\u2019ll need to set bothuse_debuggeranduse_reloaderto False.A possible useful pattern for configuration is to set the following in your\nconfig.yaml (change the block as appropriate for your application, of course):FLASK\n:DEBUG\n:TrueDEBUG_WITH_APTANA\n:TrueThen in your application\u2019s entry-point (main.py), you could have something like:if__name__==\"__main__\"\n:# To allow aptana to receive errors, set use_debugger=Falseapp=create_app\n(\nconfig\n=\n\"config.yaml\"\n)ifapp\n.\ndebug\n:use_debugger=Truetry\n:# Disable Flask's debugger if external debugger is requesteduse_debugger=not\n(\napp\n.\nconfig\n.\nget\n(\n'DEBUG_WITH_APTANA'\n))except\n:passapp\n.\nrun\n(\nuse_debugger\n=\nuse_debugger\n,debug\n=\napp\n.\ndebug\n,use_reloader\n=\nuse_debugger\n,host\n=\n'0.0.0.0'\n)ContentsApplication ErrorsError Logging ToolsError handlersRegisteringHandlingLoggingDebugging Application ErrorsWhen in Doubt, Run ManuallyWorking with DebuggersNavigationOverviewPrevious:Testing Flask ApplicationsNext:LoggingVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/errorhandling/"},
{"text": "Deploy to Production \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTutorial\u00bbDeploy to Production\n\u00b6This part of the tutorial assumes you have a server that you want to\ndeploy your application to. It gives an overview of how to create the\ndistribution file and install it, but won\u2019t go into specifics about\nwhat server or software to use. You can set up a new environment on your\ndevelopment computer to try out the instructions below, but probably\nshouldn\u2019t use it for hosting a real public application. SeeDeployment Optionsfor a list of many different ways to host your\napplication.Build and Install\n\u00b6When you want to deploy your application elsewhere, you build a\ndistribution file. The current standard for Python distribution is thewheelformat, with the.whlextension. Make sure the wheel library\nis installed first:pip install wheelRunningsetup.pywith Python gives you a command line tool to issue\nbuild-related commands. Thebdist_wheelcommand will build a wheel\ndistribution file.python setup.py bdist_wheelYou can find the file indist/flaskr-1.0.0-py3-none-any.whl\n. The\nfile name is the name of the project, the version, and some tags about\nthe file can install.Copy this file to another machine,set up a new virtualenv\n, then install the\nfile withpip\n.pip install flaskr-1.0.0-py3-none-any.whlPip will install your project along with its dependencies.Since this is a different machine, you need to runinit-dbagain to\ncreate the database in the instance folder.export FLASK_APP=flaskr\nflask init-dbWhen Flask detects that it\u2019s installed (not in editable mode), it uses\na different directory for the instance folder. You can find it atvenv/var/flaskr-instanceinstead.Configure the Secret Key\n\u00b6In the beginning of the tutorial that you gave a default value forSECRET_KEY\n. This should be changed to some random bytes in\nproduction. Otherwise, attackers could use the public'dev'key to\nmodify the session cookie, or anything else that uses the secret key.You can use the following command to output a random secret key:python -c 'import os; print(os.urandom(16))'b'_5#y2L\"F4Q8z\\n\\xec]/'Create theconfig.pyfile in the instance folder, which the factory\nwill read from if it exists. Copy the generated value into it.venv/var/flaskr-instance/config.py\n\u00b6SECRET_KEY=b\n'_5#y2L\"F4Q8z\n\\n\\xec\n]/'You can also set any other necessary configuration here, althoughSECRET_KEYis the only one needed for Flaskr.Run with a Production Server\n\u00b6When running publicly rather than in development, you should not use the\nbuilt-in development server (\nflaskrun\n). The development server is\nprovided by Werkzeug for convenience, but is not designed to be\nparticularly efficient, stable, or secure.Instead, use a production WSGI server. For example, to useWaitress\n,\nfirst install it in the virtual environment:pip install waitressYou need to tell Waitress about your application, but it doesn\u2019t useFLASK_APPlikeflaskrundoes. You need to tell it to import and\ncall the application factory to get an application object.waitress-serve --call 'flaskr:create_app'Serving on http://0.0.0.0:8080SeeDeployment Optionsfor a list of many different ways to host\nyour application. Waitress is just an example, chosen for the tutorial\nbecause it supports both Windows and Linux. There are many more WSGI\nservers and deployment options that you may choose for your project.Continue toKeep Developing!\n.ContentsDeploy to ProductionBuild and InstallConfigure the Secret KeyRun with a Production ServerNavigationOverviewTutorialPrevious:Test CoverageNext:Keep Developing!VersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/tutorial/deploy/"},
{"text": "Testing Flask Applications \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTesting Flask Applications\n\u00b6Something that is untested is broken.The origin of this quote is unknown and while it is not entirely correct, it\nis also not far from the truth.Untested applications make it hard to\nimprove existing code and developers of untested applications tend to\nbecome pretty paranoid.If an application has automated tests, you can\nsafely make changes and instantly know if anything breaks.Flask provides a way to test your application by exposing the Werkzeug\ntestClientand handling the context locals for you.\nYou can then use that with your favourite testing solution.In this documentation we will use thepytestpackage as the base\nframework for our tests. You can install it withpip\n, like so:pipinstallpytestThe Application\n\u00b6First, we need an application to test; we will use the application from\ntheTutorial\n.If you don\u2019t have that application yet, get the\nsource code fromthe examples\n.The Testing Skeleton\n\u00b6We begin by adding a tests directory under the application root.Then\ncreate a Python file to store our tests (\ntest_flaskr.py\n). When we\nformat the filename liketest_*.py\n, it will be auto-discoverable by\npytest.Next, we create apytest fixturecalledclient()that configures\nthe application for testing and initializes a new database.:importosimporttempfileimportpytestfromflaskrimportflaskr@pytest\n.\nfixturedefclient\n():db_fd\n,flaskr\n.\napp\n.\nconfig\n[\n'DATABASE'\n]=tempfile\n.\nmkstemp\n()flaskr\n.\napp\n.\nconfig\n[\n'TESTING'\n]=Trueclient=flaskr\n.\napp\n.\ntest_client\n()withflaskr\n.\napp\n.\napp_context\n():flaskr\n.\ninit_db\n()yieldclientos\n.\nclose\n(\ndb_fd\n)os\n.\nunlink\n(\nflaskr\n.\napp\n.\nconfig\n[\n'DATABASE'\n])This client fixture will be called by each individual test.It gives us a\nsimple interface to the application, where we can trigger test requests to the\napplication.The client will also keep track of cookies for us.During setup, theTESTINGconfig flag is activated.What\nthis does is disable error catching during request handling, so that\nyou get better error reports when performing test requests against the\napplication.Because SQLite3 is filesystem-based, we can easily use thetempfilemodule\nto create a temporary database and initialize it.Themkstemp()function does two things for us: it returns a\nlow-level file handle and a random file name, the latter we use as\ndatabase name.We just have to keep thedb_fdaround so that we can use\ntheos.close()function to close the file.To delete the database after the test, the fixture closes the file and removes\nit from the filesystem.If we now run the test suite, we should see the following output:$ pytest================ test session starts ================\nrootdir: ./flask/examples/flaskr, inifile: setup.cfg\ncollected 0 items=========== no tests ran in 0.07 seconds ============Even though it did not run any actual tests, we already know that ourflaskrapplication is syntactically valid, otherwise the import would have died\nwith an exception.The First Test\n\u00b6Now it\u2019s time to start testing the functionality of the application.\nLet\u2019s check that the application shows \u201cNo entries here so far\u201d if we\naccess the root of the application (\n/\n).To do this, we add a new\ntest function totest_flaskr.py\n, like this:deftest_empty_db\n(\nclient\n):\"\"\"Start with a blank database.\"\"\"rv=client\n.\nget\n(\n'/'\n)assertb\n'No entries here so far'inrv\n.\ndataNotice that our test functions begin with the wordtest\n; this allowspytestto automatically identify the function as a test to run.By usingclient.getwe can send an HTTPGETrequest to the application with\nthe given path.The return value will be aresponse_classobject.\nWe can now use thedataattribute to inspect\nthe return value (as string) from the application.In this case, we ensure that'Noentriesheresofar'is part of the output.Run it again and you should see one passing test:$ pytest -v================ test session starts ================\nrootdir: ./flask/examples/flaskr, inifile: setup.cfg\ncollected 1 itemstests/test_flaskr.py::test_empty_db PASSED============= 1 passed in 0.10 seconds ==============Logging In and Out\n\u00b6The majority of the functionality of our application is only available for\nthe administrative user, so we need a way to log our test client in and out\nof the application.To do this, we fire some requests to the login and logout\npages with the required form data (username and password).And because the\nlogin and logout pages redirect, we tell the client tofollow_redirects\n.Add the following two functions to yourtest_flaskr.pyfile:deflogin\n(\nclient\n,username\n,password\n):returnclient\n.\npost\n(\n'/login'\n,data\n=\ndict\n(username\n=\nusername\n,password\n=\npassword),follow_redirects\n=\nTrue\n)deflogout\n(\nclient\n):returnclient\n.\nget\n(\n'/logout'\n,follow_redirects\n=\nTrue\n)Now we can easily test that logging in and out works and that it fails with\ninvalid credentials.Add this new test function:deftest_login_logout\n(\nclient\n):\"\"\"Make sure login and logout works.\"\"\"rv=login\n(\nclient\n,flaskr\n.\napp\n.\nconfig\n[\n'USERNAME'\n],flaskr\n.\napp\n.\nconfig\n[\n'PASSWORD'\n])assertb\n'You were logged in'inrv\n.\ndatarv=logout\n(\nclient\n)assertb\n'You were logged out'inrv\n.\ndatarv=login\n(\nclient\n,flaskr\n.\napp\n.\nconfig\n[\n'USERNAME'\n]+'x'\n,flaskr\n.\napp\n.\nconfig\n[\n'PASSWORD'\n])assertb\n'Invalid username'inrv\n.\ndatarv=login\n(\nclient\n,flaskr\n.\napp\n.\nconfig\n[\n'USERNAME'\n],flaskr\n.\napp\n.\nconfig\n[\n'PASSWORD'\n]+'x'\n)assertb\n'Invalid password'inrv\n.\ndataTest Adding Messages\n\u00b6We should also test that adding messages works.Add a new test function\nlike this:deftest_messages\n(\nclient\n):\"\"\"Test that messages work.\"\"\"login\n(\nclient\n,flaskr\n.\napp\n.\nconfig\n[\n'USERNAME'\n],flaskr\n.\napp\n.\nconfig\n[\n'PASSWORD'\n])rv=client\n.\npost\n(\n'/add'\n,data\n=\ndict\n(title\n=\n'<Hello>'\n,text\n=\n'<strong>HTML</strong> allowed here'),follow_redirects\n=\nTrue\n)assertb\n'No entries here so far'notinrv\n.\ndataassertb\n'&lt;Hello&gt;'inrv\n.\ndataassertb\n'<strong>HTML</strong> allowed here'inrv\n.\ndataHere we check that HTML is allowed in the text but not in the title,\nwhich is the intended behavior.Running that should now give us three passing tests:$ pytest -v================ test session starts ================\nrootdir: ./flask/examples/flaskr, inifile: setup.cfg\ncollected 3 itemstests/test_flaskr.py::test_empty_db PASSED\ntests/test_flaskr.py::test_login_logout PASSED\ntests/test_flaskr.py::test_messages PASSED============= 3 passed in 0.23 seconds ==============Other Testing Tricks\n\u00b6Besides using the test client as shown above, there is also thetest_request_context()method that can be used\nin combination with thewithstatement to activate a request context\ntemporarily.With this you can access therequest\n,gandsessionobjects like in view\nfunctions.Here is a full example that demonstrates this approach:importflaskapp=flask\n.\nFlask\n(\n__name__\n)withapp\n.\ntest_request_context\n(\n'/?name=Peter'\n):assertflask\n.\nrequest\n.\npath=='/'assertflask\n.\nrequest\n.\nargs\n[\n'name'\n]=='Peter'All the other objects that are context bound can be used in the same\nway.If you want to test your application with different configurations and\nthere does not seem to be a good way to do that, consider switching to\napplication factories (seeApplication Factories\n).Note however that if you are using a test request context, thebefore_request()andafter_request()functions are not called automatically.Howeverteardown_request()functions are indeed executed when\nthe test request context leaves thewithblock.If you do want thebefore_request()functions to be called as well, you\nneed to callpreprocess_request()yourself:app=flask\n.\nFlask\n(\n__name__\n)withapp\n.\ntest_request_context\n(\n'/?name=Peter'\n):app\n.\npreprocess_request\n()...This can be necessary to open database connections or something similar\ndepending on how your application was designed.If you want to call theafter_request()functions you\nneed to call intoprocess_response()which however\nrequires that you pass it a response object:app=flask\n.\nFlask\n(\n__name__\n)withapp\n.\ntest_request_context\n(\n'/?name=Peter'\n):resp=Response\n(\n'...'\n)resp=app\n.\nprocess_response\n(\nresp\n)...This in general is less useful because at that point you can directly\nstart using the test client.Faking Resources and Context\n\u00b6ChangelogNew in version 0.10.A very common pattern is to store user authorization information and\ndatabase connections on the application context or theflask.gobject.The general pattern for this is to put the object on there on\nfirst usage and then to remove it on a teardown.Imagine for instance\nthis code to get the current user:defget_user\n():user=getattr\n(\ng\n,'user'\n,None\n)ifuserisNone\n:user=fetch_current_user_from_database\n()g\n.\nuser=userreturnuserFor a test it would be nice to override this user from the outside without\nhaving to change some code.This can be accomplished with\nhooking theflask.appcontext_pushedsignal:fromcontextlibimportcontextmanagerfromflaskimportappcontext_pushed\n,g@contextmanagerdefuser_set\n(\napp\n,user\n):defhandler\n(\nsender\n,**\nkwargs\n):g\n.\nuser=userwithappcontext_pushed\n.\nconnected_to\n(\nhandler\n,app\n):yieldAnd then to use it:fromflaskimportjson\n,jsonify@app\n.\nroute\n(\n'/users/me'\n)defusers_me\n():returnjsonify\n(\nusername\n=\ng\n.\nuser\n.\nusername\n)withuser_set\n(\napp\n,my_user\n):withapp\n.\ntest_client\n()asc\n:resp=c\n.\nget\n(\n'/users/me'\n)data=json\n.\nloads\n(\nresp\n.\ndata\n)self\n.\nassert_equal\n(\ndata\n[\n'username'\n],my_user\n.\nusername\n)Keeping the Context Around\n\u00b6ChangelogNew in version 0.4.Sometimes it is helpful to trigger a regular request but still keep the\ncontext around for a little longer so that additional introspection can\nhappen.With Flask 0.4 this is possible by using thetest_client()with awithblock:app=flask\n.\nFlask\n(\n__name__\n)withapp\n.\ntest_client\n()asc\n:rv=c\n.\nget\n(\n'/?tequila=42'\n)assertrequest\n.\nargs\n[\n'tequila'\n]=='42'If you were to use just thetest_client()without\nthewithblock, theassertwould fail with an error becauserequestis no longer available (because you are trying to use it outside of the actual request).Accessing and Modifying Sessions\n\u00b6ChangelogNew in version 0.8.Sometimes it can be very helpful to access or modify the sessions from the\ntest client.Generally there are two ways for this.If you just want to\nensure that a session has certain keys set to certain values you can just\nkeep the context around and accessflask.session\n:withapp\n.\ntest_client\n()asc\n:rv=c\n.\nget\n(\n'/'\n)assertflask\n.\nsession\n[\n'foo'\n]==42This however does not make it possible to also modify the session or to\naccess the session before a request was fired.Starting with Flask 0.8 we\nprovide a so called \u201csession transaction\u201d which simulates the appropriate\ncalls to open a session in the context of the test client and to modify\nit.At the end of the transaction the session is stored.This works\nindependently of the session backend used:withapp\n.\ntest_client\n()asc\n:withc\n.\nsession_transaction\n()assess\n:sess\n[\n'a_key'\n]='a value'# once this is reached the session was storedNote that in this case you have to use thesessobject instead of theflask.sessionproxy.The object however itself will provide the\nsame interface.Testing JSON APIs\n\u00b6New in version 1.0.Changelog\nFlask has great support for JSON, and is a popular choice for building JSON\nAPIs. Making requests with JSON data and examining JSON data in responses is\nvery convenient:fromflaskimportrequest\n,jsonify@app\n.\nroute\n(\n'/api/auth'\n)defauth\n():json_data=request\n.\nget_json\n()email=json_data\n[\n'email'\n]password=json_data\n[\n'password'\n]returnjsonify\n(\ntoken\n=\ngenerate_token\n(\nemail\n,password\n))withapp\n.\ntest_client\n()asc\n:rv=c\n.\npost\n(\n'/api/auth'\n,json\n=\n{'username'\n:'flask'\n,'password'\n:'secret'})json_data=rv\n.\nget_json\n()assertverify_token\n(\nemail\n,json_data\n[\n'token'\n])Passing thejsonargument in the test client methods sets the request data\nto the JSON-serialized object and sets the content type toapplication/json\n. You can get the JSON data from the request or response\nwithget_json\n.Testing CLI Commands\n\u00b6Click comes withutilities for testingyour CLI commands. ACliRunnerruns commands in isolation and\ncaptures the output in aResultobject.Flask providestest_cli_runner()to create aFlaskCliRunnerthat passes the Flask app to the\nCLI automatically. Use itsinvoke()method to call commands in the same way they would be called from the\ncommand line.importclick@app\n.\ncli\n.\ncommand\n(\n'hello'\n)@click\n.\noption\n(\n'--name'\n,default\n=\n'World'\n)defhello_command\n(\nname\n)click\n.\necho\n(\nf\n'Hello,{name}\n!'\n)deftest_hello\n():runner=app\n.\ntest_cli_runner\n()# invoke the command directlyresult=runner\n.\ninvoke\n(\nhello_command\n,[\n'--name'\n,'Flask'\n])assert'Hello, Flask'inresult\n.\noutput# or by nameresult=runner\n.\ninvoke\n(\nargs\n=\n[\n'hello'\n])assert'World'inresult\n.\noutputIn the example above, invoking the command by name is useful because it\nverifies that the command was correctly registered with the app.If you want to test how your command parses parameters, without running\nthe command, use itsmake_context()method.\nThis is useful for testing complex validation rules and custom types.defupper\n(\nctx\n,param\n,value\n):ifvalueisnotNone\n:returnvalue\n.\nupper\n()@app\n.\ncli\n.\ncommand\n(\n'hello'\n)@click\n.\noption\n(\n'--name'\n,default\n=\n'World'\n,callback\n=\nupper\n)defhello_command\n(\nname\n)click\n.\necho\n(\nf\n'Hello,{name}\n!'\n)deftest_hello_params\n():context=hello_command\n.\nmake_context\n(\n'hello'\n,[\n'--name'\n,'flask'\n])assertcontext\n.\nparams\n[\n'name'\n]=='FLASK'ContentsTesting Flask ApplicationsThe ApplicationThe Testing SkeletonThe First TestLogging In and OutTest Adding MessagesOther Testing TricksFaking Resources and ContextKeeping the Context AroundAccessing and Modifying SessionsTesting JSON APIsTesting CLI CommandsNavigationOverviewPrevious:TemplatesNext:Application ErrorsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/testing/"},
{"text": "Blueprints and Views \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTutorial\u00bbBlueprints and Views\n\u00b6A view function is the code you write to respond to requests to your\napplication. Flask uses patterns to match the incoming request URL to\nthe view that should handle it. The view returns data that Flask turns\ninto an outgoing response. Flask can also go the other direction and\ngenerate a URL to a view based on its name and arguments.Create a Blueprint\n\u00b6ABlueprintis a way to organize a group of related views and\nother code. Rather than registering views and other code directly with\nan application, they are registered with a blueprint. Then the blueprint\nis registered with the application when it is available in the factory\nfunction.Flaskr will have two blueprints, one for authentication functions and\none for the blog posts functions. The code for each blueprint will go\nin a separate module. Since the blog needs to know about authentication,\nyou\u2019ll write the authentication one first.flaskr/auth.py\n\u00b6importfunctoolsfromflaskimport(Blueprint\n,flash\n,g\n,redirect\n,render_template\n,request\n,session\n,url_for)fromwerkzeug.securityimportcheck_password_hash\n,generate_password_hashfromflaskr.dbimportget_dbbp=Blueprint\n(\n'auth'\n,__name__\n,url_prefix\n=\n'/auth'\n)This creates aBlueprintnamed'auth'\n. Like the application\nobject, the blueprint needs to know where it\u2019s defined, so__name__is passed as the second argument. Theurl_prefixwill be prepended\nto all the URLs associated with the blueprint.Import and register the blueprint from the factory usingapp.register_blueprint()\n. Place the\nnew code at the end of the factory function before returning the app.flaskr/__init__.py\n\u00b6defcreate_app\n():app=...# existing code omittedfrom.importauthapp\n.\nregister_blueprint\n(\nauth\n.\nbp\n)returnappThe authentication blueprint will have views to register new users and\nto log in and log out.The First View: Register\n\u00b6When the user visits the/auth/registerURL, theregisterview\nwill returnHTMLwith a form for them to fill out. When they submit\nthe form, it will validate their input and either show the form again\nwith an error message or create the new user and go to the login page.For now you will just write the view code. On the next page, you\u2019ll\nwrite templates to generate the HTML form.flaskr/auth.py\n\u00b6@bp.route\n(\n'/register'\n,methods\n=\n(\n'GET'\n,'POST'\n))defregister\n():ifrequest\n.\nmethod=='POST'\n:username=request\n.\nform\n[\n'username'\n]password=request\n.\nform\n[\n'password'\n]db=get_db\n()error=Noneifnotusername\n:error='Username is required.'elifnotpassword\n:error='Password is required.'elifdb\n.\nexecute\n('SELECT id FROM user WHERE username = ?'\n,(\nusername\n,))\n.\nfetchone\n()isnotNone\n:error='User {} is already registered.'\n.\nformat\n(\nusername\n)iferrorisNone\n:db\n.\nexecute\n('INSERT INTO user (username, password) VALUES (?, ?)'\n,(\nusername\n,generate_password_hash\n(\npassword\n)))db\n.\ncommit\n()returnredirect\n(\nurl_for\n(\n'auth.login'\n))flash\n(\nerror\n)returnrender_template\n(\n'auth/register.html'\n)Here\u2019s what theregisterview function is doing:@bp.routeassociates the URL/registerwith theregisterview function. When Flask receives a request\nto/auth/register\n, it will call theregisterview and use\nthe return value as the response.If the user submitted the form,request.methodwill be'POST'\n. In this\ncase, start validating the input.request.formis a special type ofdictmapping submitted form keys and values. The user will\ninput theirusernameandpassword\n.Validate thatusernameandpasswordare not empty.Validate thatusernameis not already registered by querying the\ndatabase and checking if a result is returned.db.executetakes a SQL query\nwith?placeholders for any user input, and a tuple of values\nto replace the placeholders with. The database library will take\ncare of escaping the values so you are not vulnerable to aSQL injection attack\n.fetchone()returns one row from the query.\nIf the query returned no results, it returnsNone\n. Later,fetchall()is used, which returns a list of\nall results.If validation succeeds, insert the new user data into the database.\nFor security, passwords should never be stored in the database\ndirectly. Instead,generate_password_hash()is used to\nsecurely hash the password, and that hash is stored. Since this\nquery modifies data,db.commit()needs to be called afterwards to save the changes.After storing the user, they are redirected to the login page.url_for()generates the URL for the login view based on its\nname. This is preferable to writing the URL directly as it allows\nyou to change the URL later without changing all code that links to\nit.redirect()generates a redirect response to the generated\nURL.If validation fails, the error is shown to the user.flash()stores messages that can be retrieved when rendering the template.When the user initially navigates toauth/register\n, or\nthere was an validation error, an HTML page with the registration\nform should be shown.render_template()will render a template\ncontaining the HTML, which you\u2019ll write in the next step of the\ntutorial.Login\n\u00b6This view follows the same pattern as theregisterview above.flaskr/auth.py\n\u00b6@bp.route\n(\n'/login'\n,methods\n=\n(\n'GET'\n,'POST'\n))deflogin\n():ifrequest\n.\nmethod=='POST'\n:username=request\n.\nform\n[\n'username'\n]password=request\n.\nform\n[\n'password'\n]db=get_db\n()error=Noneuser=db\n.\nexecute\n('SELECT * FROM user WHERE username = ?'\n,(\nusername\n,))\n.\nfetchone\n()ifuserisNone\n:error='Incorrect username.'elifnotcheck_password_hash\n(\nuser\n[\n'password'\n],password\n):error='Incorrect password.'iferrorisNone\n:session\n.\nclear\n()session\n[\n'user_id'\n]=user\n[\n'id'\n]returnredirect\n(\nurl_for\n(\n'index'\n))flash\n(\nerror\n)returnrender_template\n(\n'auth/login.html'\n)There are a few differences from theregisterview:The user is queried first and stored in a variable for later use.check_password_hash()hashes the submitted\npassword in the same way as the stored hash and securely compares\nthem. If they match, the password is valid.sessionis adictthat stores data across requests.\nWhen validation succeeds, the user\u2019sidis stored in a new\nsession. The data is stored in acookiethat is sent to the\nbrowser, and the browser then sends it back with subsequent requests.\nFlask securelysignsthe data so that it can\u2019t be tampered with.Now that the user\u2019sidis stored in thesession\n, it will be\navailable on subsequent requests. At the beginning of each request, if\na user is logged in their information should be loaded and made\navailable to other views.flaskr/auth.py\n\u00b6@bp.before_app_requestdefload_logged_in_user\n():user_id=session\n.\nget\n(\n'user_id'\n)ifuser_idisNone\n:g\n.\nuser=Noneelse\n:g\n.\nuser=get_db\n()\n.\nexecute\n('SELECT * FROM user WHERE id = ?'\n,(\nuser_id\n,))\n.\nfetchone\n()bp.before_app_request()registers\na function that runs before the view function, no matter what URL is\nrequested.load_logged_in_userchecks if a user id is stored in thesessionand gets that user\u2019s data from the database, storing it\nong.user\n, which lasts for the length of the request. If\nthere is no user id, or if the id doesn\u2019t exist,g.userwill beNone\n.Logout\n\u00b6To log out, you need to remove the user id from thesession\n.\nThenload_logged_in_userwon\u2019t load a user on subsequent requests.flaskr/auth.py\n\u00b6@bp.route\n(\n'/logout'\n)deflogout\n():session\n.\nclear\n()returnredirect\n(\nurl_for\n(\n'index'\n))Require Authentication in Other Views\n\u00b6Creating, editing, and deleting blog posts will require a user to be\nlogged in. Adecoratorcan be used to check this for each view it\u2019s\napplied to.flaskr/auth.py\n\u00b6deflogin_required\n(\nview\n):@functools.wraps\n(\nview\n)defwrapped_view\n(\n**\nkwargs\n):ifg\n.\nuserisNone\n:returnredirect\n(\nurl_for\n(\n'auth.login'\n))returnview\n(\n**\nkwargs\n)returnwrapped_viewThis decorator returns a new view function that wraps the original view\nit\u2019s applied to. The new function checks if a user is loaded and\nredirects to the login page otherwise. If a user is loaded the original\nview is called and continues normally. You\u2019ll use this decorator when\nwriting the blog views.Endpoints and URLs\n\u00b6Theurl_for()function generates the URL to a view based on a name\nand arguments. The name associated with a view is also called theendpoint\n, and by default it\u2019s the same as the name of the view\nfunction.For example, thehello()view that was added to the app\nfactory earlier in the tutorial has the name'hello'and can be\nlinked to withurl_for('hello')\n. If it took an argument, which\nyou\u2019ll see later, it would be linked to usingurl_for('hello',who='World')\n.When using a blueprint, the name of the blueprint is prepended to the\nname of the function, so the endpoint for theloginfunction you\nwrote above is'auth.login'because you added it to the'auth'blueprint.Continue toTemplates\n.ContentsBlueprints and ViewsCreate a BlueprintThe First View: RegisterLoginLogoutRequire Authentication in Other ViewsEndpoints and URLsNavigationOverviewTutorialPrevious:Define and Access the DatabaseNext:TemplatesVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/tutorial/views/"},
{"text": "Logging \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbLogging\n\u00b6Flask uses standard Pythonlogging\n. All Flask-related messages are\nlogged under the'flask'logger namespace.Flask.loggerreturns the logger named'flask.app'\n, and can be used to log messages for your application.@app\n.\nroute\n(\n'/login'\n,methods\n=\n[\n'POST'\n])deflogin\n():user=get_user\n(\nrequest\n.\nform\n[\n'username'\n])ifuser\n.\ncheck_password\n(\nrequest\n.\nform\n[\n'password'\n]):login_user\n(\nuser\n)app\n.\nlogger\n.\ninfo\n(\n'\n%slogged in successfully'\n,user\n.\nusername\n)returnredirect\n(\nurl_for\n(\n'index'\n))else\n:app\n.\nlogger\n.\ninfo\n(\n'\n%sfailed to log in'\n,user\n.\nusername\n)abort\n(\n401\n)Basic Configuration\n\u00b6When you want to configure logging for your project, you should do it as soon\nas possible when the program starts. Ifapp.loggeris accessed before logging is configured, it will add a default handler. If\npossible, configure logging before creating the application object.This example usesdictConfig()to create a logging\nconfiguration similar to Flask\u2019s default, except for all logs:fromlogging.configimportdictConfigdictConfig\n({'version'\n:1\n,'formatters'\n:{\n'default'\n:{'format'\n:'[\n%(asctime)s\n]%(levelname)sin%(module)s\n:%(message)s\n'\n,}},'handlers'\n:{\n'wsgi'\n:{'class'\n:'logging.StreamHandler'\n,'stream'\n:'ext://flask.logging.wsgi_errors_stream'\n,'formatter'\n:'default'}},'root'\n:{'level'\n:'INFO'\n,'handlers'\n:[\n'wsgi'\n]}})app=Flask\n(\n__name__\n)Default Configuration\n\u00b6If you do not configure logging yourself, Flask will add aStreamHandlertoapp.loggerautomatically. During requests, it will write to the stream specified by the\nWSGI server inenviron['wsgi.errors'](which is usuallysys.stderr\n). Outside a request, it will log tosys.stderr\n.Removing the Default Handler\n\u00b6If you configured logging after accessingapp.logger\n, and need to remove the default\nhandler, you can import and remove it:fromflask.loggingimportdefault_handlerapp\n.\nlogger\n.\nremoveHandler\n(\ndefault_handler\n)Email Errors to Admins\n\u00b6When running the application on a remote server for production, you probably\nwon\u2019t be looking at the log messages very often. The WSGI server will probably\nsend log messages to a file, and you\u2019ll only check that file if a user tells\nyou something went wrong.To be proactive about discovering and fixing bugs, you can configure alogging.handlers.SMTPHandlerto send an email when errors and higher\nare logged.importloggingfromlogging.handlersimportSMTPHandlermail_handler=SMTPHandler\n(mailhost\n=\n'127.0.0.1'\n,fromaddr\n=\n'server-error@example.com'\n,toaddrs\n=\n[\n'admin@example.com'\n],subject\n=\n'Application Error')mail_handler\n.\nsetLevel\n(\nlogging\n.\nERROR\n)mail_handler\n.\nsetFormatter\n(\nlogging\n.\nFormatter\n('[\n%(asctime)s\n]%(levelname)sin%(module)s\n:%(message)s\n'))ifnotapp\n.\ndebug\n:app\n.\nlogger\n.\naddHandler\n(\nmail_handler\n)This requires that you have an SMTP server set up on the same server. See the\nPython docs for more information about configuring the handler.Injecting Request Information\n\u00b6Seeing more information about the request, such as the IP address, may help\ndebugging some errors. You can subclasslogging.Formatterto inject\nyour own fields that can be used in messages. You can change the formatter for\nFlask\u2019s default handler, the mail handler defined above, or any other\nhandler.fromflaskimportrequestfromflask.loggingimportdefault_handlerclassRequestFormatter\n(\nlogging\n.\nFormatter\n):defformat\n(\nself\n,record\n):record\n.\nurl=request\n.\nurlrecord\n.\nremote_addr=request\n.\nremote_addrreturnsuper\n()\n.\nformat\n(\nrecord\n)formatter=RequestFormatter\n('[\n%(asctime)s\n]%(remote_addr)srequested%(url)s\n\\n\n''\n%(levelname)sin%(module)s\n:%(message)s\n')default_handler\n.\nsetFormatter\n(\nformatter\n)mail_handler\n.\nsetFormatter\n(\nformatter\n)Other Libraries\n\u00b6Other libraries may use logging extensively, and you want to see relevant\nmessages from those logs too. The simplest way to do this is to add handlers\nto the root logger instead of only the app logger.fromflask.loggingimportdefault_handlerroot=logging\n.\ngetLogger\n()root\n.\naddHandler\n(\ndefault_handler\n)root\n.\naddHandler\n(\nmail_handler\n)Depending on your project, it may be more useful to configure each logger you\ncare about separately, instead of configuring only the root logger.forloggerin(app\n.\nlogger\n,logging\n.\ngetLogger\n(\n'sqlalchemy'\n),logging\n.\ngetLogger\n(\n'other_package'\n),):logger\n.\naddHandler\n(\ndefault_handler\n)logger\n.\naddHandler\n(\nmail_handler\n)Werkzeug\n\u00b6Werkzeug logs basic request/response information to the'werkzeug'logger.\nIf the root logger has no handlers configured, Werkzeug adds aStreamHandlerto its logger.Flask Extensions\n\u00b6Depending on the situation, an extension may choose to log toapp.loggeror its own named logger. Consult each\nextension\u2019s documentation for details.ContentsLoggingBasic ConfigurationDefault ConfigurationRemoving the Default HandlerEmail Errors to AdminsInjecting Request InformationOther LibrariesWerkzeugFlask ExtensionsNavigationOverviewPrevious:Application ErrorsNext:Configuration HandlingVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/logging/"},
{"text": "uWSGI \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbDeployment Options\u00bbuWSGI\n\u00b6uWSGI is a deployment option on servers likenginx\n,lighttpd\n, andcherokee\n; seeFastCGIandStandalone WSGI Containersfor other options.To use your WSGI application with uWSGI protocol you will\nneed a uWSGI server first. uWSGI is both a protocol and an application server;\nthe application server can serve uWSGI, FastCGI, and HTTP protocols.The most popular uWSGI server isuwsgi\n, which we will use for this\nguide.Make sure to have it installed to follow along.Watch OutPlease make sure in advance that anyapp.run()calls you might\nhave in your application file are inside anif__name__=='__main__':block or moved to a separate file.Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to uWSGI.Starting your app with uwsgi\n\u00b6uwsgiis designed to operate on WSGI callables found in python modules.Given a flask application in myapp.py, use the following command:$ uwsgi -s /tmp/yourapplication.sock --manage-script-name --mount /yourapplication=myapp:appThe--manage-script-namewill move the handling ofSCRIPT_NAMEto uwsgi,\nsince its smarter about that. It is used together with the--mountdirective\nwhich will make requests to/yourapplicationbe directed tomyapp:app\n.\nIf your application is accessible at root level, you can use a single/instead of/yourapplication\n.myapprefers to the name of the file of\nyour flask application (without extension) or the module which providesapp\n.appis the callable inside of your application (usually the line readsapp=Flask(__name__)\n.If you want to deploy your flask application inside of a virtual environment,\nyou need to also add--virtualenv/path/to/virtual/environment\n. You might\nalso need to add--pluginpythonor--pluginpython3depending on which\npython version you use for your project.Configuring nginx\n\u00b6A basic flask nginx configuration looks like this:location = /yourapplication { rewrite ^ /yourapplication/; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {include uwsgi_params;uwsgi_pass unix:/tmp/yourapplication.sock;\n}This configuration binds the application to/yourapplication\n.If you want\nto have it in the URL root its a bit simpler:location / { try_files $uri @yourapplication; }\nlocation @yourapplication {include uwsgi_params;uwsgi_pass unix:/tmp/yourapplication.sock;\n}ContentsuWSGIStarting your app with uwsgiConfiguring nginxNavigationOverviewDeployment OptionsPrevious:Standalone WSGI ContainersNext:mod_wsgi (Apache)VersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/deploying/uwsgi/"},
{"text": "Templates \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTemplates\n\u00b6Flask leverages Jinja2 as template engine.You are obviously free to use\na different template engine, but you still have to install Jinja2 to run\nFlask itself.This requirement is necessary to enable rich extensions.\nAn extension can depend on Jinja2 being present.This section only gives a very quick introduction into how Jinja2\nis integrated into Flask.If you want information on the template\nengine\u2019s syntax itself, head over to the officialJinja2 Template\nDocumentationfor\nmore information.Jinja Setup\n\u00b6Unless customized, Jinja2 is configured by Flask as follows:autoescaping is enabled for all templates ending in.html\n,.htm\n,.xmlas well as.xhtmlwhen usingrender_template()\n.autoescaping is enabled for all strings when usingrender_template_string()\n.a template has the ability to opt in/out autoescaping with the{%autoescape%}tag.Flask inserts a couple of global functions and helpers into the\nJinja2 context, additionally to the values that are present by\ndefault.Standard Context\n\u00b6The following global variables are available within Jinja2 templates\nby default:configThe current configuration object (\nflask.config\n)ChangelogChanged in version 0.10:This is now always available, even in imported templates.New in version 0.6.requestThe current request object (\nflask.request\n).This variable is\nunavailable if the template was rendered without an active request\ncontext.sessionThe current session object (\nflask.session\n).This variable\nis unavailable if the template was rendered without an active request\ncontext.gThe request-bound object for global variables (\nflask.g\n).This\nvariable is unavailable if the template was rendered without an active\nrequest context.url_for\n(\n)Theflask.url_for()function.get_flashed_messages\n(\n)Theflask.get_flashed_messages()function.The Jinja Context BehaviorThese variables are added to the context of variables, they are not\nglobal variables.The difference is that by default these will not\nshow up in the context of imported templates.This is partially caused\nby performance considerations, partially to keep things explicit.What does this mean for you?If you have a macro you want to import,\nthat needs to access the request object you have two possibilities:you explicitly pass the request to the macro as parameter, or\nthe attribute of the request object you are interested in.you import the macro \u201cwith context\u201d.Importing with context looks like this:{%from'_helpers.html'importmy_macrowith context%}Standard Filters\n\u00b6These filters are available in Jinja2 additionally to the filters provided\nby Jinja2 itself:tojson\n(\n)This function converts the given object into JSON representation.This\nis for example very helpful if you try to generate JavaScript on the\nfly.Note that insidescripttags no escaping must take place, so make\nsure to disable escaping with|safebefore Flask 0.10 if you intend\nto use it insidescripttags:<\nscripttype\n=\ntext/javascript\n>doSomethingWith\n(\n{{user.username\n|\ntojson\n|\nsafe}}\n);</\nscript\n>Controlling Autoescaping\n\u00b6Autoescaping is the concept of automatically escaping special characters\nfor you.Special characters in the sense of HTML (or XML, and thus XHTML)\nare&\n,>\n,<\n,\"as well as'\n.Because these characters\ncarry specific meanings in documents on their own you have to replace them\nby so called \u201centities\u201d if you want to use them for text.Not doing so\nwould not only cause user frustration by the inability to use these\ncharacters in text, but can also lead to security problems.(seeCross-Site Scripting (XSS)\n)Sometimes however you will need to disable autoescaping in templates.\nThis can be the case if you want to explicitly inject HTML into pages, for\nexample if they come from a system that generates secure HTML like a\nmarkdown to HTML converter.There are three ways to accomplish that:In the Python code, wrap the HTML string in aMarkupobject before passing it to the template.This is in general the\nrecommended way.Inside the template, use the|safefilter to explicitly mark a\nstring as safe HTML (\n{{myvariable|safe}}\n)Temporarily disable the autoescape system altogether.To disable the autoescape system in templates, you can use the{%autoescape%}block:{%autoescapefalse%}<\np\n>\nautoescaping is disabled here<\np\n>\n{{will_not_be_escaped}}{%endautoescape%}Whenever you do this, please be very cautious about the variables you are\nusing in this block.Registering Filters\n\u00b6If you want to register your own filters in Jinja2 you have two ways to do\nthat.You can either put them by hand into thejinja_envof the application or use thetemplate_filter()decorator.The two following examples work the same and both reverse an object:@app\n.\ntemplate_filter\n(\n'reverse'\n)defreverse_filter\n(\ns\n):returns\n[::\n-\n1\n]defreverse_filter\n(\ns\n):returns\n[::\n-\n1\n]app\n.\njinja_env\n.\nfilters\n[\n'reverse'\n]=reverse_filterIn case of the decorator the argument is optional if you want to use the\nfunction name as name of the filter.Once registered, you can use the filter\nin your templates in the same way as Jinja2\u2019s builtin filters, for example if\nyou have a Python list in context calledmylist\n:{\n%forxinmylist|reverse%\n}{\n%endfor%\n}Context Processors\n\u00b6To inject new variables automatically into the context of a template,\ncontext processors exist in Flask.Context processors run before the\ntemplate is rendered and have the ability to inject new values into the\ntemplate context.A context processor is a function that returns a\ndictionary.The keys and values of this dictionary are then merged with\nthe template context, for all templates in the app:@app\n.\ncontext_processordefinject_user\n():returndict\n(\nuser\n=\ng\n.\nuser\n)The context processor above makes a variable calleduseravailable in\nthe template with the value ofg.user\n.This example is not very\ninteresting becausegis available in templates anyways, but it gives an\nidea how this works.Variables are not limited to values; a context processor can also make\nfunctions available to templates (since Python allows passing around\nfunctions):@app\n.\ncontext_processordefutility_processor\n():defformat_price\n(\namount\n,currency\n=\nu\n'\u20ac'\n):returnu\n'\n{0:.2f}{1}\n'\n.\nformat\n(\namount\n,currency\n)returndict\n(\nformat_price\n=\nformat_price\n)The context processor above makes theformat_pricefunction available to all\ntemplates:{{format_price\n(\n0.33\n)}}You could also buildformat_priceas a template filter (seeRegistering Filters\n), but this demonstrates how to pass functions in a\ncontext processor.ContentsTemplatesJinja SetupStandard ContextStandard FiltersControlling AutoescapingRegistering FiltersContext ProcessorsNavigationOverviewPrevious:Keep Developing!Next:Testing Flask ApplicationsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/templating/"},
{"text": "Keep Developing! \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTutorial\u00bbKeep Developing!\n\u00b6You\u2019ve learned about quite a few Flask and Python concepts throughout\nthe tutorial. Go back and review the tutorial and compare your code with\nthe steps you took to get there. Compare your project to theexample project\n, which might look a bit\ndifferent due to the step-by-step nature of the tutorial.There\u2019s a lot more to Flask than what you\u2019ve seen so far. Even so,\nyou\u2019re now equipped to start developing your own web applications. Check\nout theQuickstartfor an overview of what Flask can do, then\ndive into the docs to keep learning. Flask usesJinja\n,Click\n,Werkzeug\n, andItsDangerousbehind the scenes, and they all have\ntheir own documentation too. You\u2019ll also be interested inExtensionswhich make tasks like working with the database or\nvalidating form data easier and more powerful.If you want to keep developing your Flaskr project, here are some ideas\nfor what to try next:A detail view to show a single post. Click a post\u2019s title to go to\nits page.Like / unlike a post.Comments.Tags. Clicking a tag shows all the posts with that tag.A search box that filters the index page by name.Paged display. Only show 5 posts per page.Upload an image to go along with a post.Format posts using Markdown.An RSS feed of new posts.Have fun and make awesome applications!NavigationOverviewTutorialPrevious:Deploy to ProductionNext:TemplatesVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/tutorial/next/"},
{"text": "Application Setup \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTutorial\u00bbApplication Setup\n\u00b6A Flask application is an instance of theFlaskclass.\nEverything about the application, such as configuration and URLs, will\nbe registered with this class.The most straightforward way to create a Flask application is to create\na globalFlaskinstance directly at the top of your code, like\nhow the \u201cHello, World!\u201d example did on the previous page. While this is\nsimple and useful in some cases, it can cause some tricky issues as the\nproject grows.Instead of creating aFlaskinstance globally, you will create\nit inside a function. This function is known as theapplication\nfactory\n. Any configuration, registration, and other setup the\napplication needs will happen inside the function, then the application\nwill be returned.The Application Factory\n\u00b6It\u2019s time to start coding! Create theflaskrdirectory and add the__init__.pyfile. The__init__.pyserves double duty: it will\ncontain the application factory, and it tells Python that theflaskrdirectory should be treated as a package.mkdir flaskrflaskr/__init__.py\n\u00b6importosfromflaskimportFlaskdefcreate_app\n(\ntest_config\n=\nNone\n):# create and configure the appapp=Flask\n(\n__name__\n,instance_relative_config\n=\nTrue\n)app\n.\nconfig\n.\nfrom_mapping\n(SECRET_KEY\n=\n'dev'\n,DATABASE\n=\nos\n.\npath\n.\njoin\n(\napp\n.\ninstance_path\n,'flaskr.sqlite'\n),)iftest_configisNone\n:# load the instance config, if it exists, when not testingapp\n.\nconfig\n.\nfrom_pyfile\n(\n'config.py'\n,silent\n=\nTrue\n)else\n:# load the test config if passed inapp\n.\nconfig\n.\nfrom_mapping\n(\ntest_config\n)# ensure the instance folder existstry\n:os\n.\nmakedirs\n(\napp\n.\ninstance_path\n)exceptOSError\n:pass# a simple page that says hello@app.route\n(\n'/hello'\n)defhello\n():return'Hello, World!'returnappcreate_appis the application factory function. You\u2019ll add to it\nlater in the tutorial, but it already does a lot.app=Flask(__name__,instance_relative_config=True)creates theFlaskinstance.__name__is the name of the current Python module. The app\nneeds to know where it\u2019s located to set up some paths, and__name__is a convenient way to tell it that.instance_relative_config=Truetells the app that\nconfiguration files are relative to theinstance folder\n. The instance folder\nis located outside theflaskrpackage and can hold local\ndata that shouldn\u2019t be committed to version control, such as\nconfiguration secrets and the database file.app.config.from_mapping()sets\nsome default configuration that the app will use:SECRET_KEYis used by Flask and extensions to keep data\nsafe. It\u2019s set to'dev'to provide a convenient value\nduring development, but it should be overridden with a random\nvalue when deploying.DATABASEis the path where the SQLite database file will be\nsaved. It\u2019s underapp.instance_path\n, which is the\npath that Flask has chosen for the instance folder. You\u2019ll learn\nmore about the database in the next section.app.config.from_pyfile()overrides\nthe default configuration with values taken from theconfig.pyfile in the instance folder if it exists. For example, when\ndeploying, this can be used to set a realSECRET_KEY\n.test_configcan also be passed to the factory, and will be\nused instead of the instance configuration. This is so the tests\nyou\u2019ll write later in the tutorial can be configured\nindependently of any development values you have configured.os.makedirs()ensures thatapp.instance_pathexists. Flask\ndoesn\u2019t create the instance folder automatically, but it needs to be\ncreated because your project will create the SQLite database file\nthere.@app.route()creates a simple route so you can\nsee the application working before getting into the rest of the\ntutorial. It creates a connection between the URL/helloand a\nfunction that returns a response, the string'Hello,World!'in\nthis case.Run The Application\n\u00b6Now you can run your application using theflaskcommand. From the\nterminal, tell Flask where to find your application, then run it in\ndevelopment mode.Development mode shows an interactive debugger whenever a page raises an\nexception, and restarts the server whenever you make changes to the\ncode. You can leave it running and just reload the browser page as you\nfollow the tutorial.For Linux and Mac:export FLASK_APP=flaskr\nexport FLASK_ENV=development\nflask runFor Windows cmd, usesetinstead ofexport\n:set FLASK_APP=flaskr\nset FLASK_ENV=development\nflask runFor Windows PowerShell, use$env:instead ofexport\n:$env:FLASK_APP = \"flaskr\"\n$env:FLASK_ENV = \"development\"\nflask runYou\u2019ll see output similar to this:* Serving Flask app \"flaskr\"\n* Environment: development\n* Debug mode: on\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n* Restarting with stat\n* Debugger is active!\n* Debugger PIN: 855-212-761Visithttp://127.0.0.1:5000/helloin a browser and you should see the\n\u201cHello, World!\u201d message. Congratulations, you\u2019re now running your Flask\nweb application!Continue toDefine and Access the Database\n.ContentsApplication SetupThe Application FactoryRun The ApplicationNavigationOverviewTutorialPrevious:Project LayoutNext:Define and Access the DatabaseVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/tutorial/factory/"},
{"text": "Configuration Handling \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbConfiguration Handling\n\u00b6Applications need some kind of configuration.There are different settings\nyou might want to change depending on the application environment like\ntoggling the debug mode, setting the secret key, and other such\nenvironment-specific things.The way Flask is designed usually requires the configuration to be\navailable when the application starts up.You can hardcode the\nconfiguration in the code, which for many small applications is not\nactually that bad, but there are better ways.Independent of how you load your config, there is a config object\navailable which holds the loaded configuration values:\nTheconfigattribute of theFlaskobject.This is the place where Flask itself puts certain configuration\nvalues and also where extensions can put their configuration values.But\nthis is also where you can have your own configuration.Configuration Basics\n\u00b6Theconfigis actually a subclass of a dictionary and\ncan be modified just like any dictionary:app=Flask\n(\n__name__\n)app\n.\nconfig\n[\n'TESTING'\n]=TrueCertain configuration values are also forwarded to theFlaskobject so you can read and write them from there:app\n.\ntesting=TrueTo update multiple keys at once you can use thedict.update()method:app\n.\nconfig\n.\nupdate\n(TESTING\n=\nTrue\n,SECRET_KEY\n=\nb\n'_5#y2L\"F4Q8z\n\\n\\xec\n]/')Environment and Debug Features\n\u00b6TheENVandDEBUGconfig values are special because they\nmay behave inconsistently if changed after the app has begun setting up.\nIn order to set the environment and debug mode reliably, Flask uses\nenvironment variables.The environment is used to indicate to Flask, extensions, and other\nprograms, like Sentry, what context Flask is running in. It is\ncontrolled with theFLASK_ENVenvironment variable and\ndefaults toproduction\n.SettingFLASK_ENVtodevelopmentwill enable debug mode.flaskrunwill use the interactive debugger and reloader by default\nin debug mode. To control this separately from the environment, use theFLASK_DEBUGflag.Changed in version 1.0:AddedFLASK_ENVto control the environment separately\nfrom debug mode. The development environment enables debug mode.Changelog\nTo switch Flask to the development environment and enable debug mode,\nsetFLASK_ENV\n:$ export FLASK_ENV=development\n$ flask run(On Windows, usesetinstead ofexport\n.)Using the environment variables as described above is recommended. While\nit is possible to setENVandDEBUGin your config or\ncode, this is strongly discouraged. They can\u2019t be read early by theflaskcommand, and some systems or extensions may have already\nconfigured themselves based on a previous value.Builtin Configuration Values\n\u00b6The following configuration values are used internally by Flask:ENV\n\u00b6What environment the app is running in. Flask and extensions may\nenable behaviors based on the environment, such as enabling debug\nmode. Theenvattribute maps to this config\nkey. This is set by theFLASK_ENVenvironment variable and\nmay not behave as expected if set in code.Do not enable development when deploying in production.Default:'production'New in version 1.0.ChangelogDEBUG\n\u00b6Whether debug mode is enabled. When usingflaskrunto start the\ndevelopment server, an interactive debugger will be shown for\nunhandled exceptions, and the server will be reloaded when code\nchanges. Thedebugattribute maps to this\nconfig key. This is enabled whenENVis'development'and is overridden by theFLASK_DEBUGenvironment variable. It\nmay not behave as expected if set in code.Do not enable debug mode when deploying in production.Default:TrueifENVis'development'\n, orFalseotherwise.TESTING\n\u00b6Enable testing mode. Exceptions are propagated rather than handled by the\nthe app\u2019s error handlers. Extensions may also change their behavior to\nfacilitate easier testing. You should enable this in your own tests.Default:FalsePROPAGATE_EXCEPTIONS\n\u00b6Exceptions are re-raised rather than being handled by the app\u2019s error\nhandlers. If not set, this is implicitly true ifTESTINGorDEBUGis enabled.Default:NonePRESERVE_CONTEXT_ON_EXCEPTION\n\u00b6Don\u2019t pop the request context when an exception occurs. If not set, this\nis true ifDEBUGis true. This allows debuggers to introspect the\nrequest data on errors, and should normally not need to be set directly.Default:NoneTRAP_HTTP_EXCEPTIONS\n\u00b6If there is no handler for anHTTPException\n-type exception, re-raise it\nto be handled by the interactive debugger instead of returning it as a\nsimple error response.Default:FalseTRAP_BAD_REQUEST_ERRORS\n\u00b6Trying to access a key that doesn\u2019t exist from request dicts likeargsandformwill return a 400 Bad Request error page. Enable this to treat\nthe error as an unhandled exception instead so that you get the interactive\ndebugger. This is a more specific version ofTRAP_HTTP_EXCEPTIONS\n. If\nunset, it is enabled in debug mode.Default:NoneSECRET_KEY\n\u00b6A secret key that will be used for securely signing the session cookie\nand can be used for any other security related needs by extensions or your\napplication. It should be a long random string of bytes, although unicode\nis accepted too. For example, copy the output of this to your config:python-\nc'import os; print(os.urandom(16))'b\n'_5#y2L\"F4Q8z\n\\n\\xec\n]/'Do not reveal the secret key when posting questions or committing code.Default:NoneSESSION_COOKIE_NAME\n\u00b6The name of the session cookie. Can be changed in case you already have a\ncookie with the same name.Default:'session'SESSION_COOKIE_DOMAIN\n\u00b6The domain match rule that the session cookie will be valid for. If not\nset, the cookie will be valid for all subdomains ofSERVER_NAME\n.\nIfFalse\n, the cookie\u2019s domain will not be set.Default:NoneSESSION_COOKIE_PATH\n\u00b6The path that the session cookie will be valid for. If not set, the cookie\nwill be valid underneathAPPLICATION_ROOTor/if that is not set.Default:NoneSESSION_COOKIE_HTTPONLY\n\u00b6Browsers will not allow JavaScript access to cookies marked as \u201cHTTP only\u201d\nfor security.Default:TrueSESSION_COOKIE_SECURE\n\u00b6Browsers will only send cookies with requests over HTTPS if the cookie is\nmarked \u201csecure\u201d. The application must be served over HTTPS for this to make\nsense.Default:FalseSESSION_COOKIE_SAMESITE\n\u00b6Restrict how cookies are sent with requests from external sites. Can\nbe set to'Lax'(recommended) or'Strict'\n.\nSeeSet-Cookie options\n.Default:NoneNew in version 1.0.ChangelogPERMANENT_SESSION_LIFETIME\n\u00b6Ifsession.permanentis true, the cookie\u2019s expiration will be set this\nnumber of seconds in the future. Can either be adatetime.timedeltaor anint\n.Flask\u2019s default cookie implementation validates that the cryptographic\nsignature is not older than this value.Default:timedelta(days=31)(\n2678400seconds)SESSION_REFRESH_EACH_REQUEST\n\u00b6Control whether the cookie is sent with every response whensession.permanentis true. Sending the cookie every time (the default)\ncan more reliably keep the session from expiring, but uses more bandwidth.\nNon-permanent sessions are not affected.Default:TrueUSE_X_SENDFILE\n\u00b6When serving files, set theX-Sendfileheader instead of serving the\ndata with Flask. Some web servers, such as Apache, recognize this and serve\nthe data more efficiently. This only makes sense when using such a server.Default:FalseSEND_FILE_MAX_AGE_DEFAULT\n\u00b6When serving files, set the cache control max age to this number of\nseconds.Can either be adatetime.timedeltaor anint\n.\nOverride this value on a per-file basis usingget_send_file_max_age()on the application or blueprint.Default:timedelta(hours=12)(\n43200seconds)SERVER_NAME\n\u00b6Inform the application what host and port it is bound to. Required\nfor subdomain route matching support.If set, will be used for the session cookie domain ifSESSION_COOKIE_DOMAINis not set. Modern web browsers will\nnot allow setting cookies for domains without a dot. To use a domain\nlocally, add any names that should route to the app to yourhostsfile.127.0\n.\n0.1localhost\n.\ndevIf set,url_forcan generate external URLs with only an application\ncontext instead of a request context.Default:NoneAPPLICATION_ROOT\n\u00b6Inform the application what path it is mounted under by the application /\nweb server.Will be used for the session cookie path ifSESSION_COOKIE_PATHis not\nset.Default:'/'PREFERRED_URL_SCHEME\n\u00b6Use this scheme for generating external URLs when not in a request context.Default:'http'MAX_CONTENT_LENGTH\n\u00b6Don\u2019t read more than this many bytes from the incoming request data. If not\nset and the request does not specify aCONTENT_LENGTH\n, no data will be\nread for security.Default:NoneJSON_AS_ASCII\n\u00b6Serialize objects to ASCII-encoded JSON. If this is disabled, the JSON\nwill be returned as a Unicode string, or encoded asUTF-8byjsonify\n. This has security implications when rendering the JSON in\nto JavaScript in templates, and should typically remain enabled.Default:TrueJSON_SORT_KEYS\n\u00b6Sort the keys of JSON objects alphabetically. This is useful for caching\nbecause it ensures the data is serialized the same way no matter what\nPython\u2019s hash seed is. While not recommended, you can disable this for a\npossible performance improvement at the cost of caching.Default:TrueJSONIFY_PRETTYPRINT_REGULAR\n\u00b6jsonifyresponses will be output with newlines, spaces, and indentation\nfor easier reading by humans. Always enabled in debug mode.Default:FalseJSONIFY_MIMETYPE\n\u00b6The mimetype ofjsonifyresponses.Default:'application/json'TEMPLATES_AUTO_RELOAD\n\u00b6Reload templates when they are changed. If not set, it will be enabled in\ndebug mode.Default:NoneEXPLAIN_TEMPLATE_LOADING\n\u00b6Log debugging information tracing how a template file was loaded. This can\nbe useful to figure out why a template was not loaded or the wrong file\nappears to be loaded.Default:FalseMAX_COOKIE_SIZE\n\u00b6Warn if cookie headers are larger than this many bytes. Defaults to4093\n. Larger cookies may be silently ignored by browsers. Set to0to disable the warning.Changed in version 1.0:LOGGER_NAMEandLOGGER_HANDLER_POLICYwere removed. SeeLoggingfor information about configuration.AddedENVto reflect theFLASK_ENVenvironment\nvariable.AddedSESSION_COOKIE_SAMESITEto control the session\ncookie\u2019sSameSiteoption.AddedMAX_COOKIE_SIZEto control a warning from Werkzeug.ChangelogNew in version 0.11:SESSION_REFRESH_EACH_REQUEST\n,TEMPLATES_AUTO_RELOAD\n,LOGGER_HANDLER_POLICY\n,EXPLAIN_TEMPLATE_LOADINGNew in version 0.10:JSON_AS_ASCII\n,JSON_SORT_KEYS\n,JSONIFY_PRETTYPRINT_REGULARNew in version 0.9:PREFERRED_URL_SCHEMENew in version 0.8:TRAP_BAD_REQUEST_ERRORS\n,TRAP_HTTP_EXCEPTIONS\n,APPLICATION_ROOT\n,SESSION_COOKIE_DOMAIN\n,SESSION_COOKIE_PATH\n,SESSION_COOKIE_HTTPONLY\n,SESSION_COOKIE_SECURENew in version 0.7:PROPAGATE_EXCEPTIONS\n,PRESERVE_CONTEXT_ON_EXCEPTIONNew in version 0.6:MAX_CONTENT_LENGTHNew in version 0.5:SERVER_NAMENew in version 0.4:LOGGER_NAMEConfiguring from Files\n\u00b6Configuration becomes more useful if you can store it in a separate file,\nideally located outside the actual application package. This makes\npackaging and distributing your application possible via various package\nhandling tools (\nDeploying with Setuptools\n) and finally modifying the\nconfiguration file afterwards.So a common pattern is this:app=Flask\n(\n__name__\n)app\n.\nconfig\n.\nfrom_object\n(\n'yourapplication.default_settings'\n)app\n.\nconfig\n.\nfrom_envvar\n(\n'YOURAPPLICATION_SETTINGS'\n)This first loads the configuration from theyourapplication.default_settingsmodule and then overrides the values\nwith the contents of the file theYOURAPPLICATION_SETTINGSenvironment variable points to.This environment variable can be set on\nLinux or OS X with the export command in the shell before starting the\nserver:$ export YOURAPPLICATION_SETTINGS=/path/to/settings.cfg\n$ python run-app.py* Running on http://127.0.0.1:5000/* Restarting with reloader...On Windows systems use thesetbuiltin instead:>\nsetYOURAPPLICATION_SETTINGS\n=\n\\\npath\n\\\nto\n\\\nsettings\n.\ncfgThe configuration files themselves are actual Python files.Only values\nin uppercase are actually stored in the config object later on.So make\nsure to use uppercase letters for your config keys.Here is an example of a configuration file:# Example configurationDEBUG=FalseSECRET_KEY=b\n'_5#y2L\"F4Q8z\n\\n\\xec\n]/'Make sure to load the configuration very early on, so that extensions have\nthe ability to access the configuration when starting up.There are other\nmethods on the config object as well to load from individual files.For a\ncomplete reference, read theConfigobject\u2019s\ndocumentation.Configuring from Environment Variables\n\u00b6In addition to pointing to configuration files using environment variables, you\nmay find it useful (or necessary) to control your configuration values directly\nfrom the environment.Environment variables can be set on Linux or OS X with the export command in\nthe shell before starting the server:$ export SECRET_KEY='5f352379324c22463451387a0aec5d2f'\n$ export DEBUG=False\n$ python run-app.py* Running on http://127.0.0.1:5000/* Restarting with reloader...On Windows systems use thesetbuiltin instead:>\nsetSECRET_KEY\n=\n'5f352379324c22463451387a0aec5d2f'>\nsetDEBUG\n=\nFalseWhile this approach is straightforward to use, it is important to remember that\nenvironment variables are strings \u2013 they are not automatically deserialized\ninto Python types.Here is an example of a configuration file that uses environment variables:# Example configurationimportosENVIRONMENT_DEBUG=os\n.\nenviron\n.\nget\n(\n\"DEBUG\"\n,default\n=\nFalse\n)ifENVIRONMENT_DEBUG\n.\nlower\n()in(\n\"f\"\n,\"false\"\n):ENVIRONMENT_DEBUG=FalseDEBUG=ENVIRONMENT_DEBUGSECRET_KEY=os\n.\nenviron\n.\nget\n(\n\"SECRET_KEY\"\n,default\n=\nNone\n)ifnotSECRET_KEY\n:raiseValueError\n(\n\"No secret key set for Flask application\"\n)Notice that any value besides an empty string will be interpreted as a booleanTruevalue in Python, which requires care if an environment explicitly sets\nvalues intended to beFalse\n.Make sure to load the configuration very early on, so that extensions have the\nability to access the configuration when starting up.There are other methods\non the config object as well to load from individual files.For a complete\nreference, read theConfigclass documentation.Configuration Best Practices\n\u00b6The downside with the approach mentioned earlier is that it makes testing\na little harder.There is no single 100% solution for this problem in\ngeneral, but there are a couple of things you can keep in mind to improve\nthat experience:Create your application in a function and register blueprints on it.\nThat way you can create multiple instances of your application with\ndifferent configurations attached which makes unittesting a lot\neasier.You can use this to pass in configuration as needed.Do not write code that needs the configuration at import time.If you\nlimit yourself to request-only accesses to the configuration you can\nreconfigure the object later on as needed.Development / Production\n\u00b6Most applications need more than one configuration.There should be at\nleast separate configurations for the production server and the one used\nduring development.The easiest way to handle this is to use a default\nconfiguration that is always loaded and part of the version control, and a\nseparate configuration that overrides the values as necessary as mentioned\nin the example above:app=Flask\n(\n__name__\n)app\n.\nconfig\n.\nfrom_object\n(\n'yourapplication.default_settings'\n)app\n.\nconfig\n.\nfrom_envvar\n(\n'YOURAPPLICATION_SETTINGS'\n)Then you just have to add a separateconfig.pyfile and exportYOURAPPLICATION_SETTINGS=/path/to/config.pyand you are done.However\nthere are alternative ways as well.For example you could use imports or\nsubclassing.What is very popular in the Django world is to make the import explicit in\nthe config file by addingfromyourapplication.default_settingsimport*to the top of the file and then overriding the changes by hand.\nYou could also inspect an environment variable likeYOURAPPLICATION_MODEand set that toproduction\n,developmentetc\nand import different hardcoded files based on that.An interesting pattern is also to use classes and inheritance for\nconfiguration:classConfig\n(\nobject\n):DEBUG=FalseTESTING=FalseDATABASE_URI='sqlite:///:memory:'classProductionConfig\n(\nConfig\n):DATABASE_URI='mysql://user@localhost/foo'classDevelopmentConfig\n(\nConfig\n):DEBUG=TrueclassTestingConfig\n(\nConfig\n):TESTING=TrueTo enable such a config you just have to call intofrom_object()\n:app\n.\nconfig\n.\nfrom_object\n(\n'configmodule.ProductionConfig'\n)There are many different ways and it\u2019s up to you how you want to manage\nyour configuration files.However here a list of good recommendations:Keep a default configuration in version control.Either populate the\nconfig with this default configuration or import it in your own\nconfiguration files before overriding values.Use an environment variable to switch between the configurations.\nThis can be done from outside the Python interpreter and makes\ndevelopment and deployment much easier because you can quickly and\neasily switch between different configs without having to touch the\ncode at all.If you are working often on different projects you can\neven create your own script for sourcing that activates a virtualenv\nand exports the development configuration for you.Use a tool likefabricin production to push code and\nconfigurations separately to the production server(s).For some\ndetails about how to do that, head over to theDeploying with Fabricpattern.Instance Folders\n\u00b6ChangelogNew in version 0.8.Flask 0.8 introduces instance folders.Flask for a long time made it\npossible to refer to paths relative to the application\u2019s folder directly\n(viaFlask.root_path\n).This was also how many developers loaded\nconfigurations stored next to the application.Unfortunately however this\nonly works well if applications are not packages in which case the root\npath refers to the contents of the package.With Flask 0.8 a new attribute was introduced:Flask.instance_path\n.It refers to a new concept called the\n\u201cinstance folder\u201d.The instance folder is designed to not be under\nversion control and be deployment specific.It\u2019s the perfect place to\ndrop things that either change at runtime or configuration files.You can either explicitly provide the path of the instance folder when\ncreating the Flask application or you can let Flask autodetect the\ninstance folder.For explicit configuration use theinstance_pathparameter:app=Flask\n(\n__name__\n,instance_path\n=\n'/path/to/instance/folder'\n)Please keep in mind that this pathmustbe absolute when provided.If theinstance_pathparameter is not provided the following default\nlocations are used:Uninstalled module:/\nmyapp\n.\npy/\ninstanceUninstalled package:/\nmyapp/\n__init__\n.\npy/\ninstanceInstalled module or package:$PREFIX/lib/python2.X/site-packages/myapp\n$PREFIX/var/myapp-instance$PREFIXis the prefix of your Python installation.This can be/usror the path to your virtualenv.You can print the value ofsys.prefixto see what the prefix is set to.Since the config object provided loading of configuration files from\nrelative filenames we made it possible to change the loading via filenames\nto be relative to the instance path if wanted.The behavior of relative\npaths in config files can be flipped between \u201crelative to the application\nroot\u201d (the default) to \u201crelative to instance folder\u201d via theinstance_relative_configswitch to the application constructor:app=Flask\n(\n__name__\n,instance_relative_config\n=\nTrue\n)Here is a full example of how to configure Flask to preload the config\nfrom a module and then override the config from a file in the config\nfolder if it exists:app=Flask\n(\n__name__\n,instance_relative_config\n=\nTrue\n)app\n.\nconfig\n.\nfrom_object\n(\n'yourapplication.default_settings'\n)app\n.\nconfig\n.\nfrom_pyfile\n(\n'application.cfg'\n,silent\n=\nTrue\n)The path to the instance folder can be found via theFlask.instance_path\n.Flask also provides a shortcut to open a\nfile from the instance folder withFlask.open_instance_resource()\n.Example usage for both:filename=os\n.\npath\n.\njoin\n(\napp\n.\ninstance_path\n,'application.cfg'\n)withopen\n(\nfilename\n)asf\n:config=f\n.\nread\n()# or via open_instance_resource:withapp\n.\nopen_instance_resource\n(\n'application.cfg'\n)asf\n:config=f\n.\nread\n()ContentsConfiguration HandlingConfiguration BasicsEnvironment and Debug FeaturesBuiltin Configuration ValuesConfiguring from FilesConfiguring from Environment VariablesConfiguration Best PracticesDevelopment / ProductionInstance FoldersNavigationOverviewPrevious:LoggingNext:SignalsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/config/"},
{"text": "Define and Access the Database \u2014 Flask 1.0.2 documentationDOCUMENTATION_OPTIONS.URL_ROOT = '../../';Navigationindexmodules|next|previous|Flask 1.0.2 documentation\u00bbTutorial\u00bbDefine and Access the Database\n\u00b6The application will use aSQLitedatabase to store users and posts.\nPython comes with built-in support for SQLite in thesqlite3module.SQLite is convenient because it doesn\u2019t require setting up a separate\ndatabase server and is built-in to Python. However, if concurrent\nrequests try to write to the database at the same time, they will slow\ndown as each write happens sequentially. Small applications won\u2019t notice\nthis. Once you become big, you may want to switch to a different\ndatabase.The tutorial doesn\u2019t go into detail about SQL. If you are not familiar\nwith it, the SQLite docs describe thelanguage\n.Connect to the Database\n\u00b6The first thing to do when working with a SQLite database (and most\nother Python database libraries) is to create a connection to it. Any\nqueries and operations are performed using the connection, which is\nclosed after the work is finished.In web applications this connection is typically tied to the request. It\nis created at some point when handling a request, and closed before the\nresponse is sent.flaskr/db.py\n\u00b6importsqlite3importclickfromflaskimportcurrent_app\n,gfromflask.cliimportwith_appcontextdefget_db\n():if'db'noting\n:g\n.\ndb=sqlite3\n.\nconnect\n(current_app\n.\nconfig\n[\n'DATABASE'\n],detect_types\n=\nsqlite3\n.\nPARSE_DECLTYPES)g\n.\ndb\n.\nrow_factory=sqlite3\n.\nRowreturng\n.\ndbdefclose_db\n(\ne\n=\nNone\n):db=g\n.\npop\n(\n'db'\n,None\n)ifdbisnotNone\n:db\n.\nclose\n()gis a special object that is unique for each request. It is\nused to store data that might be accessed by multiple functions during\nthe request. The connection is stored and reused instead of creating a\nnew connection ifget_dbis called a second time in the same\nrequest.current_appis another special object that points to the Flask\napplication handling the request. Since you used an application factory,\nthere is no application object when writing the rest of your code.get_dbwill be called when the application has been created and is\nhandling a request, socurrent_appcan be used.sqlite3.connect()establishes a connection to the file pointed at\nby theDATABASEconfiguration key. This file doesn\u2019t have to exist\nyet, and won\u2019t until you initialize the database later.sqlite3.Rowtells the connection to return rows that behave\nlike dicts. This allows accessing the columns by name.close_dbchecks if a connection was created by checking ifg.dbwas set. If the connection exists, it is closed. Further down you will\ntell your application about theclose_dbfunction in the application\nfactory so that it is called after each request.Create the Tables\n\u00b6In SQLite, data is stored intablesandcolumns\n. These need to be\ncreated before you can store and retrieve data. Flaskr will store users\nin theusertable, and posts in theposttable. Create a file\nwith the SQL commands needed to create empty tables:flaskr/schema.sql\n\u00b6DROPTABLEIFEXISTSuser\n;DROPTABLEIFEXISTSpost\n;CREATETABLEuser(idINTEGERPRIMARYKEYAUTOINCREMENT\n,usernameTEXTUNIQUENOTNULL\n,passwordTEXTNOTNULL);CREATETABLEpost(idINTEGERPRIMARYKEYAUTOINCREMENT\n,author_idINTEGERNOTNULL\n,createdTIMESTAMPNOTNULLDEFAULTCURRENT_TIMESTAMP\n,titleTEXTNOTNULL\n,bodyTEXTNOTNULL\n,FOREIGNKEY(\nauthor_id\n)REFERENCESuser(\nid\n));Add the Python functions that will run these SQL commands to thedb.pyfile:flaskr/db.py\n\u00b6definit_db\n():db=get_db\n()withcurrent_app\n.\nopen_resource\n(\n'schema.sql'\n)asf\n:db\n.\nexecutescript\n(\nf\n.\nread\n()\n.\ndecode\n(\n'utf8'\n))@click.command\n(\n'init-db'\n)@with_appcontextdefinit_db_command\n():\"\"\"Clear the existing data and create new tables.\"\"\"init_db\n()click\n.\necho\n(\n'Initialized the database.'\n)open_resource()opens a file relative to\ntheflaskrpackage, which is useful since you won\u2019t necessarily know\nwhere that location is when deploying the application later.get_dbreturns a database connection, which is used to execute the commands\nread from the file.click.command()defines a command line command calledinit-dbthat calls theinit_dbfunction and shows a success message to the\nuser. You can readCommand Line Interfaceto learn more about writing commands.Register with the Application\n\u00b6Theclose_dbandinit_db_commandfunctions need to be registered\nwith the application instance, otherwise they won\u2019t be used by the\napplication. However, since you\u2019re using a factory function, that\ninstance isn\u2019t available when writing the functions. Instead, write a\nfunction that takes an application and does the registration.flaskr/db.py\n\u00b6definit_app\n(\napp\n):app\n.\nteardown_appcontext\n(\nclose_db\n)app\n.\ncli\n.\nadd_command\n(\ninit_db_command\n)app.teardown_appcontext()tells\nFlask to call that function when cleaning up after returning the\nresponse.app.cli.add_command()adds a new\ncommand that can be called with theflaskcommand.Import and call this function from the factory. Place the new code at\nthe end of the factory function before returning the app.flaskr/__init__.py\n\u00b6defcreate_app\n():app=...# existing code omittedfrom.importdbdb\n.\ninit_app\n(\napp\n)returnappInitialize the Database File\n\u00b6Now thatinit-dbhas been registered with the app, it can be called\nusing theflaskcommand, similar to theruncommand from the\nprevious page.NoteIf you\u2019re still running the server from the previous page, you can\neither stop the server, or run this command in a new terminal. If\nyou use a new terminal, remember to change to your project directory\nand activate the env as described inActivate the environment\n.\nYou\u2019ll also need to setFLASK_APPandFLASK_ENVas shown on\nthe previous page.Run theinit-dbcommand:flask init-db\nInitialized the database.There will now be aflaskr.sqlitefile in theinstancefolder in\nyour project.Continue toBlueprints and Views\n.ContentsDefine and Access the DatabaseConnect to the DatabaseCreate the TablesRegister with the ApplicationInitialize the Database FileNavigationOverviewTutorialPrevious:Application SetupNext:Blueprints and ViewsVersionsDevelopment(unstable)Flask 1.0(stable)Flask 0.12Quick search$('#searchbox').show(0);\u00a9 Copyright 2010 Pallets Team.Created usingSphinx1.7.4.", "url": "http://flask.pocoo.org/docs/1.0/tutorial/database/"}
]